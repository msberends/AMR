# Generated by roxygen2: do not edit by hand

S3method("!=",amr_selector)
S3method("$",deprecated_amr_dataset)
S3method("&",amr_selector)
S3method("+",ab)
S3method("+",amr_selector)
S3method("==",amr_selector)
S3method("[",ab)
S3method("[",av)
S3method("[",deprecated_amr_dataset)
S3method("[",disk)
S3method("[",mic)
S3method("[",mo)
S3method("[<-",ab)
S3method("[<-",av)
S3method("[<-",disk)
S3method("[<-",mic)
S3method("[<-",mo)
S3method("[<-",sir)
S3method("[[",ab)
S3method("[[",av)
S3method("[[",deprecated_amr_dataset)
S3method("[[",disk)
S3method("[[",mic)
S3method("[[",mo)
S3method("[[<-",ab)
S3method("[[<-",av)
S3method("[[<-",disk)
S3method("[[<-",mic)
S3method("[[<-",mo)
S3method("[[<-",sir)
S3method("|",amr_selector)
S3method(Complex,mic)
S3method(Math,mic)
S3method(Ops,mic)
S3method(Summary,mic)
S3method(all,amr_selector)
S3method(all,amr_selector_any_all)
S3method(antibiogram,default)
S3method(antibiogram,grouped_df)
S3method(any,amr_selector)
S3method(any,amr_selector_any_all)
S3method(as.data.frame,ab)
S3method(as.data.frame,av)
S3method(as.data.frame,deprecated_amr_dataset)
S3method(as.data.frame,mic)
S3method(as.data.frame,mo)
S3method(as.double,mic)
S3method(as.double,sir)
S3method(as.list,custom_eucast_rules)
S3method(as.list,custom_mdro_guideline)
S3method(as.list,mic)
S3method(as.matrix,mic)
S3method(as.numeric,mic)
S3method(as.sir,data.frame)
S3method(as.sir,default)
S3method(as.sir,disk)
S3method(as.sir,mic)
S3method(as.vector,mic)
S3method(barplot,antibiogram)
S3method(barplot,disk)
S3method(barplot,mic)
S3method(barplot,sir)
S3method(c,ab)
S3method(c,amr_selector)
S3method(c,av)
S3method(c,custom_eucast_rules)
S3method(c,custom_mdro_guideline)
S3method(c,disk)
S3method(c,mic)
S3method(c,mo)
S3method(c,sir)
S3method(close,progress_bar)
S3method(droplevels,mic)
S3method(droplevels,sir)
S3method(format,bug_drug_combinations)
S3method(hist,mic)
S3method(kurtosis,data.frame)
S3method(kurtosis,default)
S3method(kurtosis,matrix)
S3method(mean,mic)
S3method(mean_amr_distance,data.frame)
S3method(mean_amr_distance,default)
S3method(mean_amr_distance,disk)
S3method(mean_amr_distance,mic)
S3method(mean_amr_distance,sir)
S3method(median,mic)
S3method(plot,antibiogram)
S3method(plot,disk)
S3method(plot,mic)
S3method(plot,resistance_predict)
S3method(plot,sir)
S3method(print,ab)
S3method(print,amr_selector)
S3method(print,av)
S3method(print,bug_drug_combinations)
S3method(print,custom_eucast_rules)
S3method(print,custom_mdro_guideline)
S3method(print,deprecated_amr_dataset)
S3method(print,disk)
S3method(print,mic)
S3method(print,mo)
S3method(print,mo_renamed)
S3method(print,mo_uncertainties)
S3method(print,pca)
S3method(print,sir)
S3method(print,sir_log)
S3method(quantile,mic)
S3method(rep,ab)
S3method(rep,av)
S3method(rep,disk)
S3method(rep,mic)
S3method(rep,mo)
S3method(rep,sir)
S3method(skewness,data.frame)
S3method(skewness,default)
S3method(skewness,matrix)
S3method(sort,mic)
S3method(summary,mic)
S3method(summary,mo)
S3method(summary,pca)
S3method(summary,sir)
S3method(unique,ab)
S3method(unique,av)
S3method(unique,disk)
S3method(unique,mic)
S3method(unique,mo)
S3method(unique,sir)
export("%like%")
export("%like_case%")
export("%unlike%")
export("%unlike_case%")
export(NA_disk_)
export(NA_mic_)
export(NA_sir_)
export(ab_atc)
export(ab_atc_group1)
export(ab_atc_group2)
export(ab_cid)
export(ab_class)
export(ab_ddd)
export(ab_ddd_units)
export(ab_from_text)
export(ab_group)
export(ab_info)
export(ab_loinc)
export(ab_name)
export(ab_property)
export(ab_reset_session)
export(ab_selector)
export(ab_synonyms)
export(ab_tradenames)
export(ab_url)
export(add_custom_antimicrobials)
export(add_custom_microorganisms)
export(administrable_iv)
export(administrable_per_os)
export(age)
export(age_groups)
export(all_antimicrobials)
export(aminoglycosides)
export(aminopenicillins)
export(amr_class)
export(amr_distance_from_row)
export(amr_selector)
export(anti_join_microorganisms)
export(antibiogram)
export(antifungals)
export(antimicrobials_equal)
export(antimycobacterials)
export(as.ab)
export(as.av)
export(as.disk)
export(as.mic)
export(as.mo)
export(as.sir)
export(atc_online_ddd)
export(atc_online_ddd_units)
export(atc_online_groups)
export(atc_online_property)
export(av_atc)
export(av_cid)
export(av_ddd)
export(av_ddd_units)
export(av_from_text)
export(av_group)
export(av_info)
export(av_loinc)
export(av_name)
export(av_property)
export(av_synonyms)
export(av_tradenames)
export(av_url)
export(availability)
export(betalactams)
export(betalactams_with_inhibitor)
export(brmo)
export(bug_drug_combinations)
export(carbapenems)
export(cephalosporins)
export(cephalosporins_1st)
export(cephalosporins_2nd)
export(cephalosporins_3rd)
export(cephalosporins_4th)
export(cephalosporins_5th)
export(clear_custom_antimicrobials)
export(clear_custom_microorganisms)
export(count_I)
export(count_IR)
export(count_R)
export(count_S)
export(count_SI)
export(count_all)
export(count_df)
export(count_resistant)
export(count_susceptible)
export(custom_eucast_rules)
export(custom_mdro_guideline)
export(eucast_dosage)
export(eucast_exceptional_phenotypes)
export(eucast_rules)
export(facet_sir)
export(filter_first_isolate)
export(first_isolate)
export(fluoroquinolones)
export(full_join_microorganisms)
export(g.test)
export(geom_sir)
export(get_AMR_locale)
export(get_episode)
export(get_mo_source)
export(ggplot_pca)
export(ggplot_sir)
export(ggplot_sir_predict)
export(glycopeptides)
export(guess_ab_col)
export(inner_join_microorganisms)
export(is.ab)
export(is.av)
export(is.disk)
export(is.mic)
export(is.mo)
export(is.sir)
export(is_new_episode)
export(is_sir_eligible)
export(isoxazolylpenicillins)
export(italicise_taxonomy)
export(italicize_taxonomy)
export(key_antimicrobials)
export(kurtosis)
export(labels_sir_count)
export(left_join_microorganisms)
export(like)
export(lincosamides)
export(lipoglycopeptides)
export(macrolides)
export(mdr_cmi2012)
export(mdr_tb)
export(mdro)
export(mean_amr_distance)
export(mic_p50)
export(mic_p90)
export(mo_authors)
export(mo_class)
export(mo_cleaning_regex)
export(mo_current)
export(mo_domain)
export(mo_failures)
export(mo_family)
export(mo_fullname)
export(mo_gbif)
export(mo_genus)
export(mo_gramstain)
export(mo_group_members)
export(mo_info)
export(mo_is_anaerobic)
export(mo_is_gram_negative)
export(mo_is_gram_positive)
export(mo_is_intrinsic_resistant)
export(mo_is_yeast)
export(mo_kingdom)
export(mo_lpsn)
export(mo_matching_score)
export(mo_mycobank)
export(mo_name)
export(mo_order)
export(mo_oxygen_tolerance)
export(mo_pathogenicity)
export(mo_phylum)
export(mo_property)
export(mo_rank)
export(mo_ref)
export(mo_renamed)
export(mo_reset_session)
export(mo_shortname)
export(mo_snomed)
export(mo_species)
export(mo_status)
export(mo_subspecies)
export(mo_synonyms)
export(mo_taxonomy)
export(mo_type)
export(mo_uncertainties)
export(mo_url)
export(mo_year)
export(monobactams)
export(mrgn)
export(n_sir)
export(nitrofurans)
export(not_intrinsic_resistant)
export(oxazolidinones)
export(pca)
export(penicillins)
export(phenicols)
export(polymyxins)
export(proportion_I)
export(proportion_IR)
export(proportion_R)
export(proportion_S)
export(proportion_SI)
export(proportion_df)
export(quinolones)
export(random_disk)
export(random_mic)
export(random_sir)
export(rescale_mic)
export(reset_AMR_locale)
export(resistance)
export(resistance_predict)
export(retrieve_wisca_parameters)
export(rifamycins)
export(right_join_microorganisms)
export(scale_color_mic)
export(scale_color_sir)
export(scale_colour_mic)
export(scale_colour_sir)
export(scale_fill_mic)
export(scale_fill_sir)
export(scale_sir_colors)
export(scale_sir_colours)
export(scale_x_mic)
export(scale_x_sir)
export(scale_y_mic)
export(scale_y_percent)
export(semi_join_microorganisms)
export(set_AMR_locale)
export(set_ab_names)
export(set_mo_source)
export(sir_confidence_interval)
export(sir_df)
export(sir_interpretation_history)
export(sir_predict)
export(skewness)
export(streptogramins)
export(sulfonamides)
export(susceptibility)
export(tetracyclines)
export(theme_sir)
export(top_n_microorganisms)
export(translate_AMR)
export(trimethoprims)
export(ureidopenicillins)
export(wisca)
if(getRversion() >= "3.0.0") S3method(cleaner::freq, mo)
if(getRversion() >= "3.0.0") S3method(cleaner::freq, sir)
if(getRversion() >= "3.0.0") S3method(ggplot2::autoplot, antibiogram)
if(getRversion() >= "3.0.0") S3method(ggplot2::autoplot, disk)
if(getRversion() >= "3.0.0") S3method(ggplot2::autoplot, mic)
if(getRversion() >= "3.0.0") S3method(ggplot2::autoplot, resistance_predict)
if(getRversion() >= "3.0.0") S3method(ggplot2::autoplot, sir)
if(getRversion() >= "3.0.0") S3method(ggplot2::fortify, disk)
if(getRversion() >= "3.0.0") S3method(ggplot2::fortify, mic)
if(getRversion() >= "3.0.0") S3method(ggplot2::fortify, resistance_predict)
if(getRversion() >= "3.0.0") S3method(ggplot2::fortify, sir)
if(getRversion() >= "3.0.0") S3method(knitr::knit_print, antibiogram)
if(getRversion() >= "3.0.0") S3method(knitr::knit_print, formatted_bug_drug_combinations)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, ab)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, av)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, disk)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, mic)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, mo)
if(getRversion() >= "3.0.0") S3method(pillar::pillar_shaft, sir)
if(getRversion() >= "3.0.0") S3method(pillar::tbl_format_footer, antibiogram)
if(getRversion() >= "3.0.0") S3method(pillar::tbl_sum, antibiogram)
if(getRversion() >= "3.0.0") S3method(pillar::type_sum, ab)
if(getRversion() >= "3.0.0") S3method(pillar::type_sum, av)
if(getRversion() >= "3.0.0") S3method(pillar::type_sum, mic)
if(getRversion() >= "3.0.0") S3method(pillar::type_sum, mo)
if(getRversion() >= "3.0.0") S3method(pillar::type_sum, sir)
if(getRversion() >= "3.0.0") S3method(skimr::get_skimmers, disk)
if(getRversion() >= "3.0.0") S3method(skimr::get_skimmers, mic)
if(getRversion() >= "3.0.0") S3method(skimr::get_skimmers, mo)
if(getRversion() >= "3.0.0") S3method(skimr::get_skimmers, sir)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_arith, mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, ab.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, av.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.ab)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.amr_selector)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.av)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.mo)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, character.sir)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, disk.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, disk.disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, disk.double)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, disk.integer)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, double.disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, double.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, factor.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, integer.disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, integer.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, logical.amr_selector_any_all)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mic.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mic.double)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mic.factor)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mic.integer)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mic.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, mo.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, sir.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_cast, sir.sir)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_math, mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, ab.ab)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, ab.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, amr_selector.character)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, amr_selector_any_all.logical)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, av.av)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, av.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, character.amr_selector)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, character.sir)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, disk.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, disk.disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, logical.amr_selector_any_all)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, mic.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, mic.mic)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, mo.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, mo.mo)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, sir.default)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype2, sir.sir)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype_abbr, disk)
if(getRversion() >= "3.0.0") S3method(vctrs::vec_ptype_full, disk)
importFrom(graphics,arrows)
importFrom(graphics,axis)
importFrom(graphics,barplot)
importFrom(graphics,hist)
importFrom(graphics,legend)
importFrom(graphics,mtext)
importFrom(graphics,plot)
importFrom(graphics,points)
importFrom(graphics,text)
importFrom(stats,complete.cases)
importFrom(stats,glm)
importFrom(stats,lm)
importFrom(stats,median)
importFrom(stats,pchisq)
importFrom(stats,prcomp)
importFrom(stats,predict)
importFrom(stats,qchisq)
importFrom(stats,quantile)
importFrom(stats,var)
