[{"path":"https://amr-for-r.org/articles/AMR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Conduct AMR data analysis","text":"Conducting AMR data analysis unfortunately requires -depth knowledge different scientific fields, makes hard right. least, requires: Good questions (always start !) reliable data thorough understanding (clinical) epidemiology, understand clinical epidemiological relevance possible bias results thorough understanding (clinical) microbiology/infectious diseases, understand microorganisms causal infections implications pharmaceutical treatment, well understanding intrinsic acquired microbial resistance Experience data analysis microbiological tests results, understand determination limitations MIC values interpretations SIR values Availability biological taxonomy microorganisms probably normalisation factors pharmaceuticals, defined daily doses (DDD) Available (inter-)national guidelines, profound methods apply course, instantly provide knowledge experience. AMR package, aimed providing (1) tools simplify antimicrobial resistance data cleaning, transformation analysis, (2) methods easily incorporate international guidelines (3) scientifically reliable reference data, including requirements mentioned . AMR package enables standardised reproducible AMR data analysis, application evidence-based rules, determination first isolates, translation various codes microorganisms antimicrobial agents, determination (multi-drug) resistant microorganisms, calculation antimicrobial resistance, prevalence future trends.","code":""},{"path":"https://amr-for-r.org/articles/AMR.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Conduct AMR data analysis","text":"tutorial, create fake demonstration data work . can skip Cleaning data already data ready. start analysis, try make structure data generally look like :","code":""},{"path":"https://amr-for-r.org/articles/AMR.html","id":"needed-r-packages","dir":"Articles","previous_headings":"Preparation","what":"Needed R packages","title":"Conduct AMR data analysis","text":"many uses R, need additional packages AMR data analysis. package works closely together tidyverse packages dplyr ggplot2 RStudio. tidyverse tremendously improves way conduct data science - allows natural way writing syntaxes creating beautiful plots R. also use cleaner package, can used cleaning data creating frequency tables. AMR package contains data set example_isolates_unclean, might look data users extracted laboratory systems: AMR data analysis, like microorganism column contain valid, --date taxonomy, antibiotic columns cleaned SIR values well.","code":"library(dplyr) library(ggplot2) library(AMR)  # (if not yet installed, install with:) # install.packages(c(\"dplyr\", \"ggplot2\", \"AMR\")) example_isolates_unclean #> # A tibble: 3,000 × 8 #>    patient_id hospital date       bacteria      AMX   AMC   CIP   GEN   #>    <chr>      <chr>    <date>     <chr>         <chr> <chr> <chr> <chr> #>  1 J3         A        2012-11-21 E. coli       R     I     S     S     #>  2 R7         A        2018-04-03 K. pneumoniae R     I     S     S     #>  3 P3         A        2014-09-19 E. coli       R     S     S     S     #>  4 P10        A        2015-12-10 E. coli       S     I     S     S     #>  5 B7         A        2015-03-02 E. coli       S     S     S     S     #>  6 W3         A        2018-03-31 S. aureus     R     S     R     S     #>  7 J8         A        2016-06-14 E. coli       R     S     S     S     #>  8 M3         A        2015-10-25 E. coli       R     S     S     S     #>  9 J3         A        2019-06-19 E. coli       S     S     S     S     #> 10 G6         A        2015-04-27 S. aureus     S     S     S     S     #> # ℹ 2,990 more rows  # we will use 'our_data' as the data set name for this tutorial our_data <- example_isolates_unclean"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"taxonomy-of-microorganisms","dir":"Articles","previous_headings":"Preparation","what":"Taxonomy of microorganisms","title":"Conduct AMR data analysis","text":".mo(), users can transform arbitrary microorganism names codes current taxonomy. AMR package contains --date taxonomic data. specific, currently included data retrieved 24 Jun 2024. codes AMR packages come .mo() short, still human readable. importantly, .mo() supports kinds input: first character codes denote taxonomic kingdom, Bacteria (B), Fungi (F), Protozoa (P). AMR package also contain functions directly retrieve taxonomic properties, name, genus, species, family, order, even Gram-stain. start mo_ use .mo() internally, still arbitrary user input can used: Now can thus clean data: Apparently, uncertainty translation taxonomic codes. Let’s check : ’s good.","code":"as.mo(\"Klebsiella pneumoniae\") #> Class 'mo' #> [1] B_KLBSL_PNMN as.mo(\"K. pneumoniae\") #> Class 'mo' #> [1] B_KLBSL_PNMN as.mo(\"KLEPNE\") #> Class 'mo' #> [1] B_KLBSL_PNMN as.mo(\"KLPN\") #> Class 'mo' #> [1] B_KLBSL_PNMN mo_family(\"K. pneumoniae\") #> [1] \"Enterobacteriaceae\" mo_genus(\"K. pneumoniae\") #> [1] \"Klebsiella\" mo_species(\"K. pneumoniae\") #> [1] \"pneumoniae\"  mo_gramstain(\"Klebsiella pneumoniae\") #> [1] \"Gram-negative\"  mo_ref(\"K. pneumoniae\") #> [1] \"Trevisan, 1887\"  mo_snomed(\"K. pneumoniae\") #> [[1]] #> [1] \"1098101000112102\" \"446870005\"        \"1098201000112108\" \"409801009\"        #> [5] \"56415008\"         \"714315002\"        \"713926009\" our_data$bacteria <- as.mo(our_data$bacteria, info = TRUE) #> ℹ Retrieved values from the microorganisms.codes data set for \"ESCCOL\", #>   \"KLEPNE\", \"STAAUR\", and \"STRPNE\". #> ℹ Microorganism translation was uncertain for four microorganisms. Run #>   mo_uncertainties() to review these uncertainties, or use #>   add_custom_microorganisms() to add custom entries. mo_uncertainties() #> Matching scores are based on the resemblance between the input and the full #> taxonomic name, and the pathogenicity in humans. See ?mo_matching_score. #> Colour keys:  0.000-0.549  0.550-0.649  0.650-0.749  0.750-1.000  #>  #> -------------------------------------------------------------------------------- #> \"E. coli\" -> Escherichia coli (B_ESCHR_COLI, 0.688) #> Also matched: Enterococcus crotali (0.650), Escherichia coli coli #>               (0.643), Escherichia coli expressing (0.611), Enterobacter cowanii #>               (0.600), Enterococcus columbae (0.595), Enterococcus camelliae (0.591), #>               Enterococcus casseliflavus (0.577), Enterobacter cloacae cloacae #>               (0.571), Enterobacter cloacae complex (0.571), and Enterobacter cloacae #>               dissolvens (0.565) #> -------------------------------------------------------------------------------- #> \"K. pneumoniae\" -> Klebsiella pneumoniae (B_KLBSL_PNMN, 0.786) #> Also matched: Klebsiella pneumoniae complex (0.707), Klebsiella #>               pneumoniae ozaenae (0.707), Klebsiella pneumoniae pneumoniae (0.688), #>               Klebsiella pneumoniae rhinoscleromatis (0.658), Klebsiella pasteurii #>               (0.500), Klebsiella planticola (0.500), Kingella potus (0.400), #>               Kluyveromyces pseudotropicale (0.386), Kluyveromyces pseudotropicalis #>               (0.363), and Kosakonia pseudosacchari (0.361) #> -------------------------------------------------------------------------------- #> \"S. aureus\" -> Staphylococcus aureus (B_STPHY_AURS, 0.690) #> Also matched: Staphylococcus aureus aureus (0.643), Staphylococcus #>               argenteus (0.625), Staphylococcus aureus anaerobius (0.625), #>               Staphylococcus auricularis (0.615), Salmonella Aurelianis (0.595), #>               Salmonella Aarhus (0.588), Salmonella Amounderness (0.587), #>               Staphylococcus argensis (0.587), Streptococcus australis (0.587), and #>               Salmonella choleraesuis arizonae (0.562) #> -------------------------------------------------------------------------------- #> \"S. pneumoniae\" -> Streptococcus pneumoniae (B_STRPT_PNMN, 0.750) #> Also matched: Streptococcus pseudopneumoniae (0.700), Streptococcus #>               phocae salmonis (0.552), Serratia proteamaculans quinovora (0.545), #>               Streptococcus pseudoporcinus (0.536), Staphylococcus piscifermentans #>               (0.533), Staphylococcus pseudintermedius (0.532), Serratia #>               proteamaculans proteamaculans (0.526), Streptococcus gallolyticus #>               pasteurianus (0.526), Salmonella Portanigra (0.524), and Streptococcus #>               periodonticum (0.519) #>  #> Only the first 10 other matches of each record are shown. Run #> print(mo_uncertainties(), n = ...) to view more entries, or save #> mo_uncertainties() to an object."},{"path":"https://amr-for-r.org/articles/AMR.html","id":"antibiotic-results","dir":"Articles","previous_headings":"Preparation","what":"Antibiotic results","title":"Conduct AMR data analysis","text":"column antibiotic test results must also cleaned. AMR package comes three new data types work test results: mic minimal inhibitory concentrations (MIC), disk disk diffusion diameters, sir SIR data interpreted already. package can also determine SIR values based MIC disk diffusion values, read .sir() page. now, just clean SIR columns data using dplyr: basically cleaning, time start data inclusion.","code":"# method 1, be explicit about the columns: our_data <- our_data %>%   mutate_at(vars(AMX:GEN), as.sir)  # method 2, let the AMR package determine the eligible columns our_data <- our_data %>%   mutate_if(is_sir_eligible, as.sir)  # result: our_data #> # A tibble: 3,000 × 8 #>    patient_id hospital date       bacteria     AMX   AMC   CIP   GEN   #>    <chr>      <chr>    <date>     <mo>         <sir> <sir> <sir> <sir> #>  1 J3         A        2012-11-21 B_ESCHR_COLI   R     I     S     S   #>  2 R7         A        2018-04-03 B_KLBSL_PNMN   R     I     S     S   #>  3 P3         A        2014-09-19 B_ESCHR_COLI   R     S     S     S   #>  4 P10        A        2015-12-10 B_ESCHR_COLI   S     I     S     S   #>  5 B7         A        2015-03-02 B_ESCHR_COLI   S     S     S     S   #>  6 W3         A        2018-03-31 B_STPHY_AURS   R     S     R     S   #>  7 J8         A        2016-06-14 B_ESCHR_COLI   R     S     S     S   #>  8 M3         A        2015-10-25 B_ESCHR_COLI   R     S     S     S   #>  9 J3         A        2019-06-19 B_ESCHR_COLI   S     S     S     S   #> 10 G6         A        2015-04-27 B_STPHY_AURS   S     S     S     S   #> # ℹ 2,990 more rows"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"first-isolates","dir":"Articles","previous_headings":"Preparation","what":"First isolates","title":"Conduct AMR data analysis","text":"need know isolates can actually use analysis without repetition bias. conduct analysis antimicrobial resistance, must include first isolate every patient per episode (Hindler et al., Clin Infect Dis. 2007). , easily get overestimate underestimate resistance antibiotic. Imagine patient admitted MRSA found 5 different blood cultures following weeks (yes, countries like Netherlands blood drawing policies). resistance percentage oxacillin isolates overestimated, included MRSA . clearly selection bias. Clinical Laboratory Standards Institute (CLSI) appoints follows: (…) preparing cumulative antibiogram guide clinical decisions empirical antimicrobial therapy initial infections, first isolate given species per patient, per analysis period (eg, one year) included, irrespective body site, antimicrobial susceptibility profile, phenotypical characteristics (eg, biotype). first isolate easily identified, cumulative antimicrobial susceptibility test data prepared using first isolate generally comparable cumulative antimicrobial susceptibility test data calculated methods, providing duplicate isolates excluded. M39-A4 Analysis Presentation Cumulative Antimicrobial Susceptibility Test Data, 4th Edition. CLSI, 2014. Chapter 6.4 AMR package includes methodology first_isolate() function able apply four different methods defined Hindler et al. 2007: phenotype-based, episode-based, patient-based, isolate-based. right method depends goals analysis, default phenotype-based method case method properly correct duplicate isolates. Read methods first_isolate() page. outcome function can easily added data: 91% suitable resistance analysis! can now filter filter() function, also dplyr package: future use, two syntaxes can shortened: end 2 724 isolates analysis. Now data looks like: Time analysis.","code":"our_data <- our_data %>%   mutate(first = first_isolate(info = TRUE)) #> ℹ Determining first isolates using an episode length of 365 days #> ℹ Using column 'bacteria' as input for col_mo. #> ℹ Using column 'date' as input for col_date. #> ℹ Using column 'patient_id' as input for col_patient_id. #> ℹ Basing inclusion on all antimicrobial results, using a points threshold #>   of 2 #> => Found 2,724 'phenotype-based' first isolates (90.8% of total where a #>    microbial ID was available) our_data_1st <- our_data %>%   filter(first == TRUE) our_data_1st <- our_data %>%   filter_first_isolate() our_data_1st #> # A tibble: 2,724 × 9 #>    patient_id hospital date       bacteria     AMX   AMC   CIP   GEN   first #>    <chr>      <chr>    <date>     <mo>         <sir> <sir> <sir> <sir> <lgl> #>  1 J3         A        2012-11-21 B_ESCHR_COLI   R     I     S     S   TRUE  #>  2 R7         A        2018-04-03 B_KLBSL_PNMN   R     I     S     S   TRUE  #>  3 P3         A        2014-09-19 B_ESCHR_COLI   R     S     S     S   TRUE  #>  4 P10        A        2015-12-10 B_ESCHR_COLI   S     I     S     S   TRUE  #>  5 B7         A        2015-03-02 B_ESCHR_COLI   S     S     S     S   TRUE  #>  6 W3         A        2018-03-31 B_STPHY_AURS   R     S     R     S   TRUE  #>  7 M3         A        2015-10-25 B_ESCHR_COLI   R     S     S     S   TRUE  #>  8 J3         A        2019-06-19 B_ESCHR_COLI   S     S     S     S   TRUE  #>  9 G6         A        2015-04-27 B_STPHY_AURS   S     S     S     S   TRUE  #> 10 P4         A        2011-06-21 B_ESCHR_COLI   S     S     S     S   TRUE  #> # ℹ 2,714 more rows"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"analysing-the-data","dir":"Articles","previous_headings":"","what":"Analysing the data","title":"Conduct AMR data analysis","text":"base R summary() function gives good first impression, comes support new mo sir classes now data set:","code":"summary(our_data_1st) #>   patient_id          hospital              date            #>  Length:2724        Length:2724        Min.   :2011-01-01   #>  Class :character   Class :character   1st Qu.:2013-04-07   #>  Mode  :character   Mode  :character   Median :2015-06-03   #>                                        Mean   :2015-06-09   #>                                        3rd Qu.:2017-08-11   #>                                        Max.   :2019-12-27   #>    bacteria               AMX                    AMC                 #>  Class :mo             Class:sir              Class:sir              #>  <NA>  :0              %S   :41.6% (n=1133)   %S   :52.6% (n=1432)   #>  Unique:4              %SDD : 0.0% (n=0)      %SDD : 0.0% (n=0)      #>  #1    :B_ESCHR_COLI   %I   :16.4% (n=446)    %I   :12.2% (n=333)    #>  #2    :B_STPHY_AURS   %R   :42.0% (n=1145)   %R   :35.2% (n=959)    #>  #3    :B_STRPT_PNMN   %NI  : 0.0% (n=0)      %NI  : 0.0% (n=0)      #>     CIP                    GEN                  first         #>  Class:sir              Class:sir              Mode:logical   #>  %S   :52.5% (n=1431)   %S   :61.0% (n=1661)   TRUE:2724      #>  %SDD : 0.0% (n=0)      %SDD : 0.0% (n=0)                     #>  %I   : 6.5% (n=176)    %I   : 3.0% (n=82)                    #>  %R   :41.0% (n=1117)   %R   :36.0% (n=981)                   #>  %NI  : 0.0% (n=0)      %NI  : 0.0% (n=0)  glimpse(our_data_1st) #> Rows: 2,724 #> Columns: 9 #> $ patient_id <chr> \"J3\", \"R7\", \"P3\", \"P10\", \"B7\", \"W3\", \"M3\", \"J3\", \"G6\", \"P4\"… #> $ hospital   <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\",… #> $ date       <date> 2012-11-21, 2018-04-03, 2014-09-19, 2015-12-10, 2015-03-02… #> $ bacteria   <mo> \"B_ESCHR_COLI\", \"B_KLBSL_PNMN\", \"B_ESCHR_COLI\", \"B_ESCHR_COL… #> $ AMX        <sir> R, R, R, S, S, R, R, S, S, S, S, R, S, S, R, R, R, R, S, R,… #> $ AMC        <sir> I, I, S, I, S, S, S, S, S, S, S, S, S, S, S, S, S, R, S, S,… #> $ CIP        <sir> S, S, S, S, S, R, S, S, S, S, S, S, S, S, S, S, S, S, S, S,… #> $ GEN        <sir> S, S, S, S, S, S, S, S, S, S, S, R, S, S, S, S, S, S, S, S,… #> $ first      <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,…  # number of unique values per column: sapply(our_data_1st, n_distinct) #> patient_id   hospital       date   bacteria        AMX        AMC        CIP  #>        260          3       1854          4          3          3          3  #>        GEN      first  #>          3          1"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"availability-of-species","dir":"Articles","previous_headings":"Analysing the data","what":"Availability of species","title":"Conduct AMR data analysis","text":"just get idea species distributed, create frequency table count() based name microorganisms:","code":"our_data %>%   count(mo_name(bacteria), sort = TRUE) #> # A tibble: 4 × 2 #>   `mo_name(bacteria)`          n #>   <chr>                    <int> #> 1 Escherichia coli          1518 #> 2 Staphylococcus aureus      730 #> 3 Streptococcus pneumoniae   426 #> 4 Klebsiella pneumoniae      326  our_data_1st %>%   count(mo_name(bacteria), sort = TRUE) #> # A tibble: 4 × 2 #>   `mo_name(bacteria)`          n #>   <chr>                    <int> #> 1 Escherichia coli          1321 #> 2 Staphylococcus aureus      682 #> 3 Streptococcus pneumoniae   402 #> 4 Klebsiella pneumoniae      319"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"select-and-filter-with-antibiotic-selectors","dir":"Articles","previous_headings":"Analysing the data","what":"Select and filter with antibiotic selectors","title":"Conduct AMR data analysis","text":"Using -called antibiotic class selectors, can select filter columns based antibiotic class antibiotic results :","code":"our_data_1st %>%   select(date, aminoglycosides()) #> ℹ For aminoglycosides() using column 'GEN' (gentamicin) #> # A tibble: 2,724 × 2 #>    date       GEN   #>    <date>     <sir> #>  1 2012-11-21   S   #>  2 2018-04-03   S   #>  3 2014-09-19   S   #>  4 2015-12-10   S   #>  5 2015-03-02   S   #>  6 2018-03-31   S   #>  7 2015-10-25   S   #>  8 2019-06-19   S   #>  9 2015-04-27   S   #> 10 2011-06-21   S   #> # ℹ 2,714 more rows  our_data_1st %>%   select(bacteria, betalactams()) #> ℹ For betalactams() using columns 'AMX' (amoxicillin) and 'AMC' #>   (amoxicillin/clavulanic acid) #> # A tibble: 2,724 × 3 #>    bacteria     AMX   AMC   #>    <mo>         <sir> <sir> #>  1 B_ESCHR_COLI   R     I   #>  2 B_KLBSL_PNMN   R     I   #>  3 B_ESCHR_COLI   R     S   #>  4 B_ESCHR_COLI   S     I   #>  5 B_ESCHR_COLI   S     S   #>  6 B_STPHY_AURS   R     S   #>  7 B_ESCHR_COLI   R     S   #>  8 B_ESCHR_COLI   S     S   #>  9 B_STPHY_AURS   S     S   #> 10 B_ESCHR_COLI   S     S   #> # ℹ 2,714 more rows  our_data_1st %>%   select(bacteria, where(is.sir)) #> # A tibble: 2,724 × 5 #>    bacteria     AMX   AMC   CIP   GEN   #>    <mo>         <sir> <sir> <sir> <sir> #>  1 B_ESCHR_COLI   R     I     S     S   #>  2 B_KLBSL_PNMN   R     I     S     S   #>  3 B_ESCHR_COLI   R     S     S     S   #>  4 B_ESCHR_COLI   S     I     S     S   #>  5 B_ESCHR_COLI   S     S     S     S   #>  6 B_STPHY_AURS   R     S     R     S   #>  7 B_ESCHR_COLI   R     S     S     S   #>  8 B_ESCHR_COLI   S     S     S     S   #>  9 B_STPHY_AURS   S     S     S     S   #> 10 B_ESCHR_COLI   S     S     S     S   #> # ℹ 2,714 more rows  # filtering using AB selectors is also possible: our_data_1st %>%   filter(any(aminoglycosides() == \"R\")) #> ℹ For aminoglycosides() using column 'GEN' (gentamicin) #> # A tibble: 981 × 9 #>    patient_id hospital date       bacteria     AMX   AMC   CIP   GEN   first #>    <chr>      <chr>    <date>     <mo>         <sir> <sir> <sir> <sir> <lgl> #>  1 J5         A        2017-12-25 B_STRPT_PNMN   R     S     S     R   TRUE  #>  2 X1         A        2017-07-04 B_STPHY_AURS   R     S     S     R   TRUE  #>  3 B3         A        2016-07-24 B_ESCHR_COLI   S     S     S     R   TRUE  #>  4 V7         A        2012-04-03 B_ESCHR_COLI   S     S     S     R   TRUE  #>  5 C9         A        2017-03-23 B_ESCHR_COLI   S     S     S     R   TRUE  #>  6 R1         A        2018-06-10 B_STPHY_AURS   S     S     S     R   TRUE  #>  7 S2         A        2013-07-19 B_STRPT_PNMN   S     S     S     R   TRUE  #>  8 P5         A        2019-03-09 B_STPHY_AURS   S     S     S     R   TRUE  #>  9 Q8         A        2019-08-10 B_STPHY_AURS   S     S     S     R   TRUE  #> 10 K5         A        2013-03-15 B_STRPT_PNMN   S     S     S     R   TRUE  #> # ℹ 971 more rows  our_data_1st %>%   filter(all(betalactams() == \"R\")) #> ℹ For betalactams() using columns 'AMX' (amoxicillin) and 'AMC' #>   (amoxicillin/clavulanic acid) #> # A tibble: 462 × 9 #>    patient_id hospital date       bacteria     AMX   AMC   CIP   GEN   first #>    <chr>      <chr>    <date>     <mo>         <sir> <sir> <sir> <sir> <lgl> #>  1 M7         A        2013-07-22 B_STRPT_PNMN   R     R     S     S   TRUE  #>  2 R10        A        2013-12-20 B_STPHY_AURS   R     R     S     S   TRUE  #>  3 R7         A        2015-10-25 B_STPHY_AURS   R     R     S     S   TRUE  #>  4 R8         A        2019-10-25 B_STPHY_AURS   R     R     S     S   TRUE  #>  5 B6         A        2016-11-20 B_ESCHR_COLI   R     R     R     R   TRUE  #>  6 I7         A        2015-08-19 B_ESCHR_COLI   R     R     S     S   TRUE  #>  7 N3         A        2014-12-29 B_STRPT_PNMN   R     R     R     S   TRUE  #>  8 Q2         A        2019-09-22 B_ESCHR_COLI   R     R     S     S   TRUE  #>  9 X7         A        2011-03-20 B_ESCHR_COLI   R     R     S     R   TRUE  #> 10 V1         A        2018-08-07 B_STPHY_AURS   R     R     S     S   TRUE  #> # ℹ 452 more rows  # even works in base R (since R 3.0): our_data_1st[all(betalactams() == \"R\"), ] #> ℹ For betalactams() using columns 'AMX' (amoxicillin) and 'AMC' #>   (amoxicillin/clavulanic acid) #> # A tibble: 462 × 9 #>    patient_id hospital date       bacteria     AMX   AMC   CIP   GEN   first #>    <chr>      <chr>    <date>     <mo>         <sir> <sir> <sir> <sir> <lgl> #>  1 M7         A        2013-07-22 B_STRPT_PNMN   R     R     S     S   TRUE  #>  2 R10        A        2013-12-20 B_STPHY_AURS   R     R     S     S   TRUE  #>  3 R7         A        2015-10-25 B_STPHY_AURS   R     R     S     S   TRUE  #>  4 R8         A        2019-10-25 B_STPHY_AURS   R     R     S     S   TRUE  #>  5 B6         A        2016-11-20 B_ESCHR_COLI   R     R     R     R   TRUE  #>  6 I7         A        2015-08-19 B_ESCHR_COLI   R     R     S     S   TRUE  #>  7 N3         A        2014-12-29 B_STRPT_PNMN   R     R     R     S   TRUE  #>  8 Q2         A        2019-09-22 B_ESCHR_COLI   R     R     S     S   TRUE  #>  9 X7         A        2011-03-20 B_ESCHR_COLI   R     R     S     R   TRUE  #> 10 V1         A        2018-08-07 B_STPHY_AURS   R     R     S     S   TRUE  #> # ℹ 452 more rows"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"generate-antibiograms","dir":"Articles","previous_headings":"Analysing the data","what":"Generate antibiograms","title":"Conduct AMR data analysis","text":"Since AMR v2.0 (March 2023), easy create different types antibiograms, support 20 different languages. four antibiogram types, proposed Klinker et al. (2021, DOI 10.1177/20499361211011373), supported new antibiogram() function: Traditional Antibiogram (TA) e.g, susceptibility Pseudomonas aeruginosa piperacillin/tazobactam (TZP) Combination Antibiogram (CA) e.g, sdditional susceptibility Pseudomonas aeruginosa TZP + tobramycin versus TZP alone Syndromic Antibiogram (SA) e.g, susceptibility Pseudomonas aeruginosa TZP among respiratory specimens (obtained among ICU patients ) Weighted-Incidence Syndromic Combination Antibiogram (WISCA) e.g, susceptibility Pseudomonas aeruginosa TZP among respiratory specimens (obtained among ICU patients ) male patients age >=65 years heart failure section, show use antibiogram() function create antibiogram types. starters, included example_isolates data set looks like:","code":"example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"traditional-antibiogram","dir":"Articles","previous_headings":"Analysing the data > Generate antibiograms","what":"Traditional Antibiogram","title":"Conduct AMR data analysis","text":"create traditional antibiogram, simply state antibiotics used. antibiotics argument antibiogram() function supports (combination) previously mentioned antibiotic class selectors: Notice antibiogram() function automatically prints right format using Quarto R Markdown (page), even applies italics taxonomic names (using italicise_taxonomy() internally). also uses language OS either English, Arabic, Bengali, Chinese, Czech, Danish, Dutch, Finnish, French, German, Greek, Hindi, Indonesian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Spanish, Swahili, Swedish, Turkish, Ukrainian, Urdu, Vietnamese. next example, force language Spanish using language argument:","code":"antibiogram(example_isolates,             antibiotics = c(aminoglycosides(), carbapenems())) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) antibiogram(example_isolates,             mo_transform = \"gramstain\",             antibiotics = aminoglycosides(),             ab_transform = \"name\",             language = \"es\") #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin)"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"combined-antibiogram","dir":"Articles","previous_headings":"Analysing the data > Generate antibiograms","what":"Combined Antibiogram","title":"Conduct AMR data analysis","text":"create combined antibiogram, use antibiotic codes names plus + character like :","code":"combined_ab <- antibiogram(example_isolates,                            antibiotics = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),                            ab_transform = NULL) combined_ab"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"syndromic-antibiogram","dir":"Articles","previous_headings":"Analysing the data > Generate antibiograms","what":"Syndromic Antibiogram","title":"Conduct AMR data analysis","text":"create syndromic antibiogram, syndromic_group argument must used. can column data, e.g. ifelse() calculations based certain columns:","code":"antibiogram(example_isolates,             antibiotics = c(aminoglycosides(), carbapenems()),             syndromic_group = \"ward\") #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem)"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"weighted-incidence-syndromic-combination-antibiogram-wisca","dir":"Articles","previous_headings":"Analysing the data > Generate antibiograms","what":"Weighted-Incidence Syndromic Combination Antibiogram (WISCA)","title":"Conduct AMR data analysis","text":"create Weighted-Incidence Syndromic Combination Antibiogram (WISCA), simply set wisca = TRUE antibiogram() function, use dedicated wisca() function. Unlike traditional antibiograms, WISCA provides syndrome-based susceptibility estimates, weighted pathogen incidence antimicrobial susceptibility patterns. WISCA uses Bayesian decision model integrate data multiple pathogens, improving empirical therapy guidance, especially low-incidence infections. pathogen-agnostic, meaning results syndrome-based rather stratified microorganism. reliable results, ensure data includes first isolates (use first_isolate()) consider filtering top n species (use top_n_microorganisms()), WISCA outcomes meaningful based robust incidence estimates. patient- syndrome-specific WISCA, run function grouped tibble, .e., using group_by() first:","code":"example_isolates %>%   wisca(antibiotics = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),         minimum = 10) # Recommended threshold: ≥30 example_isolates %>%   top_n_microorganisms(n = 10) %>%   group_by(age_group = age_groups(age, c(25, 50, 75)),            gender) %>%   wisca(antibiotics = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"))"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"plotting-antibiograms","dir":"Articles","previous_headings":"Analysing the data > Generate antibiograms","what":"Plotting antibiograms","title":"Conduct AMR data analysis","text":"Antibiograms can plotted using autoplot() ggplot2 packages, since AMR package provides extension function:  calculate antimicrobial resistance sensible way, also correcting results, use resistance() susceptibility() functions.","code":"autoplot(combined_ab)"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"resistance-percentages","dir":"Articles","previous_headings":"Analysing the data","what":"Resistance percentages","title":"Conduct AMR data analysis","text":"functions resistance() susceptibility() can used calculate antimicrobial resistance susceptibility. specific analyses, functions proportion_S(), proportion_SI(), proportion_I(), proportion_IR() proportion_R() can used determine proportion specific antimicrobial outcome. functions contain minimum argument, denoting minimum required number test results returning value. functions otherwise return NA. default minimum = 30, following CLSI M39-A4 guideline applying microbial epidemiology. per EUCAST guideline 2019, calculate resistance proportion R (proportion_R(), equal resistance()) susceptibility proportion S (proportion_SI(), equal susceptibility()). functions can used : can used conjunction group_by() summarise(), dplyr package:","code":"our_data_1st %>% resistance(AMX) #> [1] 0.4203377 our_data_1st %>%   group_by(hospital) %>%   summarise(amoxicillin = resistance(AMX)) #> # A tibble: 3 × 2 #>   hospital amoxicillin #>   <chr>          <dbl> #> 1 A              0.340 #> 2 B              0.551 #> 3 C              0.370"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"interpreting-mic-and-disk-diffusion-values","dir":"Articles","previous_headings":"Analysing the data","what":"Interpreting MIC and Disk Diffusion Values","title":"Conduct AMR data analysis","text":"Minimal inhibitory concentration (MIC) values disk diffusion diameters can interpreted clinical breakpoints (SIR) using .sir(). ’s example randomly generated MIC values Klebsiella pneumoniae ciprofloxacin: allows direct interpretation according EUCAST CLSI breakpoints, facilitating automated AMR data processing.","code":"set.seed(123) mic_values <- random_mic(100) sir_values <- as.sir(mic_values, mo = \"K. pneumoniae\", ab = \"cipro\", guideline = \"EUCAST 2024\")  my_data <- tibble(MIC = mic_values, SIR = sir_values) my_data #> # A tibble: 100 × 2 #>         MIC SIR   #>       <mic> <sir> #>  1 <=0.0001   S   #>  2   0.0160   S   #>  3 >=8.0000   R   #>  4   0.0320   S   #>  5   0.0080   S   #>  6  64.0000   R   #>  7   0.0080   S   #>  8   0.1250   S   #>  9   0.0320   S   #> 10   0.0002   S   #> # ℹ 90 more rows"},{"path":"https://amr-for-r.org/articles/AMR.html","id":"plotting-mic-and-sir-interpretations","dir":"Articles","previous_headings":"Analysing the data","what":"Plotting MIC and SIR Interpretations","title":"Conduct AMR data analysis","text":"can visualise MIC distributions SIR interpretations using ggplot2, using new scale_y_mic() y-axis scale_colour_sir() colour-code SIR categories.  plot provides intuitive way assess susceptibility patterns across different groups incorporating clinical breakpoints. straightforward less manual approach, ggplot2’s function autoplot() extended package directly plot MIC disk diffusion values:   Author: Dr. Matthijs Berends, 23rd Feb 2025","code":"# add a group my_data$group <- rep(c(\"A\", \"B\", \"C\", \"D\"), each = 25)   ggplot(my_data,        aes(x = group, y = MIC, colour = SIR)) +   geom_jitter(width = 0.2, size = 2) +   geom_boxplot(fill = NA, colour = \"grey40\") +   scale_y_mic() +   scale_colour_sir() +   labs(title = \"MIC Distribution and SIR Interpretation\",        x = \"Sample Groups\",        y = \"MIC (mg/L)\") autoplot(mic_values) # by providing `mo` and `ab`, colours will indicate the SIR interpretation: autoplot(mic_values, mo = \"K. pneumoniae\", ab = \"cipro\", guideline = \"EUCAST 2024\")"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"AMR for Python","text":"AMR package R powerful tool antimicrobial resistance (AMR) analysis. provides extensive features handling microbial antimicrobial data. However, work primarily Python, now intuitive option available: AMR Python package. Python package wrapper around AMR R package. uses rpy2 package internally. Despite need R installed, Python users can now easily work AMR data directly Python code.","code":""},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"AMR for Python","text":"package tested virtual environment (venv). can set environment running: can activate environment, venv ready work .","code":"# linux and macOS: python -m venv /path/to/new/virtual/environment  # Windows: python -m venv C:\\path\\to\\new\\virtual\\environment"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"install-amr","dir":"Articles","previous_headings":"","what":"Install AMR","title":"AMR for Python","text":"Since Python package available official Python Package Index, can just run: Make sure R installed. need install AMR R package, installed automatically. Linux: macOS (using Homebrew): Windows, visit CRAN download page download install R.","code":"pip install AMR # Ubuntu / Debian sudo apt install r-base # Fedora: sudo dnf install R # CentOS/RHEL sudo yum install R brew install r"},{"path":[]},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"cleaning-taxonomy","dir":"Articles","previous_headings":"Examples of Usage","what":"Cleaning Taxonomy","title":"AMR for Python","text":"’s example demonstrates clean microorganism drug names using AMR Python package:","code":"import pandas as pd import AMR  # Sample data data = {     \"MOs\": ['E. coli', 'ESCCOL', 'esco', 'Esche coli'],     \"Drug\": ['Cipro', 'CIP', 'J01MA02', 'Ciproxin'] } df = pd.DataFrame(data)  # Use AMR functions to clean microorganism and drug names df['MO_clean'] = AMR.mo_name(df['MOs']) df['Drug_clean'] = AMR.ab_name(df['Drug'])  # Display the results print(df)"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"explanation","dir":"Articles","previous_headings":"Examples of Usage > Cleaning Taxonomy","what":"Explanation","title":"AMR for Python","text":"mo_name: function standardises microorganism names. , different variations Escherichia coli (“E. coli”, “ESCCOL”, “esco”, “Esche coli”) converted correct, standardised form, “Escherichia coli”. ab_name: Similarly, function standardises antimicrobial names. different representations ciprofloxacin (e.g., “Cipro”, “CIP”, “J01MA02”, “Ciproxin”) converted standard name, “Ciprofloxacin”.","code":""},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"calculating-amr","dir":"Articles","previous_headings":"Examples of Usage","what":"Calculating AMR","title":"AMR for Python","text":"","code":"import AMR import pandas as pd  df = AMR.example_isolates result = AMR.resistance(df[\"AMX\"]) print(result) [0.59555556]"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"generating-antibiograms","dir":"Articles","previous_headings":"Examples of Usage","what":"Generating Antibiograms","title":"AMR for Python","text":"One core functions AMR package generating antibiogram, table summarises antimicrobial susceptibility bacterial isolates. ’s can generate antibiogram Python: example, generate antibiogram selecting various antibiotics.","code":"result2a = AMR.antibiogram(df[[\"mo\", \"AMX\", \"CIP\", \"TZP\"]]) print(result2a) result2b = AMR.antibiogram(df[[\"mo\", \"AMX\", \"CIP\", \"TZP\"]], mo_transform = \"gramstain\") print(result2b)"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"taxonomic-data-sets-now-in-python","dir":"Articles","previous_headings":"Examples of Usage","what":"Taxonomic Data Sets Now in Python!","title":"AMR for Python","text":"Python user, might like important data sets AMR R package, microorganisms, antimicrobials, clinical_breakpoints, example_isolates, now available regular Python data frames:","code":"AMR.microorganisms AMR.antimicrobials"},{"path":"https://amr-for-r.org/articles/AMR_for_Python.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"AMR for Python","text":"AMR Python package, Python users can now effortlessly call R functions AMR R package. eliminates need complex rpy2 configurations provides clean, easy--use interface antimicrobial resistance analysis. examples provided demonstrate can applied typical workflows, standardising microorganism antimicrobial names calculating resistance. just running import AMR, users can seamlessly integrate robust features R AMR package Python workflows. Whether ’re cleaning data analysing resistance patterns, AMR Python package makes easy work AMR data Python.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"example-1-using-antimicrobial-selectors","dir":"Articles","previous_headings":"","what":"Example 1: Using Antimicrobial Selectors","title":"AMR with tidymodels","text":"leveraging power tidymodels AMR package, ’ll build reproducible machine learning workflow predict Gramstain microorganism two important antibiotic classes: aminoglycosides beta-lactams.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"objective","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors","what":"Objective","title":"AMR with tidymodels","text":"goal build predictive model using tidymodels framework determine Gramstain microorganism based microbial data. : Preprocess data using selector functions aminoglycosides() betalactams(). Define logistic regression model prediction. Use structured tidymodels workflow preprocess, train, evaluate model.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"data-preparation","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors","what":"Data Preparation","title":"AMR with tidymodels","text":"begin loading required libraries preparing example_isolates dataset AMR package. Prepare data: Explanation: aminoglycosides() betalactams() dynamically select columns antimicrobials classes. drop_na() ensures model receives complete cases training.","code":"# Load required libraries library(AMR)          # For AMR data analysis library(tidymodels)   # For machine learning workflows, and data manipulation (dplyr, tidyr, ...) # Your data could look like this: example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # Select relevant columns for prediction data <- example_isolates %>%   # select AB results dynamically   select(mo, aminoglycosides(), betalactams()) %>%   # replace NAs with NI (not-interpretable)    mutate(across(where(is.sir),                  ~replace_na(.x, \"NI\")),           # make factors of SIR columns           across(where(is.sir),                  as.integer),           # get Gramstain of microorganisms           mo = as.factor(mo_gramstain(mo))) %>%   # drop NAs - the ones without a Gramstain (fungi, etc.)   drop_na() #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For betalactams() using columns 'PEN' (benzylpenicillin), 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), 'TZP' #>   (piperacillin/tazobactam), 'CZO' (cefazolin), 'FEP' (cefepime), 'CXM' #>   (cefuroxime), 'FOX' (cefoxitin), 'CTX' (cefotaxime), 'CAZ' (ceftazidime), #>   'CRO' (ceftriaxone), 'IPM' (imipenem), and 'MEM' (meropenem)"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"defining-the-workflow","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors","what":"Defining the Workflow","title":"AMR with tidymodels","text":"now define tidymodels workflow, consists three steps: preprocessing, model specification, fitting.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"preprocessing-with-a-recipe","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors > Defining the Workflow","what":"1. Preprocessing with a Recipe","title":"AMR with tidymodels","text":"create recipe preprocess data modelling. recipe includes least one preprocessing operation, like step_corr(), necessary parameters can estimated training set using prep(): Explanation: recipe(mo ~ ., data = data) take mo column outcome columns predictors. step_corr() removes predictors (.e., antibiotic columns) higher correlation 90%. Notice recipe contains just antimicrobial selector functions - need define columns specifically. preparation (retrieved prep()) can see columns variables ‘AMX’ ‘CTX’ removed correlate much existing, variables.","code":"# Define the recipe for data preprocessing resistance_recipe <- recipe(mo ~ ., data = data) %>%   step_corr(c(aminoglycosides(), betalactams()), threshold = 0.9) resistance_recipe #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:    1 #> predictor: 20 #>  #> ── Operations #> • Correlation filter on: c(aminoglycosides(), betalactams()) prep(resistance_recipe) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For betalactams() using columns 'PEN' (benzylpenicillin), 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), 'TZP' #>   (piperacillin/tazobactam), 'CZO' (cefazolin), 'FEP' (cefepime), 'CXM' #>   (cefuroxime), 'FOX' (cefoxitin), 'CTX' (cefotaxime), 'CAZ' (ceftazidime), #>   'CRO' (ceftriaxone), 'IPM' (imipenem), and 'MEM' (meropenem) #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:    1 #> predictor: 20 #>  #> ── Training information #> Training data contained 1968 data points and no incomplete rows. #>  #> ── Operations #> • Correlation filter on: AMX CTX | Trained"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"specifying-the-model","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors > Defining the Workflow","what":"2. Specifying the Model","title":"AMR with tidymodels","text":"define logistic regression model since resistance prediction binary classification task. Explanation: logistic_reg() sets logistic regression model. set_engine(\"glm\") specifies use R’s built-GLM engine.","code":"# Specify a logistic regression model logistic_model <- logistic_reg() %>%   set_engine(\"glm\") # Use the Generalised Linear Model engine logistic_model #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"building-the-workflow","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors > Defining the Workflow","what":"3. Building the Workflow","title":"AMR with tidymodels","text":"bundle recipe model together workflow, organises entire modelling process.","code":"# Combine the recipe and model into a workflow resistance_workflow <- workflow() %>%   add_recipe(resistance_recipe) %>% # Add the preprocessing recipe   add_model(logistic_model) # Add the logistic regression model resistance_workflow #> ══ Workflow ════════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: logistic_reg() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_corr() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"training-and-evaluating-the-model","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors","what":"Training and Evaluating the Model","title":"AMR with tidymodels","text":"train model, split data training testing sets. , fit workflow training set evaluate performance. Explanation: initial_split() splits data training testing sets. fit() trains workflow training set. Notice fit(), antimicrobial selector functions internally called . training, functions called since stored recipe. Next, evaluate model testing data. Explanation: predict() generates predictions testing set. metrics() computes evaluation metrics like accuracy kappa. appears can predict Gram stain 99.5% accuracy based AMR results aminoglycosides beta-lactam antibiotics. ROC curve looks like :","code":"# Split data into training and testing sets set.seed(123) # For reproducibility data_split <- initial_split(data, prop = 0.8) # 80% training, 20% testing training_data <- training(data_split) # Training set testing_data <- testing(data_split)   # Testing set  # Fit the workflow to the training data fitted_workflow <- resistance_workflow %>%   fit(training_data) # Train the model # Make predictions on the testing set predictions <- fitted_workflow %>%   predict(testing_data)                # Generate predictions probabilities <- fitted_workflow %>%   predict(testing_data, type = \"prob\") # Generate probabilities  predictions <- predictions %>%   bind_cols(probabilities) %>%   bind_cols(testing_data) # Combine with true labels  predictions #> # A tibble: 394 × 24 #>    .pred_class   `.pred_Gram-negative` `.pred_Gram-positive` mo        GEN   TOB #>    <fct>                         <dbl>                 <dbl> <fct>   <int> <int> #>  1 Gram-positive              1.07e- 1             8.93 e- 1 Gram-p…     5     5 #>  2 Gram-positive              3.17e- 8             1.000e+ 0 Gram-p…     5     1 #>  3 Gram-negative              9.99e- 1             1.42 e- 3 Gram-n…     5     5 #>  4 Gram-positive              2.22e-16             1    e+ 0 Gram-p…     5     5 #>  5 Gram-negative              9.46e- 1             5.42 e- 2 Gram-n…     5     5 #>  6 Gram-positive              1.07e- 1             8.93 e- 1 Gram-p…     5     5 #>  7 Gram-positive              2.22e-16             1    e+ 0 Gram-p…     1     5 #>  8 Gram-positive              2.22e-16             1    e+ 0 Gram-p…     4     4 #>  9 Gram-negative              1   e+ 0             2.22 e-16 Gram-n…     1     1 #> 10 Gram-positive              6.05e-11             1.000e+ 0 Gram-p…     4     4 #> # ℹ 384 more rows #> # ℹ 18 more variables: AMK <int>, KAN <int>, PEN <int>, OXA <int>, FLC <int>, #> #   AMX <int>, AMC <int>, AMP <int>, TZP <int>, CZO <int>, FEP <int>, #> #   CXM <int>, FOX <int>, CTX <int>, CAZ <int>, CRO <int>, IPM <int>, MEM <int>  # Evaluate model performance metrics <- predictions %>%   metrics(truth = mo, estimate = .pred_class) # Calculate performance metrics  metrics #> # A tibble: 2 × 3 #>   .metric  .estimator .estimate #>   <chr>    <chr>          <dbl> #> 1 accuracy binary         0.995 #> 2 kap      binary         0.989   # To assess some other model properties, you can make our own `metrics()` function our_metrics <- metric_set(accuracy, kap, ppv, npv) # add Positive Predictive Value and Negative Predictive Value metrics2 <- predictions %>%   our_metrics(truth = mo, estimate = .pred_class) # run again on our `our_metrics()` function  metrics2 #> # A tibble: 4 × 3 #>   .metric  .estimator .estimate #>   <chr>    <chr>          <dbl> #> 1 accuracy binary         0.995 #> 2 kap      binary         0.989 #> 3 ppv      binary         0.987 #> 4 npv      binary         1 predictions %>%   roc_curve(mo, `.pred_Gram-negative`) %>%   autoplot()"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"conclusion","dir":"Articles","previous_headings":"Example 1: Using Antimicrobial Selectors","what":"Conclusion","title":"AMR with tidymodels","text":"post, demonstrated build machine learning pipeline tidymodels framework AMR package. combining selector functions like aminoglycosides() betalactams() tidymodels, efficiently prepared data, trained model, evaluated performance. workflow extensible antimicrobial classes resistance patterns, empowering users analyse AMR data systematically reproducibly.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"example-2-predicting-esbl-presence-using-raw-mics","dir":"Articles","previous_headings":"","what":"Example 2: Predicting ESBL Presence Using Raw MICs","title":"AMR with tidymodels","text":"second example, demonstrate use <mic> columns directly tidymodels workflows using AMR-specific recipe steps. includes transformation log2 scale using step_mic_log2(), prepares MIC values use classification models. approach idea formed basis publication DOI: 10.3389/fmicb.2025.1582703 model presence extended-spectrum beta-lactamases (ESBL).","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"objective-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs","what":"Objective","title":"AMR with tidymodels","text":"goal : Use raw MIC values predict whether bacterial isolate produces ESBL. Apply AMR-aware preprocessing tidymodels recipe. Train classification model evaluate predictive performance.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"data-preparation-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs","what":"Data Preparation","title":"AMR with tidymodels","text":"use esbl_isolates dataset comes AMR package. Explanation: esbl_isolates: Contains MIC test results ESBL status isolate. mutate(esbl = ...): Converts target column ordered factor classification.","code":"# Load required libraries library(AMR) library(tidymodels)  # View the esbl_isolates data set esbl_isolates #> # A tibble: 500 × 19 #>    esbl  genus   AMC   AMP   TZP   CXM   FOX   CTX   CAZ   GEN   TOB   TMP   SXT #>    <lgl> <chr> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> #>  1 FALSE Esch…    32    32     4    64    64  8.00  8.00     1     1  16.0    20 #>  2 FALSE Esch…    32    32     4    64    64  4.00  8.00     1     1  16.0   320 #>  3 FALSE Esch…     4     2    64     8     4  8.00  0.12    16    16   0.5    20 #>  4 FALSE Kleb…    32    32    16    64    64  8.00  8.00     1     1   0.5    20 #>  5 FALSE Esch…    32    32     4     4     4  0.25  2.00     1     1  16.0   320 #>  6 FALSE Citr…    32    32    16    64    64 64.00 32.00     1     1   0.5    20 #>  7 FALSE Morg…    32    32     4    64    64 16.00  2.00     1     1   0.5    20 #>  8 FALSE Prot…    16    32     4     1     4  8.00  0.12     1     1  16.0   320 #>  9 FALSE Ente…    32    32     8    64    64 32.00  4.00     1     1   0.5    20 #> 10 FALSE Citr…    32    32    32    64    64  8.00 64.00     1     1  16.0   320 #> # ℹ 490 more rows #> # ℹ 6 more variables: NIT <mic>, FOS <mic>, CIP <mic>, IPM <mic>, MEM <mic>, #> #   COL <mic>  # Prepare a binary outcome and convert to ordered factor data <- esbl_isolates %>%   mutate(esbl = factor(esbl, levels = c(FALSE, TRUE), ordered = TRUE))"},{"path":[]},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"preprocessing-with-a-recipe-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs > Defining the Workflow","what":"1. Preprocessing with a Recipe","title":"AMR with tidymodels","text":"use step_mic_log2() function log2-transform MIC values, ensuring MICs numeric properly scaled. MIC predictors can easily agnostically selected using new all_mic_predictors(): Explanation: remove_role(): Removes irrelevant variables like genus. step_mic_log2(): Applies log2(.numeric(...)) MIC predictors one go. prep(): Finalises recipe based training data.","code":"# Split into training and testing sets set.seed(123) split <- initial_split(data) training_data <- training(split) testing_data <- testing(split)  # Define the recipe mic_recipe <- recipe(esbl ~ ., data = training_data) %>%   remove_role(genus, old_role = \"predictor\") %>%  # Remove non-informative variable   step_mic_log2(all_mic_predictors()) #%>%         # Log2 transform all MIC predictors  # prep()  mic_recipe #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:          1 #> predictor:       17 #> undeclared role:  1 #>  #> ── Operations #> • Log2 transformation of MIC columns: all_mic_predictors()"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"specifying-the-model-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs > Defining the Workflow","what":"2. Specifying the Model","title":"AMR with tidymodels","text":"use simple logistic regression model ESBL presence, though recent models xgboost (link parsnip manual) much precise. Explanation: logistic_reg(): Specifies binary classification model. set_engine(\"glm\"): Uses base R GLM engine.","code":"# Define the model model <- logistic_reg(mode = \"classification\") %>%   set_engine(\"glm\")  model #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"building-the-workflow-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs > Defining the Workflow","what":"3. Building the Workflow","title":"AMR with tidymodels","text":"","code":"# Create workflow workflow_model <- workflow() %>%   add_recipe(mic_recipe) %>%   add_model(model)  workflow_model #> ══ Workflow ════════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: logistic_reg() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_mic_log2() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"training-and-evaluating-the-model-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs","what":"Training and Evaluating the Model","title":"AMR with tidymodels","text":"Explanation: fit(): Trains model processed training data. predict(): Produces predictions unseen test data. metric_set(): Allows evaluating multiple classification metrics. appears can predict ESBL gene presence positive predictive value (PPV) 92.1% negative predictive value (NPV) 91.9 using simplistic logistic regression model.","code":"# Fit the model fitted <- fit(workflow_model, training_data)  # Generate predictions predictions <- predict(fitted, testing_data) %>%   bind_cols(testing_data)  # Evaluate model performance our_metrics <- metric_set(accuracy, kap, ppv, npv) metrics <- our_metrics(predictions, truth = esbl, estimate = .pred_class)  metrics #> # A tibble: 4 × 3 #>   .metric  .estimator .estimate #>   <chr>    <chr>          <dbl> #> 1 accuracy binary         0.92  #> 2 kap      binary         0.840 #> 3 ppv      binary         0.921 #> 4 npv      binary         0.919"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"visualising-predictions","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs","what":"Visualising Predictions","title":"AMR with tidymodels","text":"can visualise predictions comparing predicted actual ESBL status.","code":"library(ggplot2)  ggplot(predictions, aes(x = esbl, fill = .pred_class)) +   geom_bar(position = \"stack\") +   labs(title = \"Predicted vs Actual ESBL Status\",        x = \"Actual ESBL\",        y = \"Count\") +   theme_minimal()"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"conclusion-1","dir":"Articles","previous_headings":"Example 2: Predicting ESBL Presence Using Raw MICs","what":"Conclusion","title":"AMR with tidymodels","text":"example, showcased new AMR-specific recipe steps simplify working <mic> columns tidymodels. step_mic_log2() transformation converts ordered MICs log2-transformed numerics, improving compatibility classification models. pipeline enables realistic, reproducible, interpretable modelling antimicrobial resistance data.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"example-3-predicting-amr-over-time","dir":"Articles","previous_headings":"","what":"Example 3: Predicting AMR Over Time","title":"AMR with tidymodels","text":"third example, aim predict antimicrobial resistance (AMR) trends time using tidymodels. model resistance three antibiotics (amoxicillin AMX, amoxicillin-clavulanic acid AMC, ciprofloxacin CIP), based historical data grouped year hospital ward.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"objective-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Objective","title":"AMR with tidymodels","text":"goal : Prepare dataset aggregating resistance data time. Define regression model predict AMR trends. Use tidymodels preprocess, train, evaluate model.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"data-preparation-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Data Preparation","title":"AMR with tidymodels","text":"start transforming example_isolates dataset structured time-series format. Explanation: mo_name(mo): Converts microbial codes proper species names. resistance(): Converts AMR results numeric values (proportion resistant isolates). group_by(year, ward, species): Aggregates resistance rates year ward.","code":"# Load required libraries library(AMR) library(tidymodels)  # Transform dataset data_time <- example_isolates %>%   top_n_microorganisms(n = 10) %>% # Filter on the top #10 species   mutate(year = as.integer(format(date, \"%Y\")),  # Extract year from date          gramstain = mo_gramstain(mo)) %>% # Get taxonomic names   group_by(year, gramstain) %>%   summarise(across(c(AMX, AMC, CIP),                     function(x) resistance(x, minimum = 0),                    .names = \"res_{.col}\"),              .groups = \"drop\") %>%    filter(!is.na(res_AMX) & !is.na(res_AMC) & !is.na(res_CIP)) # Drop missing values #> ℹ Using column 'mo' as input for col_mo.  data_time #> # A tibble: 32 × 5 #>     year gramstain     res_AMX res_AMC res_CIP #>    <int> <chr>           <dbl>   <dbl>   <dbl> #>  1  2002 Gram-negative   1      0.105   0.0606 #>  2  2002 Gram-positive   0.838  0.182   0.162  #>  3  2003 Gram-negative   1      0.0714  0      #>  4  2003 Gram-positive   0.714  0.244   0.154  #>  5  2004 Gram-negative   0.464  0.0938  0      #>  6  2004 Gram-positive   0.849  0.299   0.244  #>  7  2005 Gram-negative   0.412  0.132   0.0588 #>  8  2005 Gram-positive   0.882  0.382   0.154  #>  9  2006 Gram-negative   0.379  0       0.1    #> 10  2006 Gram-positive   0.778  0.333   0.353  #> # ℹ 22 more rows"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"defining-the-workflow-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Defining the Workflow","title":"AMR with tidymodels","text":"now define modelling workflow, consists preprocessing step, model specification, fitting process.","code":""},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"preprocessing-with-a-recipe-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time > Defining the Workflow","what":"1. Preprocessing with a Recipe","title":"AMR with tidymodels","text":"Explanation: step_dummy(): Encodes categorical variables (ward, species) numerical indicators. step_normalize(): Normalises year variable. step_nzv(): Removes near-zero variance predictors.","code":"# Define the recipe resistance_recipe_time <- recipe(res_AMX ~ year + gramstain, data = data_time) %>%   step_dummy(gramstain, one_hot = TRUE) %>%  # Convert categorical to numerical   step_normalize(year) %>%  # Normalise year for better model performance   step_nzv(all_predictors())  # Remove near-zero variance predictors  resistance_recipe_time #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:   1 #> predictor: 2 #>  #> ── Operations #> • Dummy variables from: gramstain #> • Centering and scaling for: year #> • Sparse, unbalanced variable filter on: all_predictors()"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"specifying-the-model-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time > Defining the Workflow","what":"2. Specifying the Model","title":"AMR with tidymodels","text":"use linear regression model predict resistance trends. Explanation: linear_reg(): Defines linear regression model. set_engine(\"lm\"): Uses R’s built-linear regression engine.","code":"# Define the linear regression model lm_model <- linear_reg() %>%   set_engine(\"lm\") # Use linear regression  lm_model #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"building-the-workflow-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time > Defining the Workflow","what":"3. Building the Workflow","title":"AMR with tidymodels","text":"combine preprocessing recipe model workflow.","code":"# Create workflow resistance_workflow_time <- workflow() %>%   add_recipe(resistance_recipe_time) %>%   add_model(lm_model)  resistance_workflow_time #> ══ Workflow ════════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: linear_reg() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 3 Recipe Steps #>  #> • step_dummy() #> • step_normalize() #> • step_nzv() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"training-and-evaluating-the-model-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Training and Evaluating the Model","title":"AMR with tidymodels","text":"split data training testing sets, fit model, evaluate performance. Explanation: initial_split(): Splits data training testing sets. fit(): Trains workflow. predict(): Generates resistance predictions. metrics(): Evaluates model performance.","code":"# Split the data set.seed(123) data_split_time <- initial_split(data_time, prop = 0.8) train_time <- training(data_split_time) test_time <- testing(data_split_time)  # Train the model fitted_workflow_time <- resistance_workflow_time %>%   fit(train_time)  # Make predictions predictions_time <- fitted_workflow_time %>%   predict(test_time) %>%   bind_cols(test_time)   # Evaluate model metrics_time <- predictions_time %>%   metrics(truth = res_AMX, estimate = .pred)  metrics_time #> # A tibble: 3 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard      0.0774 #> 2 rsq     standard      0.711  #> 3 mae     standard      0.0704"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"visualising-predictions-1","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Visualising Predictions","title":"AMR with tidymodels","text":"plot resistance trends time amoxicillin.  Additionally, can visualise resistance trends ggplot2 directly add linear models :","code":"library(ggplot2)  # Plot actual vs predicted resistance over time ggplot(predictions_time, aes(x = year)) +   geom_point(aes(y = res_AMX, color = \"Actual\")) +   geom_line(aes(y = .pred, color = \"Predicted\")) +   labs(title = \"Predicted vs Actual AMX Resistance Over Time\",        x = \"Year\",        y = \"Resistance Proportion\") +   theme_minimal() ggplot(data_time, aes(x = year, y = res_AMX, color = gramstain)) +   geom_line() +   labs(title = \"AMX Resistance Trends\",        x = \"Year\",        y = \"Resistance Proportion\") +   # add a linear model directly in ggplot2:   geom_smooth(method = \"lm\",               formula = y ~ x,               alpha = 0.25) +   theme_minimal()"},{"path":"https://amr-for-r.org/articles/AMR_with_tidymodels.html","id":"conclusion-2","dir":"Articles","previous_headings":"Example 3: Predicting AMR Over Time","what":"Conclusion","title":"AMR with tidymodels","text":"example, demonstrated analyze AMR trends time using tidymodels. aggregating resistance rates year hospital ward, built predictive model track changes resistance amoxicillin (AMX), amoxicillin-clavulanic acid (AMC), ciprofloxacin (CIP). method can extended antibiotics resistance patterns, providing valuable insights AMR dynamics healthcare settings.","code":""},{"path":"https://amr-for-r.org/articles/EUCAST.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Apply EUCAST rules","text":"EUCAST rules? European Committee Antimicrobial Susceptibility Testing (EUCAST) states website: EUCAST expert rules (see ) tabulated collection expert knowledge interpretive rules, expected resistant phenotypes expected susceptible phenotypes applied antimicrobial susceptibility testing order reduce testing, reduce errors make appropriate recommendations reporting particular resistances. Europe, lot medical microbiological laboratories already apply rules (Brown et al., 2015). package features latest insights expected resistant phenotypes (v1.2, 2023).","code":""},{"path":"https://amr-for-r.org/articles/EUCAST.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Apply EUCAST rules","text":"rules can used discard improbable bug-drug combinations data. example, Klebsiella produces beta-lactamase prevents ampicillin (amoxicillin) working . words, practically every strain Klebsiella resistant ampicillin. Sometimes, laboratory data can still contain strains Klebsiella susceptible ampicillin. antibiogram available identification available, antibiogram re-interpreted based identification. eucast_rules() function resolves , applying latest ‘EUCAST Expected Resistant Phenotypes’ guideline: convenient function mo_is_intrinsic_resistant() uses guideline, allows check one specific microorganisms antimicrobials: EUCAST rules can used correction, can also used filling known resistance susceptibility based results antimicrobials drugs. process called interpretive reading, basically form imputation:","code":"oops <- tibble::tibble(   mo = c(     \"Klebsiella pneumoniae\",     \"Escherichia coli\"   ),   ampicillin = as.sir(\"S\") ) oops #> # A tibble: 2 × 2 #>   mo                    ampicillin #>   <chr>                 <sir>      #> 1 Klebsiella pneumoniae   S        #> 2 Escherichia coli        S    eucast_rules(oops, info = FALSE, overwrite = TRUE) #> # A tibble: 2 × 2 #>   mo                    ampicillin #>   <chr>                 <sir>      #> 1 Klebsiella pneumoniae   R        #> 2 Escherichia coli        S mo_is_intrinsic_resistant(   c(\"Klebsiella pneumoniae\", \"Escherichia coli\"),   \"ampicillin\" ) #> [1]  TRUE FALSE  mo_is_intrinsic_resistant(   \"Klebsiella pneumoniae\",   c(\"ampicillin\", \"kanamycin\") ) #> [1]  TRUE FALSE data <- tibble::tibble(   mo = c(     \"Staphylococcus aureus\",     \"Enterococcus faecalis\",     \"Escherichia coli\",     \"Klebsiella pneumoniae\",     \"Pseudomonas aeruginosa\"   ),   VAN = \"-\", # Vancomycin   AMX = \"-\", # Amoxicillin   COL = \"-\", # Colistin   CAZ = \"-\", # Ceftazidime   CXM = \"-\", # Cefuroxime   PEN = \"S\", # Benzylenicillin   FOX = \"S\"  # Cefoxitin ) data eucast_rules(data, overwrite = TRUE)"},{"path":[]},{"path":"https://amr-for-r.org/articles/PCA.html","id":"transforming","dir":"Articles","previous_headings":"","what":"Transforming","title":"Conduct principal component analysis (PCA) for AMR","text":"PCA, need transform AMR data first. example_isolates data set package looks like: Now transform data set resistance percentages per taxonomic order genus:","code":"library(AMR) library(dplyr) glimpse(example_isolates) #> Rows: 2,000 #> Columns: 46 #> $ date    <date> 2002-01-02, 2002-01-03, 2002-01-07, 2002-01-07, 2002-01-13, 2… #> $ patient <chr> \"A77334\", \"A77334\", \"067927\", \"067927\", \"067927\", \"067927\", \"4… #> $ age     <dbl> 65, 65, 45, 45, 45, 45, 78, 78, 45, 79, 67, 67, 71, 71, 75, 50… #> $ gender  <chr> \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"M\", \"M\", \"F\", \"F\", \"M\", \"M\", \"M… #> $ ward    <chr> \"Clinical\", \"Clinical\", \"ICU\", \"ICU\", \"ICU\", \"ICU\", \"Clinical\"… #> $ mo      <mo> \"B_ESCHR_COLI\", \"B_ESCHR_COLI\", \"B_STPHY_EPDR\", \"B_STPHY_EPDR\",… #> $ PEN     <sir> R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, R, S,… #> $ OXA     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ FLC     <sir> NA, NA, R, R, R, R, S, S, R, S, S, S, NA, NA, NA, NA, NA, R, R… #> $ AMX     <sir> NA, NA, NA, NA, NA, NA, R, R, NA, NA, NA, NA, NA, NA, R, NA, N… #> $ AMC     <sir> I, I, NA, NA, NA, NA, S, S, NA, NA, S, S, I, I, R, I, I, NA, N… #> $ AMP     <sir> NA, NA, NA, NA, NA, NA, R, R, NA, NA, NA, NA, NA, NA, R, NA, N… #> $ TZP     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ CZO     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R, NA,… #> $ FEP     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ CXM     <sir> I, I, R, R, R, R, S, S, R, S, S, S, S, S, NA, S, S, R, R, S, S… #> $ FOX     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R, NA,… #> $ CTX     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, S, S, NA, S, S… #> $ CAZ     <sir> NA, NA, R, R, R, R, R, R, R, R, R, R, NA, NA, NA, S, S, R, R, … #> $ CRO     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, S, S, NA, S, S… #> $ GEN     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ TOB     <sir> NA, NA, NA, NA, NA, NA, S, S, NA, NA, NA, NA, S, S, NA, NA, NA… #> $ AMK     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ KAN     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ TMP     <sir> R, R, S, S, R, R, R, R, S, S, NA, NA, S, S, S, S, S, R, R, R, … #> $ SXT     <sir> R, R, S, S, NA, NA, NA, NA, S, S, NA, NA, S, S, S, S, S, NA, N… #> $ NIT     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R,… #> $ FOS     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ LNZ     <sir> R, R, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R, R, R, R, R, N… #> $ CIP     <sir> NA, NA, NA, NA, NA, NA, NA, NA, S, S, NA, NA, NA, NA, NA, S, S… #> $ MFX     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ VAN     <sir> R, R, S, S, S, S, S, S, S, S, NA, NA, R, R, R, R, R, S, S, S, … #> $ TEC     <sir> R, R, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R, R, R, R, R, N… #> $ TCY     <sir> R, R, S, S, S, S, S, S, S, I, S, S, NA, NA, I, R, R, S, I, R, … #> $ TGC     <sir> NA, NA, S, S, S, S, S, S, S, NA, S, S, NA, NA, NA, R, R, S, NA… #> $ DOX     <sir> NA, NA, S, S, S, S, S, S, S, NA, S, S, NA, NA, NA, R, R, S, NA… #> $ ERY     <sir> R, R, R, R, R, R, S, S, R, S, S, S, R, R, R, R, R, R, R, R, S,… #> $ CLI     <sir> R, R, NA, NA, NA, R, NA, NA, NA, NA, NA, NA, R, R, R, R, R, NA… #> $ AZM     <sir> R, R, R, R, R, R, S, S, R, S, S, S, R, R, R, R, R, R, R, R, S,… #> $ IPM     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, S, S, NA, S, S… #> $ MEM     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ MTR     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ CHL     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ COL     <sir> NA, NA, R, R, R, R, R, R, R, R, R, R, NA, NA, NA, R, R, R, R, … #> $ MUP     <sir> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ RIF     <sir> R, R, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, R, R, R, R, R, N… resistance_data <- example_isolates %>%   group_by(     order = mo_order(mo), # group on anything, like order     genus = mo_genus(mo)   ) %>% #  and genus as we do here   summarise_if(is.sir, resistance) %>% # then get resistance of all drugs   select(     order, genus, AMC, CXM, CTX,     CAZ, GEN, TOB, TMP, SXT   ) # and select only relevant columns  head(resistance_data) #> # A tibble: 6 × 10 #> # Groups:   order [5] #>   order             genus          AMC   CXM   CTX   CAZ   GEN   TOB   TMP   SXT #>   <chr>             <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 (unknown order)   (unknown ge…    NA    NA    NA    NA    NA    NA    NA    NA #> 2 Actinomycetales   Schaalia        NA    NA    NA    NA    NA    NA    NA    NA #> 3 Bacteroidales     Bacteroides     NA    NA    NA    NA    NA    NA    NA    NA #> 4 Campylobacterales Campylobact…    NA    NA    NA    NA    NA    NA    NA    NA #> 5 Caryophanales     Gemella         NA    NA    NA    NA    NA    NA    NA    NA #> 6 Caryophanales     Listeria        NA    NA    NA    NA    NA    NA    NA    NA"},{"path":"https://amr-for-r.org/articles/PCA.html","id":"perform-principal-component-analysis","dir":"Articles","previous_headings":"","what":"Perform principal component analysis","title":"Conduct principal component analysis (PCA) for AMR","text":"new pca() function automatically filter rows contain numeric values selected variables, now need : result can reviewed good old summary() function: Good news. first two components explain total 93.3% variance (see PC1 PC2 values Proportion Variance. can create -called biplot base R biplot() function, see antimicrobial resistance per drug explain difference per microorganism.","code":"pca_result <- pca(resistance_data) #> ℹ Columns selected for PCA: \"AMC\", \"CAZ\", \"CTX\", \"CXM\", \"GEN\", \"SXT\", #>   \"TMP\", and \"TOB\". Total observations available: 7. summary(pca_result) #> Groups (n=4, named as 'order'): #> [1] \"Caryophanales\"    \"Enterobacterales\" \"Lactobacillales\"  \"Pseudomonadales\" #> Importance of components: #>                           PC1    PC2    PC3     PC4     PC5     PC6       PC7 #> Standard deviation     2.1539 1.6807 0.6138 0.33879 0.20808 0.03140 1.232e-16 #> Proportion of Variance 0.5799 0.3531 0.0471 0.01435 0.00541 0.00012 0.000e+00 #> Cumulative Proportion  0.5799 0.9330 0.9801 0.99446 0.99988 1.00000 1.000e+00 #> Groups (n=4, named as 'order'): #> [1] \"Caryophanales\"    \"Enterobacterales\" \"Lactobacillales\"  \"Pseudomonadales\""},{"path":"https://amr-for-r.org/articles/PCA.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the results","title":"Conduct principal component analysis (PCA) for AMR","text":"can’t see explanation points. Perhaps works better new ggplot_pca() function, automatically adds right labels even groups:  can also print ellipse per group, edit appearance:","code":"biplot(pca_result) ggplot_pca(pca_result) ggplot_pca(pca_result, ellipse = TRUE) +   ggplot2::labs(title = \"An AMR/PCA biplot!\")"},{"path":"https://amr-for-r.org/articles/WHONET.html","id":"import-of-data","dir":"Articles","previous_headings":"","what":"Import of data","title":"Work with WHONET data","text":"tutorial assumes already imported WHONET data e.g. readxl package. RStudio, can done using menu button ‘Import Dataset’ tab ‘Environment’. Choose option ‘Excel’ select exported file. Make sure date fields imported correctly. example syntax look like : package comes example data set WHONET. use analysis.","code":"library(readxl) data <- read_excel(path = \"path/to/your/file.xlsx\")"},{"path":"https://amr-for-r.org/articles/WHONET.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Work with WHONET data","text":"First, load relevant packages yet . use tidyverse analyses. . don’t know yet, suggest read website: https://www.tidyverse.org/. transform variables simplify automate analysis: Microorganisms transformed microorganism codes (called mo) using Catalogue Life reference data set, contains ~70,000 microorganisms taxonomic kingdoms Bacteria, Fungi Protozoa. tranformation .mo(). function also recognises almost WHONET abbreviations microorganisms. Antimicrobial results interpretations clean valid. words, contain values \"S\", \"\" \"R\". exactly .sir() function . errors warnings, values transformed succesfully. also created package dedicated data cleaning checking, called cleaner package. freq() function can used create frequency tables. let’s check data, couple frequency tables: Frequency table Class: character Length: 500 Available: 500 (100%, NA: 0 = 0%) Unique: 38 Shortest: 11 Longest: 40 (omitted 28 entries, n = 57 [11.4%]) Frequency table Class: factor > ordered > sir (numeric) Length: 500 Levels: 5: S < SDD < < R < NI Available: 481 (96.2%, NA: 19 = 3.8%) Unique: 3 Drug: Amoxicillin/clavulanic acid (AMC, J01CR02/QJ01CR02) Drug group: Beta-lactams/penicillins %SI: 78.59%","code":"library(dplyr) # part of tidyverse library(ggplot2) # part of tidyverse library(AMR) # this package library(cleaner) # to create frequency tables # transform variables data <- WHONET %>%   # get microbial ID based on given organism   mutate(mo = as.mo(Organism)) %>%   # transform everything from \"AMP_ND10\" to \"CIP_EE\" to the new `sir` class   mutate_at(vars(AMP_ND10:CIP_EE), as.sir) # our newly created `mo` variable, put in the mo_name() function data %>% freq(mo_name(mo), nmax = 10) # our transformed antibiotic columns # amoxicillin/clavulanic acid (J01CR02) as an example data %>% freq(AMC_ND2)"},{"path":"https://amr-for-r.org/articles/WHONET.html","id":"a-first-glimpse-at-results","dir":"Articles","previous_headings":"","what":"A first glimpse at results","title":"Work with WHONET data","text":"easy ggplot already give lot information, using included ggplot_sir() function:","code":"data %>%   group_by(Country) %>%   select(Country, AMP_ND2, AMC_ED20, CAZ_ED10, CIP_ED5) %>%   ggplot_sir(translate_ab = \"ab\", facet = \"Country\", datalabels = FALSE)"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating Empirical Coverage with WISCA","text":"Clinical guidelines empirical antimicrobial therapy require probabilistic reasoning: chance regimen cover likely infecting organisms, culture results available? purpose WISCA, Weighted-Incidence Syndromic Combination Antibiogram. WISCA Bayesian approach integrates: Pathogen prevalence (often species causes syndrome), Regimen susceptibility (often regimen works pathogen known), estimate overall empirical coverage antimicrobial regimens, quantified uncertainty. vignette explains WISCA works, useful, apply using AMR package.","code":""},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"why-traditional-antibiograms-fall-short","dir":"Articles","previous_headings":"","what":"Why traditional antibiograms fall short","title":"Estimating Empirical Coverage with WISCA","text":"standard antibiogram gives : clinicians don’t know species priori. need choose regimen covers likely pathogens, without knowing one present. Traditional antibiograms calculate susceptibility % just number resistant isolates divided total number tested isolates. Therefore, traditional antibiograms: Fragment information organism, weight real-world prevalence, account combination therapy sample size, provide uncertainty.","code":"Species → Antibiotic → Susceptibility %"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"the-idea-of-wisca","dir":"Articles","previous_headings":"","what":"The idea of WISCA","title":"Estimating Empirical Coverage with WISCA","text":"WISCA asks: “probability regimen cover pathogen, given syndrome?” means combining two things: Incidence pathogen syndrome, Susceptibility pathogen regimen. can write : Coverage=∑(Incidencei×Susceptibilityi)\\text{Coverage} = \\sum_i (\\text{Incidence}_i \\times \\text{Susceptibility}_i) example, suppose: E. coli causes 60% cases, 90% E. coli susceptible drug. Klebsiella causes 40% cases, 70% Klebsiella susceptible. : Coverage=(0.6×0.9)+(0.4×0.7)=0.82\\text{Coverage} = (0.6 \\times 0.9) + (0.4 \\times 0.7) = 0.82 real data, incidence susceptibility estimated samples, carry uncertainty. WISCA models probabilistically, using conjugate Bayesian distributions.","code":""},{"path":[]},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"pathogen-incidence","dir":"Articles","previous_headings":"The Bayesian engine behind WISCA","what":"Pathogen incidence","title":"Estimating Empirical Coverage with WISCA","text":"Let: KK number pathogens, α=(1,1,…,1)\\alpha = (1, 1, \\ldots, 1) Dirichlet prior (uniform), n=(n1,…,nK)n = (n_1, \\ldots, n_K) observed counts per species. posterior incidence : p∼Dirichlet(α1+n1,…,αK+nK)p \\sim \\text{Dirichlet}(\\alpha_1 + n_1, \\ldots, \\alpha_K + n_K) simulate , use: xi∼Gamma(αi+ni,1),pi=xi∑j=1Kxjx_i \\sim \\text{Gamma}(\\alpha_i + n_i,\\ 1), \\quad p_i = \\frac{x_i}{\\sum_{j=1}^{K} x_j}","code":""},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"susceptibility","dir":"Articles","previous_headings":"The Bayesian engine behind WISCA","what":"Susceptibility","title":"Estimating Empirical Coverage with WISCA","text":"pathogen–regimen pair prior data: Prior: Beta(α0,β0)\\text{Beta}(\\alpha_0, \\beta_0), default α0=β0=1\\alpha_0 = \\beta_0 = 1 Data: SS susceptible NN tested SS category also include values SDD (susceptible, dose-dependent) (intermediate [CLSI], susceptible, increased exposure [EUCAST]). posterior : θ∼Beta(α0+S,β0+N−S)\\theta \\sim \\text{Beta}(\\alpha_0 + S,\\ \\beta_0 + N - S)","code":""},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"final-coverage-estimate","dir":"Articles","previous_headings":"The Bayesian engine behind WISCA","what":"Final coverage estimate","title":"Estimating Empirical Coverage with WISCA","text":"Putting together: Simulate pathogen incidence: 𝐩∼Dirichlet\\boldsymbol{p} \\sim \\text{Dirichlet} Simulate susceptibility: θi∼Beta(1+Si,1+Ri)\\theta_i \\sim \\text{Beta}(1 + S_i,\\ 1 + R_i) Combine: Coverage=∑=1Kpi⋅θi\\text{Coverage} = \\sum_{=1}^{K} p_i \\cdot \\theta_i Repeat simulation (e.g. 1000×) summarise: Mean = expected coverage Quantiles = credible interval","code":""},{"path":[]},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"prepare-data-and-simulate-synthetic-syndrome","dir":"Articles","previous_headings":"Practical use in the AMR package","what":"Prepare data and simulate synthetic syndrome","title":"Estimating Empirical Coverage with WISCA","text":"","code":"library(AMR) data <- example_isolates  # Structure of our data data #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # Add a fake syndrome column data$syndrome <- ifelse(data$mo %like% \"coli\", \"UTI\", \"No UTI\")"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"basic-wisca-antibiogram","dir":"Articles","previous_headings":"Practical use in the AMR package","what":"Basic WISCA antibiogram","title":"Estimating Empirical Coverage with WISCA","text":"","code":"wisca(data,       antimicrobials = c(\"AMC\", \"CIP\", \"GEN\"))"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"use-combination-regimens","dir":"Articles","previous_headings":"Practical use in the AMR package","what":"Use combination regimens","title":"Estimating Empirical Coverage with WISCA","text":"","code":"wisca(data,       antimicrobials = c(\"AMC\", \"AMC + CIP\", \"AMC + GEN\"))"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"stratify-by-syndrome","dir":"Articles","previous_headings":"Practical use in the AMR package","what":"Stratify by syndrome","title":"Estimating Empirical Coverage with WISCA","text":"AMR package available 28 languages, can used wisca() function :","code":"wisca(data,       antimicrobials = c(\"AMC\", \"AMC + CIP\", \"AMC + GEN\"),       syndromic_group = \"syndrome\") wisca(data,       antimicrobials = c(\"AMC\", \"AMC + CIP\", \"AMC + GEN\"),       syndromic_group = gsub(\"UTI\", \"UCI\", data$syndrome),       language = \"Spanish\")"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"sensible-defaults-which-can-be-customised","dir":"Articles","previous_headings":"","what":"Sensible defaults, which can be customised","title":"Estimating Empirical Coverage with WISCA","text":"simulations = 1000: number Monte Carlo draws conf_interval = 0.95: coverage interval width combine_SI = TRUE: count “” “SDD” susceptible","code":""},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Estimating Empirical Coverage with WISCA","text":"assumes data representative adjustment patient-level covariates, although passed onto syndromic_group argument WISCA model resistance time, might want use tidymodels , wrote basic introduction","code":""},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Estimating Empirical Coverage with WISCA","text":"WISCA enables: Empirical regimen comparison, Syndrome-specific coverage estimation, Fully probabilistic interpretation. available AMR package via either:","code":"wisca(...)  antibiogram(..., wisca = TRUE)"},{"path":"https://amr-for-r.org/articles/WISCA.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Estimating Empirical Coverage with WISCA","text":"Bielicki, JA, et al. (2016). Selecting appropriate empirical antibiotic regimens paediatric bloodstream infections: application Bayesian decision model local pooled antimicrobial resistance surveillance data. J Antimicrob Chemother. 71(3):794-802. https://doi.org/10.1093/jac/dkv397","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"microorganisms-full-microbial-taxonomy","dir":"Articles","previous_headings":"","what":"microorganisms: Full Microbial Taxonomy","title":"Download data sets for download / own use","text":"data set 78 679 rows 26 columns, containing following column names:mo, fullname, status, kingdom, phylum, class, order, family, genus, species, subspecies, rank, ref, oxygen_tolerance, source, lpsn, lpsn_parent, lpsn_renamed_to, mycobank, mycobank_parent, mycobank_renamed_to, gbif, gbif_parent, gbif_renamed_to, prevalence, snomed. data set R available microorganisms, load AMR package. last updated 26 March 2025 16:19:17 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (1.8 MB) Download tab-separated text file (17.7 MB) Download Microsoft Excel workbook (8.7 MB) Download Apache Feather file (8.3 MB) Download Apache Parquet file (3.8 MB) Download IBM SPSS Statistics data file (28.4 MB) Download Stata DTA file (89.5 MB) NOTE: exported files SPSS Stata contain first 50 SNOMED codes per record, file size otherwise exceed 100 MB; file size limit GitHub. file structures compression techniques inefficient. Advice? Use R instead. ’s free much better many ways. tab-separated text file Microsoft Excel workbook contain SNOMED codes comma separated values. Example content Included (sub)species per taxonomic kingdom: First 6 rows filtering genus Escherichia:","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"antimicrobials-antibiotic-and-antifungal-drugs","dir":"Articles","previous_headings":"","what":"antimicrobials: Antibiotic and Antifungal Drugs","title":"Download data sets for download / own use","text":"data set 497 rows 14 columns, containing following column names:ab, cid, name, group, atc, atc_group1, atc_group2, abbreviations, synonyms, oral_ddd, oral_units, iv_ddd, iv_units, loinc. data set R available antimicrobials, load AMR package. last updated 1 June 2025 09:54:40 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (45 kB) Download tab-separated text file (0.1 MB) Download Microsoft Excel workbook (78 kB) Download Apache Feather file (0.1 MB) Download Apache Parquet file (0.1 MB) Download IBM SPSS Statistics data file (0.4 MB) Download Stata DTA file (10 kB) tab-separated text, Microsoft Excel, SPSS, Stata files contain ATC codes, common abbreviations, trade names LOINC codes comma separated values. Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"clinical_breakpoints-interpretation-from-mic-values-disk-diameters-to-sir","dir":"Articles","previous_headings":"","what":"clinical_breakpoints: Interpretation from MIC values & disk diameters to SIR","title":"Download data sets for download / own use","text":"data set 40 217 rows 14 columns, containing following column names:guideline, type, host, method, site, mo, rank_index, ab, ref_tbl, disk_dose, breakpoint_S, breakpoint_R, uti, is_SDD. data set R available clinical_breakpoints, load AMR package. last updated 20 April 2025 10:55:31 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (88 kB) Download tab-separated text file (3.7 MB) Download Microsoft Excel workbook (2.4 MB) Download Apache Feather file (1.8 MB) Download Apache Parquet file (0.1 MB) Download IBM SPSS Statistics data file (6.6 MB) Download Stata DTA file (11.1 MB) Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"microorganisms-groups-species-groups-and-microbiological-complexes","dir":"Articles","previous_headings":"","what":"microorganisms.groups: Species Groups and Microbiological Complexes","title":"Download data sets for download / own use","text":"data set 534 rows 4 columns, containing following column names:mo_group, mo, mo_group_name, mo_name. data set R available microorganisms.groups, load AMR package. last updated 26 March 2025 16:19:17 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (6 kB) Download tab-separated text file (50 kB) Download Microsoft Excel workbook (20 kB) Download Apache Feather file (19 kB) Download Apache Parquet file (13 kB) Download IBM SPSS Statistics data file (65 kB) Download Stata DTA file (83 kB) Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"intrinsic_resistant-intrinsic-bacterial-resistance","dir":"Articles","previous_headings":"","what":"intrinsic_resistant: Intrinsic Bacterial Resistance","title":"Download data sets for download / own use","text":"data set 271 905 rows 2 columns, containing following column names:mo ab. data set R available intrinsic_resistant, load AMR package. last updated 28 March 2025 10:17:49 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (0.1 MB) Download tab-separated text file (10.1 MB) Download Microsoft Excel workbook (2.9 MB) Download Apache Feather file (2.3 MB) Download Apache Parquet file (0.3 MB) Download IBM SPSS Statistics data file (14.8 MB) Download Stata DTA file (22.6 MB) Example content Example rows filtering Enterobacter cloacae:","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"dosage-dosage-guidelines-from-eucast","dir":"Articles","previous_headings":"","what":"dosage: Dosage Guidelines from EUCAST","title":"Download data sets for download / own use","text":"data set 759 rows 9 columns, containing following column names:ab, name, type, dose, dose_times, administration, notes, original_txt, eucast_version. data set R available dosage, load AMR package. last updated 20 April 2025 10:55:31 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (4 kB) Download tab-separated text file (66 kB) Download Microsoft Excel workbook (37 kB) Download Apache Feather file (28 kB) Download Apache Parquet file (9 kB) Download IBM SPSS Statistics data file (97 kB) Download Stata DTA file (0.2 MB) Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"example_isolates-example-data-for-practice","dir":"Articles","previous_headings":"","what":"example_isolates: Example Data for Practice","title":"Download data sets for download / own use","text":"data set 2 000 rows 46 columns, containing following column names:date, patient, age, gender, ward, mo, PEN, OXA, FLC, AMX, AMC, AMP, TZP, CZO, FEP, CXM, FOX, CTX, CAZ, CRO, GEN, TOB, AMK, KAN, TMP, SXT, NIT, FOS, LNZ, CIP, MFX, VAN, TEC, TCY, TGC, DOX, ERY, CLI, AZM, IPM, MEM, MTR, CHL, COL, MUP, RIF. data set R available example_isolates, load AMR package. last updated 15 June 2024 13:33:49 UTC. Find info contents, (scientific) source, structure data set . Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"example_isolates_unclean-example-data-for-practice","dir":"Articles","previous_headings":"","what":"example_isolates_unclean: Example Data for Practice","title":"Download data sets for download / own use","text":"data set 3 000 rows 8 columns, containing following column names:patient_id, hospital, date, bacteria, AMX, AMC, CIP, GEN. data set R available example_isolates_unclean, load AMR package. last updated 27 August 2022 18:49:37 UTC. Find info contents, (scientific) source, structure data set . Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"microorganisms-codes-common-laboratory-codes","dir":"Articles","previous_headings":"","what":"microorganisms.codes: Common Laboratory Codes","title":"Download data sets for download / own use","text":"data set 6 036 rows 2 columns, containing following column names:code mo. data set R available microorganisms.codes, load AMR package. last updated 4 May 2025 16:50:25 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (27 kB) Download tab-separated text file (0.1 MB) Download Microsoft Excel workbook (98 kB) Download Apache Feather file (0.1 MB) Download Apache Parquet file (68 kB) Download IBM SPSS Statistics data file (0.2 MB) Download Stata DTA file (0.2 MB) Example content","code":""},{"path":"https://amr-for-r.org/articles/datasets.html","id":"antivirals-antiviral-drugs","dir":"Articles","previous_headings":"","what":"antivirals: Antiviral Drugs","title":"Download data sets for download / own use","text":"data set 120 rows 11 columns, containing following column names:av, name, atc, cid, atc_group, synonyms, oral_ddd, oral_units, iv_ddd, iv_units, loinc. data set R available antivirals, load AMR package. last updated 20 October 2023 12:51:48 UTC. Find info contents, (scientific) source, structure data set . Direct download links: Download original R Data Structure (RDS) file (6 kB) Download tab-separated text file (17 kB) Download Microsoft Excel workbook (16 kB) Download Apache Feather file (16 kB) Download Apache Parquet file (13 kB) Download IBM SPSS Statistics data file (32 kB) Download Stata DTA file (78 kB) tab-separated text, Microsoft Excel, SPSS, Stata files contain trade names LOINC codes comma separated values. Example content","code":""},{"path":"https://amr-for-r.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthijs S. Berends. Author, maintainer. Dennis Souverein. Author, contributor. Erwin E. . Hassing. Author, contributor. Aislinn Cook. Contributor. Andrew P. Norgan. Contributor. Anita Williams. Contributor. Annick Lenglet. Contributor. Anthony Underwood. Contributor. Anton Mymrikov. Contributor. Bart C. Meijer. Contributor. Christian F. Luz. Contributor. Dmytro Mykhailenko. Contributor. Eric H. L. C. M. Hazenberg. Contributor. Gwen Knight. Contributor. Jane Hawkey. Contributor. Jason Stull. Contributor. Javier Sanchez. Contributor. Jonas Salm. Contributor. Judith M. Fonville. Contributor. Kathryn Holt. Contributor. Larisse Bolton. Contributor. Matthew Saab. Contributor. Natacha Couto. Contributor. Peter Dutey-Magni. Contributor. Rogier P. Schade. Contributor. Sofia Ny. Contributor. Alex W. Friedrich. Thesis advisor. Bhanu N. M. Sinha. Thesis advisor. Casper J. Albers. Thesis advisor. Corinna Glasner. Thesis advisor.","code":""},{"path":"https://amr-for-r.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berends MS, Luz CF, Friedrich AW, Sinha BNM, Albers CJ, Glasner C (2022). “AMR: R Package Working Antimicrobial Resistance Data.” Journal Statistical Software, 104(3), 1–31. doi:10.18637/jss.v104.i03.","code":"@Article{,   title = {{AMR}: An {R} Package for Working with Antimicrobial Resistance Data},   author = {Matthijs S. Berends and Christian F. Luz and Alexander W. Friedrich and Bhanu N. M. Sinha and Casper J. Albers and Corinna Glasner},   journal = {Journal of Statistical Software},   year = {2022},   volume = {104},   number = {3},   pages = {1--31},   doi = {10.18637/jss.v104.i03}, }"},{"path":"https://amr-for-r.org/index.html","id":"the-amr-package-for-r-","dir":"","previous_headings":"","what":"Antimicrobial Resistance Data Analysis","title":"Antimicrobial Resistance Data Analysis","text":"Provides --one solution antimicrobial resistance (AMR) data analysis One Health approach Peer-reviewed, used 175 countries, available 28 languages Generates antibiograms - traditional, combined, syndromic, even WISCA Provides full microbiological taxonomy ~79 000 distinct species extensive info ~620 antimicrobial drugs Applies CLSI 2011-2025 EUCAST 2011-2025 clinical veterinary breakpoints, ECOFFs, MIC disk zone interpretation Corrects duplicate isolates, calculates predicts AMR per antimicrobial class Integrates WHONET, ATC, EARS-Net, PubChem, LOINC, SNOMED CT, NCBI 100% free costs dependencies, highly suitable places limited resources Now available Python ! Click read . amr--r.org doi.org/10.18637/jss.v104.i03","code":""},{"path":"https://amr-for-r.org/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Antimicrobial Resistance Data Analysis","text":"AMR package peer-reviewed, free open-source R package zero dependencies simplify analysis prediction Antimicrobial Resistance (AMR) work microbial antimicrobial data properties, using evidence-based methods. aim provide standard clean reproducible AMR data analysis, can therefore empower epidemiological analyses continuously enable surveillance treatment evaluation setting. team many different researchers around globe make successful durable project! work published Journal Statistical Software (Volume 104(3); DOI 10.18637/jss.v104.i03) formed basis two PhD theses (DOI 10.33612/diss.177417131 DOI 10.33612/diss.192486375). installing package, R knows ~79 000 distinct microbial species (updated June 2024) ~620 antimicrobial antiviral drugs name code (including ATC, EARS-Net, ASIARS-Net, PubChem, LOINC SNOMED CT), knows valid SIR MIC values. integral clinical breakpoint guidelines CLSI 2011-2025 EUCAST 2011-2025 included, even epidemiological cut-(ECOFF) values. supports can read data format, including WHONET data. package works Windows, macOS Linux versions R since R-3.0 (April 2013). designed work setting, including limited resources. created routine data analysis academic research Faculty Medical Sciences University Groningen University Medical Center Groningen.","code":""},{"path":"https://amr-for-r.org/index.html","id":"used-in-over-175-countries-available-in-28-languages","dir":"","previous_headings":"Introduction","what":"Used in over 175 countries, available in 28 languages","title":"Antimicrobial Resistance Data Analysis","text":"Since first public release early 2018, R package used almost countries world. Click map enlarge see country names. help contributors corners world, AMR package available  English,  Arabic,  Bengali,  Chinese,  Czech,  Danish,  Dutch,  Finnish,  French,  German,  Greek,  Hindi,  Indonesian,  Italian,  Japanese,  Korean,  Norwegian,  Polish,  Portuguese,  Romanian,  Russian,  Spanish,  Swahili,  Swedish,  Turkish,  Ukrainian,  Urdu,  Vietnamese. Antimicrobial drug (group) names colloquial microorganism names provided languages.","code":""},{"path":[]},{"path":"https://amr-for-r.org/index.html","id":"filtering-and-selecting-data","dir":"","previous_headings":"Practical examples","what":"Filtering and selecting data","title":"Antimicrobial Resistance Data Analysis","text":"One powerful functions package, aside calculating plotting AMR, selecting filtering based antimicrobial columns. can done using -called antimicrobial selectors, work base R, dplyr data.table. defined row filter Gram-negative bacteria intrinsic resistance cefotaxime (mo_is_gram_negative() mo_is_intrinsic_resistant()) column selection two antibiotic groups (aminoglycosides() carbapenems()), reference data microorganisms antimicrobials AMR package make sure get meant.","code":"# AMR works great with dplyr, but it's not required or neccesary library(AMR) library(dplyr, warn.conflicts = FALSE)  example_isolates %>%   mutate(bacteria = mo_fullname()) %>%   # filtering functions for microorganisms:   filter(mo_is_gram_negative(),          mo_is_intrinsic_resistant(ab = \"cefotax\")) %>%   # antimicrobial selectors:   select(bacteria,          aminoglycosides(),          carbapenems()) #> ℹ Using column 'mo' as input for mo_fullname() #> ℹ Using column 'mo' as input for mo_is_gram_negative() #> ℹ Using column 'mo' as input for mo_is_intrinsic_resistant() #> ℹ Determining intrinsic resistance based on 'EUCAST Expected Resistant #>   Phenotypes' v1.2 (2023). This note will be shown once per session. #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # A tibble: 35 × 7 #>    bacteria                     GEN   TOB   AMK   KAN   IPM   MEM   #>    <chr>                        <sir> <sir> <sir> <sir> <sir> <sir> #>  1 Pseudomonas aeruginosa       I     S     NA    R     S     NA    #>  2 Pseudomonas aeruginosa       I     S     NA    R     S     NA    #>  3 Pseudomonas aeruginosa       I     S     NA    R     S     NA    #>  4 Pseudomonas aeruginosa       S     S     S     R     NA    S     #>  5 Pseudomonas aeruginosa       S     S     S     R     S     S     #>  6 Pseudomonas aeruginosa       S     S     S     R     S     S     #>  7 Stenotrophomonas maltophilia R     R     R     R     R     R     #>  8 Pseudomonas aeruginosa       S     S     S     R     NA    S     #>  9 Pseudomonas aeruginosa       S     S     S     R     NA    S     #> 10 Pseudomonas aeruginosa       S     S     S     R     S     S     #> # ℹ 25 more rows"},{"path":"https://amr-for-r.org/index.html","id":"generating-antibiograms","dir":"","previous_headings":"Practical examples","what":"Generating antibiograms","title":"Antimicrobial Resistance Data Analysis","text":"AMR package supports generating traditional, combined, syndromic, even weighted-incidence syndromic combination antibiograms (WISCA). used inside R Markdown Quarto, table printed right output format automatically (markdown, LaTeX, HTML, etc.). combination antibiograms, clear combined antimicrobials yield higher empiric coverage: Like many functions package, antibiogram() comes support 28 languages often detected automatically based system language:","code":"antibiogram(example_isolates,             antimicrobials = c(aminoglycosides(), carbapenems())) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) antibiogram(example_isolates,             antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),             mo_transform = \"gramstain\") antibiogram(example_isolates,             antimicrobials = c(\"cipro\", \"tobra\", \"genta\"), # any arbitrary name or code will work             mo_transform = \"gramstain\",             ab_transform = \"name\",             language = \"uk\") # Ukrainian"},{"path":"https://amr-for-r.org/index.html","id":"interpreting-and-plotting-mic-and-sir-values","dir":"","previous_headings":"Practical examples","what":"Interpreting and plotting MIC and SIR values","title":"Antimicrobial Resistance Data Analysis","text":"AMR package allows interpretation MIC disk diffusion values based CLSI EUCAST. Moreover, ggplot2 package extended new scale functions, allow plotting log2-distributed MIC values SIR values.","code":"library(ggplot2) library(AMR)  # generate some random values some_mic_values <- random_mic(size = 100) some_groups <- sample(LETTERS[1:5], 20, replace = TRUE) interpretation <- as.sir(some_mic_values,                          guideline = \"EUCAST 2024\",                          mo = \"E. coli\", # or any code or name resembling a known species                          ab = \"Cipro\")   # or any code or name resembling an antibiotic  # create the plot ggplot(data.frame(mic = some_mic_values,                   group = some_groups,                   sir = interpretation),        aes(x = group, y = mic, colour = sir)) +   theme_minimal() +   geom_boxplot(fill = NA, colour = \"grey\") +   geom_jitter(width = 0.25) +      # NEW scale function: plot MIC values to x, y, colour or fill   scale_y_mic() +      # NEW scale function: write out S/I/R in any of the 20 supported languages   #                     and set colourblind-friendly colours   scale_colour_sir()"},{"path":"https://amr-for-r.org/index.html","id":"calculating-resistance-per-group","dir":"","previous_headings":"Practical examples","what":"Calculating resistance per group","title":"Antimicrobial Resistance Data Analysis","text":"manual approach, can use resistance susceptibility() function: use antimicrobial selectors select series antibiotic columns:","code":"example_isolates %>%   # group by ward:   group_by(ward) %>%   # calculate AMR using resistance() for gentamicin and tobramycin   # and get their 95% confidence intervals using sir_confidence_interval():   summarise(across(c(GEN, TOB),                    list(total_R = resistance,                         conf_int = function(x) sir_confidence_interval(x, collapse = \"-\")))) #> # A tibble: 3 × 5 #>   ward       GEN_total_R GEN_conf_int TOB_total_R TOB_conf_int #>   <chr>            <dbl> <chr>              <dbl> <chr>        #> 1 Clinical         0.229 0.205-0.254        0.315 0.284-0.347  #> 2 ICU              0.290 0.253-0.33         0.400 0.353-0.449  #> 3 Outpatient       0.2   0.131-0.285        0.368 0.254-0.493 library(AMR) library(dplyr)  out <- example_isolates %>%   # group by ward:   group_by(ward) %>%   # calculate AMR using resistance(), over all aminoglycosides and polymyxins:   summarise(across(c(aminoglycosides(), polymyxins()),             resistance)) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For polymyxins() using column 'COL' (colistin) #> Warning: There was 1 warning in `summarise()`. #> ℹ In argument: `across(c(aminoglycosides(), polymyxins()), resistance)`. #> ℹ In group 3: `ward = \"Outpatient\"`. #> Caused by warning: #> ! Introducing NA: only 23 results available for KAN in group: ward = #> \"Outpatient\" (minimum = 30). out #> # A tibble: 3 × 6 #>   ward         GEN   TOB   AMK   KAN   COL #>   <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Clinical   0.229 0.315 0.626     1 0.780 #> 2 ICU        0.290 0.400 0.662     1 0.857 #> 3 Outpatient 0.2   0.368 0.605    NA 0.889 # transform the antibiotic columns to names: out %>% set_ab_names() #> # A tibble: 3 × 6 #>   ward       gentamicin tobramycin amikacin kanamycin colistin #>   <chr>           <dbl>      <dbl>    <dbl>     <dbl>    <dbl> #> 1 Clinical        0.229      0.315    0.626         1    0.780 #> 2 ICU             0.290      0.400    0.662         1    0.857 #> 3 Outpatient      0.2        0.368    0.605        NA    0.889 # transform the antibiotic column to ATC codes: out %>% set_ab_names(property = \"atc\") #> # A tibble: 3 × 6 #>   ward       J01GB03 J01GB01 J01GB06 J01GB04 J01XB01 #>   <chr>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 Clinical     0.229   0.315   0.626       1   0.780 #> 2 ICU          0.290   0.400   0.662       1   0.857 #> 3 Outpatient   0.2     0.368   0.605      NA   0.889"},{"path":"https://amr-for-r.org/index.html","id":"what-else-can-you-do-with-this-package","dir":"","previous_headings":"","what":"What else can you do with this package?","title":"Antimicrobial Resistance Data Analysis","text":"package intended comprehensive toolbox integrated AMR data analysis. package can used : Reference taxonomy microorganisms, since package contains microbial (sub)species List Prokaryotic names Standing Nomenclature (LPSN) Global Biodiversity Information Facility (GBIF) (manual) Interpreting raw MIC disk diffusion values, based CLSI EUCAST guideline (manual) Retrieving antimicrobial drug names, doses forms administration clinical health care records (manual) Determining first isolates used AMR data analysis (manual) Calculating antimicrobial resistance (tutorial) Determining multi-drug resistance (MDR) / multi-drug resistant organisms (MDRO) (tutorial) Calculating (empirical) susceptibility mono therapy combination therapies (tutorial) Apply AMR functions predictive modelling (tutorial) Getting properties microorganism (like Gram stain, species, genus family) (manual) Getting properties antimicrobial (like name, code EARS-Net/ATC/LOINC/PubChem, defined daily dose trade name) (manual) Plotting antimicrobial resistance (tutorial) Applying EUCAST expert rules (manual) Getting SNOMED codes microorganism, getting properties microorganism based SNOMED code (manual) Getting LOINC codes antibiotic, getting properties antibiotic based LOINC code (manual) Machine reading EUCAST CLSI guidelines 2011-2021 translate MIC values disk diffusion diameters SIR (link) Principal component analysis AMR (tutorial)","code":""},{"path":[]},{"path":"https://amr-for-r.org/index.html","id":"latest-official-version","dir":"","previous_headings":"Get this package","what":"Latest official version","title":"Antimicrobial Resistance Data Analysis","text":"package available official R network (CRAN). Install package R CRAN using command: downloaded installed automatically. RStudio, click menu Tools > Install Packages… type “AMR” press Install. Note: functions website may available latest release. use functions data sets mentioned website, install latest beta version.","code":"install.packages(\"AMR\")"},{"path":"https://amr-for-r.org/index.html","id":"latest-beta-version","dir":"","previous_headings":"Get this package","what":"Latest beta version","title":"Antimicrobial Resistance Data Analysis","text":"Please read Developer Guideline . install latest unpublished beta version:","code":"install.packages(\"AMR\", repos = \"beta.amr-for-r.org\")  # if this does not work, try to install directly from GitHub using the 'remotes' package: remotes::install_github(\"msberends/AMR\")"},{"path":"https://amr-for-r.org/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Antimicrobial Resistance Data Analysis","text":"find conduct AMR data analysis, please continue reading get started click link ‘’ menu.","code":""},{"path":"https://amr-for-r.org/index.html","id":"partners","dir":"","previous_headings":"","what":"Partners","title":"Antimicrobial Resistance Data Analysis","text":"initial development package part , related , made possible following non-profit organisations initiatives:","code":""},{"path":"https://amr-for-r.org/index.html","id":"copyright","dir":"","previous_headings":"","what":"Copyright","title":"Antimicrobial Resistance Data Analysis","text":"R package free, open-source software licensed GNU General Public License v2.0 (GPL-2). nutshell, means package: May used commercial purposes May used private purposes May used patent purposes May modified, although: Modifications must released license distributing package Changes made code must documented May distributed, although: Source code must made available package distributed copy license copyright notice must included package. Comes LIMITATION liability Comes warranty","code":""},{"path":"https://amr-for-r.org/reference/AMR-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions, Arguments, or Datasets — AMR-deprecated","title":"Deprecated Functions, Arguments, or Datasets — AMR-deprecated","text":"objects -called 'Deprecated'. removed future version package. Using give warning name alternative object replaced (one).","code":""},{"path":"https://amr-for-r.org/reference/AMR-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Functions, Arguments, or Datasets — AMR-deprecated","text":"","code":"ab_class(...)  ab_selector(...)"},{"path":"https://amr-for-r.org/reference/AMR-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for the AMR package — AMR-options","title":"Options for the AMR package — AMR-options","text":"overview package-specific options() can set AMR package.","code":""},{"path":"https://amr-for-r.org/reference/AMR-options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"Options for the AMR package — AMR-options","text":"AMR_antibiogram_formatting_type  numeric (1-22) use antibiogram(), indicate formatting type use. AMR_breakpoint_type  character use .sir(), indicate breakpoint type use. must either \"ECOFF\", \"animal\", \"human\". AMR_capped_mic_handling  character use .sir(), indicate capped MIC values (<, <=, >, >=) interpreted. Must one \"standard\", \"strict\", \"relaxed\", \"inverse\" - default \"standard\". AMR_cleaning_regex  regular expression (case-insensitive) use .mo() mo_* functions, clean user input. default outcome mo_cleaning_regex(), removes texts brackets texts \"species\" \"serovar\". AMR_custom_ab  file location RDS file, use custom antimicrobial drugs package. explained add_custom_antimicrobials(). AMR_custom_mo  file location RDS file, use custom microorganisms package. explained add_custom_microorganisms(). AMR_eucastrules  character set default types rules eucast_rules() function, must one : \"breakpoints\", \"expert\", \"\", \"custom\", \"\", defaults c(\"breakpoints\", \"expert\"). AMR_guideline  character set default guideline interpreting MIC values disk diffusion diameters .sir(). Can guideline name (e.g., \"CLSI\") name year (e.g. \"CLSI 2019\"). default latest implemented EUCAST guideline, currently \"EUCAST 2025\". Supported guideline currently EUCAST (2011-2025) CLSI (2011-2025). AMR_ignore_pattern  regular expression ignore (.e., make NA) match given .mo() mo_* functions. AMR_include_PKPD  logical use .sir(), indicate PK/PD clinical breakpoints must applied last resort - default TRUE. AMR_substitute_missing_r_breakpoint  logical use .sir(), indicate missing R breakpoints must substituted \"R\" - default FALSE. AMR_include_screening  logical use .sir(), indicate clinical breakpoints screening allowed - default FALSE. AMR_keep_synonyms  logical use .mo() mo_* functions, indicate old, previously valid taxonomic names must preserved corrected currently accepted names. default FALSE. AMR_locale  character set language AMR package, can one supported language names ISO 639-1 codes: English (en), Arabic (ar), Bengali (bn), Chinese (zh), Czech (cs), Danish (da), Dutch (nl), Finnish (fi), French (fr), German (de), Greek (el), Hindi (hi), Indonesian (id), Italian (), Japanese (ja), Korean (ko), Norwegian (), Polish (pl), Portuguese (pt), Romanian (ro), Russian (ru), Spanish (es), Swahili (sw), Swedish (sv), Turkish (tr), Ukrainian (uk), Urdu (ur), Vietnamese (vi). default current system language (supported, English otherwise). AMR_mo_source  file location manual code list used .mo() mo_* functions. explained set_mo_source().","code":""},{"path":"https://amr-for-r.org/reference/AMR-options.html","id":"saving-settings-between-sessions","dir":"Reference","previous_headings":"","what":"Saving Settings Between Sessions","title":"Options for the AMR package — AMR-options","text":"Settings R saved globally thus lost R exited. can save options .Rprofile file, user-specific file. can edit using:   file, can set options ...   ...add Portuguese language support antimicrobials, allow PK/PD rules interpreting MIC values .sir().","code":"utils::file.edit(\"~/.Rprofile\") options(AMR_locale = \"pt\")  options(AMR_include_PKPD = TRUE)"},{"path":"https://amr-for-r.org/reference/AMR-options.html","id":"share-options-within-team","dir":"Reference","previous_headings":"","what":"Share Options Within Team","title":"Options for the AMR package — AMR-options","text":"global approach, e.g. within (data) team, save options file remote file location, shared network drive, user read file automatically start-. work way: Save plain text file e.g. \"X:/team_folder/R_options.R\" fill preferred settings. user, open .Rprofile file using utils::file.edit(\"~/.Rprofile\") put :   Reload R/RStudio check settings getOption(), e.g. getOption(\"AMR_locale\") set value. Now team settings configured one place, can maintained .","code":"source(\"X:/team_folder/R_options.R\")"},{"path":"https://amr-for-r.org/reference/AMR.html","id":null,"dir":"Reference","previous_headings":"","what":"The AMR Package — AMR","title":"The AMR Package — AMR","text":"Welcome AMR package. AMR package peer-reviewed, free open-source R package zero dependencies simplify analysis prediction Antimicrobial Resistance (AMR) work microbial antimicrobial data properties, using evidence-based methods. aim provide standard clean reproducible AMR data analysis, can therefore empower epidemiological analyses continuously enable surveillance treatment evaluation setting. team many different researchers around globe make successful durable project! work published Journal Statistical Software (Volume 104(3); doi:10.18637/jss.v104.i03 ) formed basis two PhD theses (doi:10.33612/diss.177417131  doi:10.33612/diss.192486375 ). installing package, R knows ~79 000 distinct microbial species (updated June 2024) ~620 antimicrobial antiviral drugs name code (including ATC, EARS-Net, ASIARS-Net, PubChem, LOINC SNOMED CT), knows valid SIR MIC values. integral clinical breakpoint guidelines CLSI 2011-2025 EUCAST 2011-2025 included, even epidemiological cut-(ECOFF) values. supports can read data format, including WHONET data. package works Windows, macOS Linux versions R since R-3.0 (April 2013). designed work setting, including limited resources. created routine data analysis academic research Faculty Medical Sciences University Groningen University Medical Center Groningen. AMR package available English, Arabic, Bengali, Chinese, Czech, Danish, Dutch, Finnish, French, German, Greek, Hindi, Indonesian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Spanish, Swahili, Swedish, Turkish, Ukrainian, Urdu, Vietnamese. Antimicrobial drug (group) names colloquial microorganism names provided languages.","code":""},{"path":"https://amr-for-r.org/reference/AMR.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The AMR Package — AMR","text":"cite AMR publications use: Berends MS, Luz CF, Friedrich AW, Sinha BNM, Albers CJ, Glasner C (2022). \"AMR: R Package Working Antimicrobial Resistance Data.\" Journal Statistical Software, 104(3), 1-31. doi:10.18637/jss.v104.i03 BibTeX entry LaTeX users :","code":"@Article{,   title = {{AMR}: An {R} Package for Working with Antimicrobial Resistance Data},   author = {Matthijs S. Berends and Christian F. Luz and Alexander W. Friedrich and Bhanu N. M. Sinha and Casper J. Albers and Corinna Glasner},   journal = {Journal of Statistical Software},   year = {2022},   volume = {104},   number = {3},   pages = {1--31},   doi = {10.18637/jss.v104.i03}, }"},{"path":"https://amr-for-r.org/reference/AMR.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"The AMR Package — AMR","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/AMR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The AMR Package — AMR","text":"Maintainer: Matthijs S. Berends m.s.berends@umcg.nl (ORCID) Authors: Dennis Souverein (ORCID) [contributor] Erwin E. . Hassing [contributor] contributors: Aislinn Cook (ORCID) [contributor] Andrew P. Norgan (ORCID) [contributor] Anita Williams (ORCID) [contributor] Annick Lenglet (ORCID) [contributor] Anthony Underwood (ORCID) [contributor] Anton Mymrikov [contributor] Bart C. Meijer [contributor] Christian F. Luz (ORCID) [contributor] Dmytro Mykhailenko [contributor] Eric H. L. C. M. Hazenberg [contributor] Gwen Knight (ORCID) [contributor] Jane Hawkey (ORCID) [contributor] Jason Stull (ORCID) [contributor] Javier Sanchez (ORCID) [contributor] Jonas Salm [contributor] Judith M. Fonville [contributor] Kathryn Holt (ORCID) [contributor] Larisse Bolton (ORCID) [contributor] Matthew Saab [contributor] Natacha Couto (ORCID) [contributor] Peter Dutey-Magni (ORCID) [contributor] Rogier P. Schade [contributor] Sofia Ny (ORCID) [contributor] Alex W. Friedrich (ORCID) [thesis advisor] Bhanu N. M. Sinha (ORCID) [thesis advisor] Casper J. Albers (ORCID) [thesis advisor] Corinna Glasner (ORCID) [thesis advisor]","code":""},{"path":"https://amr-for-r.org/reference/WHOCC.html","id":null,"dir":"Reference","previous_headings":"","what":"WHOCC: WHO Collaborating Centre for Drug Statistics Methodology — WHOCC","title":"WHOCC: WHO Collaborating Centre for Drug Statistics Methodology — WHOCC","text":"antimicrobial drugs official names, ATC codes, ATC groups defined daily dose (DDD) included package, using Collaborating Centre Drug Statistics Methodology.","code":""},{"path":"https://amr-for-r.org/reference/WHOCC.html","id":"whocc","dir":"Reference","previous_headings":"","what":"WHOCC","title":"WHOCC: WHO Collaborating Centre for Drug Statistics Methodology — WHOCC","text":"package contains ~550 antibiotic, antimycotic antiviral drugs Anatomical Therapeutic Chemical (ATC) codes, ATC groups Defined Daily Dose (DDD) World Health Organization Collaborating Centre Drug Statistics Methodology (WHOCC, https://atcddd.fhi.) Pharmaceuticals Community Register European Commission (https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm). become gold standard international drug utilisation monitoring research. WHOCC located Oslo Norwegian Institute Public Health funded Norwegian government. European Commission executive European Union promotes general interest. NOTE: WHOCC copyright allow use commercial purposes, unlike info package. See https://atcddd.fhi./copyright_disclaimer/.","code":""},{"path":"https://amr-for-r.org/reference/WHOCC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WHOCC: WHO Collaborating Centre for Drug Statistics Methodology — WHOCC","text":"","code":"as.ab(\"meropenem\") #> Class 'ab' #> [1] MEM ab_name(\"J01DH02\") #> [1] \"Meropenem\"  ab_tradenames(\"flucloxacillin\") #>  [1] \"bactopen\"             \"cloxacap\"             \"cloxacillinhydrate\"   #>  [4] \"cloxypen\"             \"floxacillin\"          \"floxacillinanhydrous\" #>  [7] \"floxapen\"             \"floxapensalt\"         \"fluclomix\"            #> [10] \"flucloxacilina\"       \"flucloxacilline\"      \"flucloxacillinum\"     #> [13] \"flucloxin\"            \"fluorochloroxacillin\" \"galfloxin\"            #> [16] \"latocillin\"           \"orbeninhydrate\"       \"rimaflox\"             #> [19] \"staphobristol\"        \"zoxin\""},{"path":"https://amr-for-r.org/reference/WHONET.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 500 Isolates - WHONET Example — WHONET","title":"Data Set with 500 Isolates - WHONET Example — WHONET","text":"example data set exact structure export file WHONET. files can used package, example data set shows. antimicrobial results example_isolates data set. patient names created using online surname generators place practice purposes.","code":""},{"path":"https://amr-for-r.org/reference/WHONET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 500 Isolates - WHONET Example — WHONET","text":"","code":"WHONET"},{"path":"https://amr-for-r.org/reference/WHONET.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 500 Isolates - WHONET Example — WHONET","text":"tibble 500 observations 53 variables: Identification number ID sample Specimen number ID specimen Organism Name microorganism. analysis, transform valid microbial class, using .mo(). Country Country origin Laboratory Name laboratory Last name Fictitious last name patient First name Fictitious initial patient Sex Fictitious gender patient Age Fictitious age patient Age category Age group, can also looked using age_groups() Date admissionDate hospital admission Specimen dateDate specimen received laboratory Specimen type Specimen type group Specimen type (Numeric) Translation \"Specimen type\" Reason Reason request Differential Diagnosis Isolate number ID isolate Organism type Type microorganism, can also looked using mo_type() Serotype Serotype microorganism Beta-lactamase Microorganism produces beta-lactamase? ESBL Microorganism produces extended spectrum beta-lactamase? Carbapenemase Microorganism produces carbapenemase? MRSA screening test Microorganism possible MRSA? Inducible clindamycin resistance Clindamycin can induced? Comment comments Date data entryDate data entered WHONET AMP_ND10:CIP_EE 28 different antimicrobials. can lookup abbreviations antimicrobials data set, use e.g. ab_name(\"AMP\") get official name immediately. analysis, transform valid antimicrobial class, using .sir().","code":""},{"path":"https://amr-for-r.org/reference/WHONET.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with 500 Isolates - WHONET Example — WHONET","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/WHONET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 500 Isolates - WHONET Example — WHONET","text":"","code":"WHONET #> # A tibble: 500 × 53 #>    `Identification number` `Specimen number` Organism Country         Laboratory #>    <chr>                               <int> <chr>    <chr>           <chr>      #>  1 fe41d7bafa                           1748 SPN      Belgium         National … #>  2 91f175ec37                           1767 eco      The Netherlands National … #>  3 cc4015056e                           1343 eco      The Netherlands National … #>  4 e864b692f5                           1894 MAP      Denmark         National … #>  5 3d051fe345                           1739 PVU      Belgium         National … #>  6 c80762a08d                           1846 103      The Netherlands National … #>  7 8022d3727c                           1628 103      Denmark         National … #>  8 f3dc5f553d                           1493 eco      The Netherlands National … #>  9 15add38f6c                           1847 eco      France          National … #> 10 fd41248def                           1458 eco      Germany         National … #> # ℹ 490 more rows #> # ℹ 48 more variables: `Last name` <chr>, `First name` <chr>, Sex <chr>, #> #   Age <dbl>, `Age category` <chr>, `Date of admission` <date>, #> #   `Specimen date` <date>, `Specimen type` <chr>, #> #   `Specimen type (Numeric)` <dbl>, Reason <chr>, `Isolate number` <int>, #> #   `Organism type` <chr>, Serotype <chr>, `Beta-lactamase` <lgl>, ESBL <lgl>, #> #   Carbapenemase <lgl>, `MRSA screening test` <lgl>, …"},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"Use function e.g. clinical texts health care records. returns list antimicrobial drugs, doses forms administration found texts.","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"","code":"ab_from_text(text, type = c(\"drug\", \"dose\", \"administration\"),   collapse = NULL, translate_ab = FALSE, thorough_search = NULL,   info = interactive(), ...)"},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"text Text analyse. type Type property search , either \"drug\", \"dose\" \"administration\", see Examples. collapse character pass paste(, collapse = ...) return one character per element text, see Examples. translate_ab type = \"drug\": column name antimicrobials data set translate antibiotic abbreviations , using ab_property(). default FALSE. Using TRUE equal using \"name\". thorough_search logical indicate whether input must extensively searched misspelling faulty input values. Setting TRUE take considerably time using FALSE. default, turn TRUE input elements contain maximum three words. info logical indicate whether progress bar printed - default TRUE interactive mode. ... Arguments passed .ab().","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"list,  character collapse NULL","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"function also internally used .ab(), although searches first drug name throw note drug names returned. Note: .ab() function may use long regular expression match brand names antimicrobial drugs. may fail systems.","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"argument-type","dir":"Reference","previous_headings":"","what":"Argument type","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"default, function search antimicrobial drug names. text elements searched official names, ATC codes brand names. uses .ab() internally, correct misspelling. type = \"dose\" (similar, like \"dosing\", \"doses\"), text elements searched numeric values higher 100 resemble years. output numeric. supports unit (g, mg, IE, etc.) multiple values one clinical text, see Examples. type = \"administration\" (abbreviations, like \"admin\", \"adm\"), text elements searched form drug administration. supports following forms (including common abbreviations): buccal, implant, inhalation, instillation, intravenous, nasal, oral, parenteral, rectal, sublingual, transdermal vaginal. Abbreviations oral ('po', 'per os') become \"oral\", values intravenous ('iv', 'intraven') become \"iv\". supports multiple values one clinical text, see Examples.","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"argument-collapse","dir":"Reference","previous_headings":"","what":"Argument collapse","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"Without using collapse, function return list. can convenient use e.g. inside mutate()):df %>% mutate(abx = ab_from_text(clinical_text)) returned AB codes can transformed official names, groups, etc. ab_* functions ab_name() ab_group(), using translate_ab argument. using collapse, function return character:df %>% mutate(abx = ab_from_text(clinical_text, collapse = \"|\"))","code":""},{"path":"https://amr-for-r.org/reference/ab_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Antimicrobial Drug Names and Doses from Clinical Text — ab_from_text","text":"","code":"# mind the bad spelling of amoxicillin in this line, # straight from a true health care record: ab_from_text(\"28/03/2020 regular amoxicilliin 500mg po tid\") #> [[1]] #> Class 'ab' #> [1] AMX #>   ab_from_text(\"500 mg amoxi po and 400mg cipro iv\") #> [[1]] #> Class 'ab' #> [1] AMX CIP #>  ab_from_text(\"500 mg amoxi po and 400mg cipro iv\", type = \"dose\") #> [[1]] #> [1] 500 400 #>  ab_from_text(\"500 mg amoxi po and 400mg cipro iv\", type = \"admin\") #> [[1]] #> [1] \"oral\" \"iv\"   #>   ab_from_text(\"500 mg amoxi po and 400mg cipro iv\", collapse = \", \") #> [1] \"AMX, CIP\" # \\donttest{ # if you want to know which antibiotic groups were administered, do e.g.: abx <- ab_from_text(\"500 mg amoxi po and 400mg cipro iv\") ab_group(abx[[1]]) #> [1] \"Beta-lactams/penicillins\" \"Fluoroquinolones\"          if (require(\"dplyr\")) {   tibble(clinical_text = c(     \"given 400mg cipro and 500 mg amox\",     \"started on doxy iv today\"   )) %>%     mutate(       abx_codes = ab_from_text(clinical_text),       abx_doses = ab_from_text(clinical_text, type = \"doses\"),       abx_admin = ab_from_text(clinical_text, type = \"admin\"),       abx_coll = ab_from_text(clinical_text, collapse = \"|\"),       abx_coll_names = ab_from_text(clinical_text,         collapse = \"|\",         translate_ab = \"name\"       ),       abx_coll_doses = ab_from_text(clinical_text,         type = \"doses\",         collapse = \"|\"       ),       abx_coll_admin = ab_from_text(clinical_text,         type = \"admin\",         collapse = \"|\"       )     ) } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> # A tibble: 2 × 8 #>   clinical_text            abx_codes abx_doses abx_admin abx_coll abx_coll_names #>   <chr>                    <list>    <list>    <list>    <chr>    <chr>          #> 1 given 400mg cipro and 5… <ab [2]>  <dbl [2]> <chr [1]> CIP|AMX  Ciprofloxacin… #> 2 started on doxy iv today <ab [1]>  <dbl [1]> <chr [1]> DOX      Doxycycline    #> # ℹ 2 more variables: abx_coll_doses <chr>, abx_coll_admin <chr> # }"},{"path":"https://amr-for-r.org/reference/ab_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Properties of an Antibiotic — ab_property","title":"Get Properties of an Antibiotic — ab_property","text":"Use functions return specific property antibiotic antimicrobials data set. input values evaluated internally .ab().","code":""},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Properties of an Antibiotic — ab_property","text":"","code":"ab_name(x, language = get_AMR_locale(), tolower = FALSE, ...)  ab_cid(x, ...)  ab_synonyms(x, ...)  ab_tradenames(x, ...)  ab_group(x, language = get_AMR_locale(), ...)  ab_atc(x, only_first = FALSE, ...)  ab_atc_group1(x, language = get_AMR_locale(), ...)  ab_atc_group2(x, language = get_AMR_locale(), ...)  ab_loinc(x, ...)  ab_ddd(x, administration = \"oral\", ...)  ab_ddd_units(x, administration = \"oral\", ...)  ab_info(x, language = get_AMR_locale(), ...)  ab_url(x, open = FALSE, ...)  ab_property(x, property = \"name\", language = get_AMR_locale(), ...)  set_ab_names(data, ..., property = \"name\", language = get_AMR_locale(),   snake_case = NULL)"},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Properties of an Antibiotic — ab_property","text":"x (vector ) text can coerced valid antibiotic drug code .ab(). language Language returned text - default current system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. tolower logical indicate whether first character every output transformed lower case character. lead e.g. \"polymyxin B\" \"polymyxin b\". ... case set_ab_names() data data.frame: columns select (supports tidy selection column1:column4), otherwise arguments passed .ab(). only_first logical indicate whether first ATC code must returned, giving preference J0-codes (.e., antimicrobial drug group). administration Way administration, either \"oral\" \"iv\". open Browse URL using utils::browseURL(). property One column names one antimicrobials data set: vector_or(colnames(antimicrobials), sort = FALSE). data data.frame columns need renamed, character vector column names. snake_case logical indicate whether names -called snake case: lower case spaces/slashes replaced underscore (_).","code":""},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Properties of an Antibiotic — ab_property","text":"integer case ab_cid() named list case ab_info() multiple ab_atc()/ab_synonyms()/ab_tradenames() double case ab_ddd() data.frame case set_ab_names() character cases","code":""},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Properties of an Antibiotic — ab_property","text":"output translated possible. function ab_url() return direct URL official website. warning returned required ATC code available. function set_ab_names() special column renaming function data.frames. renames columns names resemble antimicrobial drugs. always makes sure new column names unique. property = \"atc\" set, preference given ATC codes J-group.","code":""},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get Properties of an Antibiotic — ab_property","text":"World Health Organization () Collaborating Centre Drug Statistics Methodology: https://atcddd.fhi./atc_ddd_index/ European Commission Public Health PHARMACEUTICALS - COMMUNITY REGISTER: https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm","code":""},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Get Properties of an Antibiotic — ab_property","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/ab_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Properties of an Antibiotic — ab_property","text":"","code":"# all properties: ab_name(\"AMX\") #> [1] \"Amoxicillin\" ab_atc(\"AMX\") #> [1] \"J01CA04\"  \"QG51AA03\" \"QJ01CA04\" ab_cid(\"AMX\") #> [1] 33613 ab_synonyms(\"AMX\") #>  [1] \"acuotricina\"     \"alfamox\"         \"alfida\"          \"amitron\"         #>  [5] \"amoclen\"         \"amodex\"          \"amoksicillin\"    \"amolin\"          #>  [9] \"amopen\"          \"amopenixin\"      \"amophar\"         \"amoran\"          #> [13] \"amoxi\"           \"amoxicaps\"       \"amoxicilina\"     \"amoxicilline\"    #> [17] \"amoxicillinum\"   \"amoxidal\"        \"amoxiden\"        \"amoxil\"          #> [21] \"amoxillat\"       \"amoxina\"         \"amoxine\"         \"amoxipen\"        #> [25] \"amoxivet\"        \"amoxycillin\"     \"amoxycillinsalt\" \"amoxyke\"         #> [29] \"anemolin\"        \"aspenil\"         \"atoksilin\"       \"bristamox\"       #> [33] \"cemoxin\"         \"ciblor\"          \"clamoxyl\"        \"damoxy\"          #> [37] \"danoxillin\"      \"delacillin\"      \"demoksil\"        \"dispermox\"       #> [41] \"efpenix\"         \"eupen\"           \"flemoxin\"        \"flemoxine\"       #> [45] \"galenamox\"       \"gramidil\"        \"hiconcil\"        \"himinomax\"       #> [49] \"histocillin\"     \"ibiamox\"         \"imacillin\"       \"izoltil\"         #> [53] \"kentrocyllin\"    \"lamoxy\"          \"largopen\"        \"larotid\"         #> [57] \"matasedrin\"      \"metifarma\"       \"moksilin\"        \"moxacin\"         #> [61] \"moxal\"           \"moxaline\"        \"moxatag\"         \"neotetranase\"    #> [65] \"novabritine\"     \"ospamox\"         \"pacetocin\"       \"pamocil\"         #> [69] \"paradroxil\"      \"pasetocin\"       \"penamox\"         \"piramox\"         #> [73] \"promoxil\"        \"quimiopen\"       \"remoxil\"         \"riotapen\"        #> [77] \"robamox\"         \"sawacillin\"      \"siganopen\"       \"simplamox\"       #> [81] \"sintopen\"        \"sumox\"           \"topramoxin\"      \"trifamox\"        #> [85] \"trimox\"          \"unicillin\"       \"utimox\"          \"velamox\"         #> [89] \"vetramox\"        \"wymox\"           \"zamocillin\"      \"zamocilline\"     #> [93] \"zimox\"           ab_tradenames(\"AMX\") #>  [1] \"acuotricina\"     \"alfamox\"         \"alfida\"          \"amitron\"         #>  [5] \"amoclen\"         \"amodex\"          \"amoksicillin\"    \"amolin\"          #>  [9] \"amopen\"          \"amopenixin\"      \"amophar\"         \"amoran\"          #> [13] \"amoxi\"           \"amoxicaps\"       \"amoxicilina\"     \"amoxicilline\"    #> [17] \"amoxicillinum\"   \"amoxidal\"        \"amoxiden\"        \"amoxil\"          #> [21] \"amoxillat\"       \"amoxina\"         \"amoxine\"         \"amoxipen\"        #> [25] \"amoxivet\"        \"amoxycillin\"     \"amoxycillinsalt\" \"amoxyke\"         #> [29] \"anemolin\"        \"aspenil\"         \"atoksilin\"       \"bristamox\"       #> [33] \"cemoxin\"         \"ciblor\"          \"clamoxyl\"        \"damoxy\"          #> [37] \"danoxillin\"      \"delacillin\"      \"demoksil\"        \"dispermox\"       #> [41] \"efpenix\"         \"eupen\"           \"flemoxin\"        \"flemoxine\"       #> [45] \"galenamox\"       \"gramidil\"        \"hiconcil\"        \"himinomax\"       #> [49] \"histocillin\"     \"ibiamox\"         \"imacillin\"       \"izoltil\"         #> [53] \"kentrocyllin\"    \"lamoxy\"          \"largopen\"        \"larotid\"         #> [57] \"matasedrin\"      \"metifarma\"       \"moksilin\"        \"moxacin\"         #> [61] \"moxal\"           \"moxaline\"        \"moxatag\"         \"neotetranase\"    #> [65] \"novabritine\"     \"ospamox\"         \"pacetocin\"       \"pamocil\"         #> [69] \"paradroxil\"      \"pasetocin\"       \"penamox\"         \"piramox\"         #> [73] \"promoxil\"        \"quimiopen\"       \"remoxil\"         \"riotapen\"        #> [77] \"robamox\"         \"sawacillin\"      \"siganopen\"       \"simplamox\"       #> [81] \"sintopen\"        \"sumox\"           \"topramoxin\"      \"trifamox\"        #> [85] \"trimox\"          \"unicillin\"       \"utimox\"          \"velamox\"         #> [89] \"vetramox\"        \"wymox\"           \"zamocillin\"      \"zamocilline\"     #> [93] \"zimox\"           ab_group(\"AMX\") #> [1] \"Beta-lactams/penicillins\" ab_atc_group1(\"AMX\") #> [1] \"Beta-lactam antibacterials, penicillins\" ab_atc_group2(\"AMX\") #> [1] \"Penicillins with extended spectrum\" ab_url(\"AMX\") #>                                                             Amoxicillin  #> \"https://atcddd.fhi.no/atc_ddd_index//?code=J01CA04&showdescription=no\"   # smart lowercase transformation ab_name(x = c(\"AMC\", \"PLB\")) #> [1] \"Amoxicillin/clavulanic acid\" \"Polymyxin B\"                 ab_name(x = c(\"AMC\", \"PLB\"), tolower = TRUE) #> [1] \"amoxicillin/clavulanic acid\" \"polymyxin B\"                  # defined daily doses (DDD) ab_ddd(\"AMX\", \"oral\") #> [1] 1.5 ab_ddd_units(\"AMX\", \"oral\") #> [1] \"g\" ab_ddd(\"AMX\", \"iv\") #> [1] 3 ab_ddd_units(\"AMX\", \"iv\") #> [1] \"g\"  ab_info(\"AMX\") # all properties as a list #> $ab #> [1] \"AMX\" #>  #> $cid #> [1] 33613 #>  #> $name #> [1] \"Amoxicillin\" #>  #> $group #> [1] \"Beta-lactams/penicillins\" #>  #> $atc #> [1] \"J01CA04\"  \"QG51AA03\" \"QJ01CA04\" #>  #> $atc_group1 #> [1] \"Beta-lactam antibacterials, penicillins\" #>  #> $atc_group2 #> [1] \"Penicillins with extended spectrum\" #>  #> $tradenames #>  [1] \"acuotricina\"     \"alfamox\"         \"alfida\"          \"amitron\"         #>  [5] \"amoclen\"         \"amodex\"          \"amoksicillin\"    \"amolin\"          #>  [9] \"amopen\"          \"amopenixin\"      \"amophar\"         \"amoran\"          #> [13] \"amoxi\"           \"amoxicaps\"       \"amoxicilina\"     \"amoxicilline\"    #> [17] \"amoxicillinum\"   \"amoxidal\"        \"amoxiden\"        \"amoxil\"          #> [21] \"amoxillat\"       \"amoxina\"         \"amoxine\"         \"amoxipen\"        #> [25] \"amoxivet\"        \"amoxycillin\"     \"amoxycillinsalt\" \"amoxyke\"         #> [29] \"anemolin\"        \"aspenil\"         \"atoksilin\"       \"bristamox\"       #> [33] \"cemoxin\"         \"ciblor\"          \"clamoxyl\"        \"damoxy\"          #> [37] \"danoxillin\"      \"delacillin\"      \"demoksil\"        \"dispermox\"       #> [41] \"efpenix\"         \"eupen\"           \"flemoxin\"        \"flemoxine\"       #> [45] \"galenamox\"       \"gramidil\"        \"hiconcil\"        \"himinomax\"       #> [49] \"histocillin\"     \"ibiamox\"         \"imacillin\"       \"izoltil\"         #> [53] \"kentrocyllin\"    \"lamoxy\"          \"largopen\"        \"larotid\"         #> [57] \"matasedrin\"      \"metifarma\"       \"moksilin\"        \"moxacin\"         #> [61] \"moxal\"           \"moxaline\"        \"moxatag\"         \"neotetranase\"    #> [65] \"novabritine\"     \"ospamox\"         \"pacetocin\"       \"pamocil\"         #> [69] \"paradroxil\"      \"pasetocin\"       \"penamox\"         \"piramox\"         #> [73] \"promoxil\"        \"quimiopen\"       \"remoxil\"         \"riotapen\"        #> [77] \"robamox\"         \"sawacillin\"      \"siganopen\"       \"simplamox\"       #> [81] \"sintopen\"        \"sumox\"           \"topramoxin\"      \"trifamox\"        #> [85] \"trimox\"          \"unicillin\"       \"utimox\"          \"velamox\"         #> [89] \"vetramox\"        \"wymox\"           \"zamocillin\"      \"zamocilline\"     #> [93] \"zimox\"           #>  #> $loinc #>  [1] \"101498-4\" \"15-8\"     \"16-6\"     \"16365-9\"  \"17-4\"     \"18-2\"     #>  [7] \"18861-5\"  \"18862-3\"  \"19-0\"     \"20-8\"     \"21-6\"     \"22-4\"     #> [13] \"25274-2\"  \"25310-4\"  \"3344-9\"   \"55614-2\"  \"55615-9\"  \"55616-7\"  #> [19] \"6976-5\"   \"6977-3\"   \"80133-2\"  #>  #> $ddd #> $ddd$oral #> $ddd$oral$amount #> [1] 1.5 #>  #> $ddd$oral$units #> [1] \"g\" #>  #>  #> $ddd$iv #> $ddd$iv$amount #> [1] 3 #>  #> $ddd$iv$units #> [1] \"g\" #>  #>  #>   # all ab_* functions use as.ab() internally, so you can go from 'any' to 'any': ab_atc(\"AMP\") #> [1] \"J01CA01\"  \"QJ01CA01\" \"QJ51CA01\" \"QS01AA19\" \"S01AA19\"  ab_group(\"J01CA01\") #> [1] \"Beta-lactams/penicillins\" ab_loinc(\"ampicillin\") #>  [1] \"101477-8\" \"101478-6\" \"18864-9\"  \"18865-6\"  \"20374-5\"  \"21066-6\"  #>  [7] \"23618-2\"  \"27-3\"     \"28-1\"     \"29-9\"     \"30-7\"     \"31-5\"     #> [13] \"32-3\"     \"33-1\"     \"3355-5\"   \"33562-0\"  \"33919-2\"  \"34-9\"     #> [19] \"43883-8\"  \"43884-6\"  \"6979-9\"   \"6980-7\"   \"87604-5\"  ab_name(\"21066-6\") #> [1] \"Ampicillin\" ab_name(6249) #> [1] \"Ampicillin\" ab_name(\"J01CA01\") #> [1] \"Ampicillin\"  # spelling from different languages and dyslexia are no problem ab_atc(\"ceftriaxon\") #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"cephtriaxone\") #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"cephthriaxone\") #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"seephthriaaksone\") #> [1] \"J01DD04\"  \"QJ01DD04\"  # use set_ab_names() for renaming columns colnames(example_isolates) #>  [1] \"date\"    \"patient\" \"age\"     \"gender\"  \"ward\"    \"mo\"      \"PEN\"     #>  [8] \"OXA\"     \"FLC\"     \"AMX\"     \"AMC\"     \"AMP\"     \"TZP\"     \"CZO\"     #> [15] \"FEP\"     \"CXM\"     \"FOX\"     \"CTX\"     \"CAZ\"     \"CRO\"     \"GEN\"     #> [22] \"TOB\"     \"AMK\"     \"KAN\"     \"TMP\"     \"SXT\"     \"NIT\"     \"FOS\"     #> [29] \"LNZ\"     \"CIP\"     \"MFX\"     \"VAN\"     \"TEC\"     \"TCY\"     \"TGC\"     #> [36] \"DOX\"     \"ERY\"     \"CLI\"     \"AZM\"     \"IPM\"     \"MEM\"     \"MTR\"     #> [43] \"CHL\"     \"COL\"     \"MUP\"     \"RIF\"     colnames(set_ab_names(example_isolates)) #>  [1] \"date\"                          \"patient\"                       #>  [3] \"age\"                           \"gender\"                        #>  [5] \"ward\"                          \"mo\"                            #>  [7] \"benzylpenicillin\"              \"oxacillin\"                     #>  [9] \"flucloxacillin\"                \"amoxicillin\"                   #> [11] \"amoxicillin_clavulanic_acid\"   \"ampicillin\"                    #> [13] \"piperacillin_tazobactam\"       \"cefazolin\"                     #> [15] \"cefepime\"                      \"cefuroxime\"                    #> [17] \"cefoxitin\"                     \"cefotaxime\"                    #> [19] \"ceftazidime\"                   \"ceftriaxone\"                   #> [21] \"gentamicin\"                    \"tobramycin\"                    #> [23] \"amikacin\"                      \"kanamycin\"                     #> [25] \"trimethoprim\"                  \"trimethoprim_sulfamethoxazole\" #> [27] \"nitrofurantoin\"                \"fosfomycin\"                    #> [29] \"linezolid\"                     \"ciprofloxacin\"                 #> [31] \"moxifloxacin\"                  \"vancomycin\"                    #> [33] \"teicoplanin\"                   \"tetracycline\"                  #> [35] \"tigecycline\"                   \"doxycycline\"                   #> [37] \"erythromycin\"                  \"clindamycin\"                   #> [39] \"azithromycin\"                  \"imipenem\"                      #> [41] \"meropenem\"                     \"metronidazole\"                 #> [43] \"chloramphenicol\"               \"colistin\"                      #> [45] \"mupirocin\"                     \"rifampicin\"                    colnames(set_ab_names(example_isolates, NIT:VAN)) #>  [1] \"date\"           \"patient\"        \"age\"            \"gender\"         #>  [5] \"ward\"           \"mo\"             \"PEN\"            \"OXA\"            #>  [9] \"FLC\"            \"AMX\"            \"AMC\"            \"AMP\"            #> [13] \"TZP\"            \"CZO\"            \"FEP\"            \"CXM\"            #> [17] \"FOX\"            \"CTX\"            \"CAZ\"            \"CRO\"            #> [21] \"GEN\"            \"TOB\"            \"AMK\"            \"KAN\"            #> [25] \"TMP\"            \"SXT\"            \"nitrofurantoin\" \"fosfomycin\"     #> [29] \"linezolid\"      \"ciprofloxacin\"  \"moxifloxacin\"   \"vancomycin\"     #> [33] \"TEC\"            \"TCY\"            \"TGC\"            \"DOX\"            #> [37] \"ERY\"            \"CLI\"            \"AZM\"            \"IPM\"            #> [41] \"MEM\"            \"MTR\"            \"CHL\"            \"COL\"            #> [45] \"MUP\"            \"RIF\"            # \\donttest{ if (require(\"dplyr\")) {   example_isolates %>%     set_ab_names()    # this does the same:   example_isolates %>%     rename_with(set_ab_names)    # set_ab_names() works with any AB property:   example_isolates %>%     set_ab_names(property = \"atc\")    example_isolates %>%     set_ab_names(where(is.sir)) %>%     colnames()    example_isolates %>%     set_ab_names(NIT:VAN) %>%     colnames() } #>  [1] \"date\"           \"patient\"        \"age\"            \"gender\"         #>  [5] \"ward\"           \"mo\"             \"PEN\"            \"OXA\"            #>  [9] \"FLC\"            \"AMX\"            \"AMC\"            \"AMP\"            #> [13] \"TZP\"            \"CZO\"            \"FEP\"            \"CXM\"            #> [17] \"FOX\"            \"CTX\"            \"CAZ\"            \"CRO\"            #> [21] \"GEN\"            \"TOB\"            \"AMK\"            \"KAN\"            #> [25] \"TMP\"            \"SXT\"            \"nitrofurantoin\" \"fosfomycin\"     #> [29] \"linezolid\"      \"ciprofloxacin\"  \"moxifloxacin\"   \"vancomycin\"     #> [33] \"TEC\"            \"TCY\"            \"TGC\"            \"DOX\"            #> [37] \"ERY\"            \"CLI\"            \"AZM\"            \"IPM\"            #> [41] \"MEM\"            \"MTR\"            \"CHL\"            \"COL\"            #> [45] \"MUP\"            \"RIF\"            # }"},{"path":"https://amr-for-r.org/reference/add_custom_antimicrobials.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Custom Antimicrobials — add_custom_antimicrobials","title":"Add Custom Antimicrobials — add_custom_antimicrobials","text":"add_custom_antimicrobials() can add custom antimicrobial drug names codes.","code":""},{"path":"https://amr-for-r.org/reference/add_custom_antimicrobials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Custom Antimicrobials — add_custom_antimicrobials","text":"","code":"add_custom_antimicrobials(x)  clear_custom_antimicrobials()"},{"path":"https://amr-for-r.org/reference/add_custom_antimicrobials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Custom Antimicrobials — add_custom_antimicrobials","text":"x data.frame resembling antimicrobials data set, least containing columns \"ab\" \"name\".","code":""},{"path":"https://amr-for-r.org/reference/add_custom_antimicrobials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Custom Antimicrobials — add_custom_antimicrobials","text":"Important: Due R works, add_custom_antimicrobials() function run every R session - added antimicrobials stored sessions thus lost R exited. two ways circumvent automate process adding antimicrobials: Method 1: Using package option AMR_custom_ab, preferred method. use method: Create data set structure antimicrobials data set (containing least columns \"ab\" \"name\") save saveRDS() location choice, e.g. \"~/my_custom_ab.rds\", remote location. Set file location package option AMR_custom_ab: options(AMR_custom_ab = \"~/my_custom_ab.rds\"). can even remote file location, https URL. Since options saved R sessions, best save option .Rprofile file loaded start-R. , open .Rprofile file using e.g. utils::file.edit(\"~/.Rprofile\"), add text save file:   Upon package load, file loaded run add_custom_antimicrobials() function. Method 2: Loading antimicrobial additions directly .Rprofile file. Note definitions stored user-specific R file, suboptimal workflow. use method: Edit .Rprofile file using e.g. utils::file.edit(\"~/.Rprofile\"). Add text like save file:   Use clear_custom_antimicrobials() clear previously added antimicrobials.","code":"# Add custom antimicrobial codes: options(AMR_custom_ab = \"~/my_custom_ab.rds\") # Add custom antibiotic drug codes:  AMR::add_custom_antimicrobials(    data.frame(ab = \"TESTAB\",               name = \"Test Antibiotic\",               group = \"Test Group\")  )"},{"path":[]},{"path":"https://amr-for-r.org/reference/add_custom_antimicrobials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Custom Antimicrobials — add_custom_antimicrobials","text":"","code":"# \\donttest{ # returns a wildly guessed result: as.ab(\"testab\") #> Class 'ab' #> [1] THA  # now add a custom entry - it will be considered by as.ab() and # all ab_*() functions add_custom_antimicrobials(   data.frame(     ab = \"TESTAB\",     name = \"Test Antibiotic\",     # you can add any property present in the     # 'antimicrobials' data set, such as 'group':     group = \"Test Group\"   ) ) #> ℹ Added one record to the internal antimicrobials data set.  # \"testab\" is now a new antibiotic: as.ab(\"testab\") #> Class 'ab' #> [1] TESTAB ab_name(\"testab\") #> [1] \"Test Antibiotic\" ab_group(\"testab\") #> [1] \"Test Group\"  ab_info(\"testab\") #> $ab #> [1] \"TESTAB\" #>  #> $cid #> [1] NA #>  #> $name #> [1] \"Test Antibiotic\" #>  #> $group #> [1] \"Test Group\" #>  #> $atc #> [1] NA #>  #> $atc_group1 #> [1] NA #>  #> $atc_group2 #> [1] NA #>  #> $tradenames #> [1] NA #>  #> $loinc #> [1] NA #>  #> $ddd #> $ddd$oral #> $ddd$oral$amount #> [1] NA #>  #> $ddd$oral$units #> [1] NA #>  #>  #> $ddd$iv #> $ddd$iv$amount #> [1] NA #>  #> $ddd$iv$units #> [1] NA #>  #>  #>    # Add Co-fluampicil, which is one of the many J01CR50 codes, see # https://atcddd.fhi.no/ddd/list_of_ddds_combined_products/ add_custom_antimicrobials(   data.frame(     ab = \"COFLU\",     name = \"Co-fluampicil\",     atc = \"J01CR50\",     group = \"Beta-lactams/penicillins\"   ) ) #> ℹ Added one record to the internal antimicrobials data set. ab_atc(\"Co-fluampicil\") #> [1] \"J01CR50\" ab_name(\"J01CR50\") #> [1] \"Co-fluampicil\"  # even antimicrobial selectors work # see ?amr_selector x <- data.frame(   random_column = \"some value\",   coflu = as.sir(\"S\"),   ampicillin = as.sir(\"R\") ) x #>   random_column coflu ampicillin #> 1    some value     S          R x[, betalactams()] #> ℹ For betalactams() using columns 'coflu' (co-fluampicil) and #>   'ampicillin' #>   coflu ampicillin #> 1     S          R # }"},{"path":"https://amr-for-r.org/reference/add_custom_microorganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Custom Microorganisms — add_custom_microorganisms","title":"Add Custom Microorganisms — add_custom_microorganisms","text":"add_custom_microorganisms() can add custom microorganisms, non-taxonomic outcome laboratory analysis.","code":""},{"path":"https://amr-for-r.org/reference/add_custom_microorganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Custom Microorganisms — add_custom_microorganisms","text":"","code":"add_custom_microorganisms(x)  clear_custom_microorganisms()"},{"path":"https://amr-for-r.org/reference/add_custom_microorganisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Custom Microorganisms — add_custom_microorganisms","text":"x data.frame resembling microorganisms data set, least containing column \"genus\" (case-insensitive).","code":""},{"path":"https://amr-for-r.org/reference/add_custom_microorganisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Custom Microorganisms — add_custom_microorganisms","text":"function fill missing taxonomy , specific taxonomic columns missing, see Examples. Important: Due R works, add_custom_microorganisms() function run every R session - added microorganisms stored sessions thus lost R exited. two ways circumvent automate process adding microorganisms: Method 1: Using package option AMR_custom_mo, preferred method. use method: Create data set structure microorganisms data set (containing least column \"genus\") save saveRDS() location choice, e.g. \"~/my_custom_mo.rds\", remote location. Set file location package option AMR_custom_mo: options(AMR_custom_mo = \"~/my_custom_mo.rds\"). can even remote file location, https URL. Since options saved R sessions, best save option .Rprofile file loaded start-R. , open .Rprofile file using e.g. utils::file.edit(\"~/.Rprofile\"), add text save file:   Upon package load, file loaded run add_custom_microorganisms() function. Method 2: Loading microorganism directly .Rprofile file. Note definitions stored user-specific R file, suboptimal workflow. use method: Edit .Rprofile file using e.g. utils::file.edit(\"~/.Rprofile\"). Add text like save file:   Use clear_custom_microorganisms() clear previously added microorganisms.","code":"# Add custom microorganism codes: options(AMR_custom_mo = \"~/my_custom_mo.rds\") # Add custom antibiotic drug codes:  AMR::add_custom_microorganisms(    data.frame(genus = \"Enterobacter\",               species = \"asburiae/cloacae\")  )"},{"path":[]},{"path":"https://amr-for-r.org/reference/add_custom_microorganisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Custom Microorganisms — add_custom_microorganisms","text":"","code":"# \\donttest{ # a combination of species is not formal taxonomy, so # this will result in \"Enterobacter cloacae cloacae\", # since it resembles the input best: mo_name(\"Enterobacter asburiae/cloacae\") #> [1] \"Enterobacter asburiae\"  # now add a custom entry - it will be considered by as.mo() and # all mo_*() functions add_custom_microorganisms(   data.frame(     genus = \"Enterobacter\",     species = \"asburiae/cloacae\"   ) ) #> ℹ Added Enterobacter asburiae/cloacae to the internal microorganisms data #>   set.  # E. asburiae/cloacae is now a new microorganism: mo_name(\"Enterobacter asburiae/cloacae\") #> [1] \"Enterobacter asburiae/cloacae\"  # its code: as.mo(\"Enterobacter asburiae/cloacae\") #> Class 'mo' #> [1] CUSTOM1_ENTRB_ASB/  # all internal algorithms will work as well: mo_name(\"Ent asburia cloacae\") #> [1] \"Enterobacter asburiae/cloacae\"  # and even the taxonomy was added based on the genus! mo_family(\"E. asburiae/cloacae\") #> [1] \"Enterobacteriaceae\" mo_gramstain(\"Enterobacter asburiae/cloacae\") #> [1] \"Gram-negative\"  mo_info(\"Enterobacter asburiae/cloacae\") #> $mo #> [1] \"CUSTOM1_ENTRB_ASB/\" #>  #> $rank #> [1] \"species\" #>  #> $kingdom #> [1] \"Bacteria\" #>  #> $phylum #> [1] \"Pseudomonadota\" #>  #> $class #> [1] \"Gammaproteobacteria\" #>  #> $order #> [1] \"Enterobacterales\" #>  #> $family #> [1] \"Enterobacteriaceae\" #>  #> $genus #> [1] \"Enterobacter\" #>  #> $species #> [1] \"asburiae/cloacae\" #>  #> $subspecies #> [1] \"\" #>  #> $status #> [1] \"accepted\" #>  #> $synonyms #> NULL #>  #> $gramstain #> [1] \"Gram-negative\" #>  #> $oxygen_tolerance #> [1] NA #>  #> $url #> [1] \"\" #>  #> $ref #> [1] \"Self-added, 2025\" #>  #> $snomed #> [1] NA #>  #> $lpsn #> [1] NA #>  #> $mycobank #> [1] NA #>  #> $gbif #> [1] NA #>  #> $group_members #> character(0) #>    # the function tries to be forgiving: add_custom_microorganisms(   data.frame(     GENUS = \"BACTEROIDES / PARABACTEROIDES SLASHLINE\",     SPECIES = \"SPECIES\"   ) ) #> ℹ Added Bacteroides/Parabacteroides to the internal microorganisms data #>   set. mo_name(\"BACTEROIDES / PARABACTEROIDES\") #> [1] \"Bacteroides/Parabacteroides\" mo_rank(\"BACTEROIDES / PARABACTEROIDES\") #> [1] \"genus\"  # taxonomy still works, even though a slashline genus was given as input: mo_family(\"Bacteroides/Parabacteroides\") #> [1] \"Bacteroidaceae\"   # for groups and complexes, set them as species or subspecies: add_custom_microorganisms(   data.frame(     genus = \"Citrobacter\",     species = c(\"freundii\", \"braakii complex\"),     subspecies = c(\"complex\", \"\")   ) ) #> ℹ Added Citrobacter braakii complex and Citrobacter freundii complex to the #>   internal microorganisms data set. mo_name(c(\"C. freundii complex\", \"C. braakii complex\")) #> [1] \"Citrobacter freundii complex\" \"Citrobacter braakii complex\"  mo_species(c(\"C. freundii complex\", \"C. braakii complex\")) #> [1] \"freundii complex\" \"braakii complex\"  mo_gramstain(c(\"C. freundii complex\", \"C. braakii complex\")) #> [1] \"Gram-negative\" \"Gram-negative\" # }"},{"path":"https://amr-for-r.org/reference/age.html","id":null,"dir":"Reference","previous_headings":"","what":"Age in Years of Individuals — age","title":"Age in Years of Individuals — age","text":"Calculates age years based reference date, system date default.","code":""},{"path":"https://amr-for-r.org/reference/age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age in Years of Individuals — age","text":"","code":"age(x, reference = Sys.Date(), exact = FALSE, na.rm = FALSE, ...)"},{"path":"https://amr-for-r.org/reference/age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age in Years of Individuals — age","text":"x Date(s), character (vectors) coerced .POSIXlt(). reference Reference date(s) (default today), character (vectors) coerced .POSIXlt(). exact logical indicate whether age calculation exact, .e. decimals. divides number days year--date (YTD) x number days year reference (either 365 366). na.rm logical indicate whether missing values removed. ... Arguments passed .POSIXlt(), origin.","code":""},{"path":"https://amr-for-r.org/reference/age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age in Years of Individuals — age","text":"integer (decimals) exact = FALSE, double (decimals) otherwise","code":""},{"path":"https://amr-for-r.org/reference/age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Age in Years of Individuals — age","text":"Ages 0 returned NA warning. Ages 120 give warning. function vectorises x reference, meaning either can length 1 argument larger length.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age in Years of Individuals — age","text":"","code":"# 10 random pre-Y2K birth dates df <- data.frame(birth_date = as.Date(\"2000-01-01\") - runif(10) * 25000)  # add ages df$age <- age(df$birth_date)  # add exact ages df$age_exact <- age(df$birth_date, exact = TRUE)  # add age at millenium switch df$age_at_y2k <- age(df$birth_date, \"2000-01-01\")  df #>    birth_date age age_exact age_at_y2k #> 1  1980-02-27  45  45.38356         19 #> 2  1953-07-26  71  71.97534         46 #> 3  1949-09-02  75  75.87123         50 #> 4  1986-08-03  38  38.95342         13 #> 5  1932-11-19  92  92.65753         67 #> 6  1949-03-30  76  76.29863         50 #> 7  1996-06-23  29  29.06575          3 #> 8  1963-09-16  61  61.83288         36 #> 9  1952-05-16  73  73.16986         47 #> 10 1952-11-14  72  72.67123         47"},{"path":"https://amr-for-r.org/reference/age_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Ages into Age Groups — age_groups","title":"Split Ages into Age Groups — age_groups","text":"Split ages age groups defined split argument. allows easier demographic (antimicrobial resistance) analysis.","code":""},{"path":"https://amr-for-r.org/reference/age_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Ages into Age Groups — age_groups","text":"","code":"age_groups(x, split_at = c(12, 25, 55, 75), na.rm = FALSE)"},{"path":"https://amr-for-r.org/reference/age_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Ages into Age Groups — age_groups","text":"x Age, e.g. calculated age(). split_at Values split x - default age groups 0-11, 12-24, 25-54, 55-74 75+. See Details. na.rm logical indicate whether missing values removed.","code":""},{"path":"https://amr-for-r.org/reference/age_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Ages into Age Groups — age_groups","text":"Ordered factor","code":""},{"path":"https://amr-for-r.org/reference/age_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Ages into Age Groups — age_groups","text":"split ages, input split_at argument can : numeric vector. value e.g. c(10, 20) split x 0-9, 10-19 20+. value 50 split x 0-49 50+. default split young children (0-11), youth (12-24), young adults (25-54), middle-aged adults (55-74) elderly (75+). character: \"children\" \"kids\", equivalent : c(0, 1, 2, 4, 6, 13, 18). split 0, 1, 2-3, 4-5, 6-12, 13-17 18+. \"elderly\" \"seniors\", equivalent : c(65, 75, 85). split 0-64, 65-74, 75-84, 85+. \"fives\", equivalent : 1:20 * 5. split 0-4, 5-9, ..., 95-99, 100+. \"tens\", equivalent : 1:10 * 10. split 0-9, 10-19, ..., 90-99, 100+.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/age_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Ages into Age Groups — age_groups","text":"","code":"ages <- c(3, 8, 16, 54, 31, 76, 101, 43, 21)  # split into 0-49 and 50+ age_groups(ages, 50) #> [1] 0-49 0-49 0-49 50+  0-49 50+  50+  0-49 0-49 #> Levels: 0-49 < 50+  # split into 0-19, 20-49 and 50+ age_groups(ages, c(20, 50)) #> [1] 0-19  0-19  0-19  50+   20-49 50+   50+   20-49 20-49 #> Levels: 0-19 < 20-49 < 50+  # split into groups of ten years age_groups(ages, 1:10 * 10) #> [1] 0-9   0-9   10-19 50-59 30-39 70-79 100+  40-49 20-29 #> 11 Levels: 0-9 < 10-19 < 20-29 < 30-39 < 40-49 < 50-59 < 60-69 < ... < 100+ age_groups(ages, split_at = \"tens\") #> [1] 0-9   0-9   10-19 50-59 30-39 70-79 100+  40-49 20-29 #> 11 Levels: 0-9 < 10-19 < 20-29 < 30-39 < 40-49 < 50-59 < 60-69 < ... < 100+  # split into groups of five years age_groups(ages, 1:20 * 5) #> [1] 0-4   5-9   15-19 50-54 30-34 75-79 100+  40-44 20-24 #> 21 Levels: 0-4 < 5-9 < 10-14 < 15-19 < 20-24 < 25-29 < 30-34 < ... < 100+ age_groups(ages, split_at = \"fives\") #> [1] 0-4   5-9   15-19 50-54 30-34 75-79 100+  40-44 20-24 #> 21 Levels: 0-4 < 5-9 < 10-14 < 15-19 < 20-24 < 25-29 < 30-34 < ... < 100+  # split specifically for children age_groups(ages, c(1, 2, 4, 6, 13, 18)) #> [1] 2-3   6-12  13-17 18+   18+   18+   18+   18+   18+   #> Levels: 0 < 1 < 2-3 < 4-5 < 6-12 < 13-17 < 18+ age_groups(ages, \"children\") #> [1] 2-3   6-12  13-17 18+   18+   18+   18+   18+   18+   #> Levels: 0 < 1 < 2-3 < 4-5 < 6-12 < 13-17 < 18+  # \\donttest{ # resistance of ciprofloxacin per age group if (require(\"dplyr\") && require(\"ggplot2\")) {   example_isolates %>%     filter_first_isolate() %>%     filter(mo == as.mo(\"Escherichia coli\")) %>%     group_by(age_group = age_groups(age)) %>%     select(age_group, CIP) %>%     ggplot_sir(       x = \"age_group\",       minimum = 0,       x.title = \"Age Group\",       title = \"Ciprofloxacin resistance per age group\"     ) } #> Loading required package: ggplot2  # }"},{"path":"https://amr-for-r.org/reference/amr-tidymodels.html","id":null,"dir":"Reference","previous_headings":"","what":"AMR Extensions for Tidymodels — amr-tidymodels","title":"AMR Extensions for Tidymodels — amr-tidymodels","text":"family functions allows using AMR-specific data types <mic> <sir> inside tidymodels pipelines.","code":""},{"path":"https://amr-for-r.org/reference/amr-tidymodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AMR Extensions for Tidymodels — amr-tidymodels","text":"","code":"all_mic()  all_mic_predictors()  all_sir()  all_sir_predictors()  step_mic_log2(recipe, ..., role = NA, trained = FALSE, columns = NULL,   skip = FALSE, id = recipes::rand_id(\"mic_log2\"))  step_sir_numeric(recipe, ..., role = NA, trained = FALSE, columns = NULL,   skip = FALSE, id = recipes::rand_id(\"sir_numeric\"))"},{"path":"https://amr-for-r.org/reference/amr-tidymodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AMR Extensions for Tidymodels — amr-tidymodels","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://amr-for-r.org/reference/amr-tidymodels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AMR Extensions for Tidymodels — amr-tidymodels","text":"can read online AMR tidymodels introduction. Tidyselect helpers include: all_mic() all_mic_predictors() select <mic> columns all_sir() all_sir_predictors() select <sir> columns Pre-processing pipeline steps include: step_mic_log2() convert MIC columns numeric (via .numeric()) apply log2 transform, used all_mic_predictors() step_sir_numeric() convert SIR columns numeric (via .numeric()), used all_sir_predictors(): \"S\" = 1, \"\"/\"SDD\" = 2, \"R\" = 3. values rendered NA. Keep mind processing, especially model allow NA values. steps integrate recipes::recipe() work like standard preprocessing steps. useful preparing data modelling, especially classification models.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/amr-tidymodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AMR Extensions for Tidymodels — amr-tidymodels","text":"","code":"library(tidymodels) #> ── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ── #> ✔ broom        1.0.8     ✔ rsample      1.3.0 #> ✔ dials        1.4.0     ✔ tibble       3.3.0 #> ✔ infer        1.0.9     ✔ tidyr        1.3.1 #> ✔ modeldata    1.4.0     ✔ tune         1.3.0 #> ✔ parsnip      1.3.2     ✔ workflows    1.2.0 #> ✔ purrr        1.1.0     ✔ workflowsets 1.1.1 #> ✔ recipes      1.3.1     ✔ yardstick    1.3.2 #> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── #> ✖ purrr::discard() masks scales::discard() #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ recipes::step()  masks stats::step()  # The below approach formed the basis for this paper: DOI 10.3389/fmicb.2025.1582703 # Presence of ESBL genes was predicted based on raw MIC values.   # example data set in the AMR package esbl_isolates #> # A tibble: 500 × 19 #>    esbl  genus   AMC   AMP   TZP   CXM   FOX   CTX   CAZ   GEN   TOB   TMP   SXT #>    <lgl> <chr> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> #>  1 FALSE Esch…    32    32     4    64    64  8.00  8.00     1     1  16.0    20 #>  2 FALSE Esch…    32    32     4    64    64  4.00  8.00     1     1  16.0   320 #>  3 FALSE Esch…     4     2    64     8     4  8.00  0.12    16    16   0.5    20 #>  4 FALSE Kleb…    32    32    16    64    64  8.00  8.00     1     1   0.5    20 #>  5 FALSE Esch…    32    32     4     4     4  0.25  2.00     1     1  16.0   320 #>  6 FALSE Citr…    32    32    16    64    64 64.00 32.00     1     1   0.5    20 #>  7 FALSE Morg…    32    32     4    64    64 16.00  2.00     1     1   0.5    20 #>  8 FALSE Prot…    16    32     4     1     4  8.00  0.12     1     1  16.0   320 #>  9 FALSE Ente…    32    32     8    64    64 32.00  4.00     1     1   0.5    20 #> 10 FALSE Citr…    32    32    32    64    64  8.00 64.00     1     1  16.0   320 #> # ℹ 490 more rows #> # ℹ 6 more variables: NIT <mic>, FOS <mic>, CIP <mic>, IPM <mic>, MEM <mic>, #> #   COL <mic>  # Prepare a binary outcome and convert to ordered factor data <- esbl_isolates %>%   mutate(esbl = factor(esbl, levels = c(FALSE, TRUE), ordered = TRUE))  # Split into training and testing sets split <- initial_split(data) training_data <- training(split) testing_data <- testing(split)  # Create and prep a recipe with MIC log2 transformation mic_recipe <- recipe(esbl ~ ., data = training_data) %>%   # Optionally remove non-predictive variables   remove_role(genus, old_role = \"predictor\") %>%   # Apply the log2 transformation to all MIC predictors   step_mic_log2(all_mic_predictors()) %>%   prep()  # View prepped recipe mic_recipe #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs  #> Number of variables by role #> outcome:          1 #> predictor:       17 #> undeclared role:  1 #>  #> ── Training information  #> Training data contained 375 data points and no incomplete rows. #>  #> ── Operations  #> • Log2 transformation of MIC columns: AMC, AMP, TZP, CXM, FOX, ... | Trained  # Apply the recipe to training and testing data out_training <- bake(mic_recipe, new_data = NULL) out_testing <- bake(mic_recipe, new_data = testing_data)  # Fit a logistic regression model fitted <- logistic_reg(mode = \"classification\") %>%   set_engine(\"glm\") %>%   fit(esbl ~ ., data = out_training) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  # Generate predictions on the test set predictions <- predict(fitted, out_testing) %>%   bind_cols(out_testing)  # Evaluate predictions using standard classification metrics our_metrics <- metric_set(accuracy, kap, ppv, npv) metrics <- our_metrics(predictions, truth = esbl, estimate = .pred_class)  # Show performance: # - negative predictive value (NPV) of ~98% # - positive predictive value (PPV) of ~94% metrics #> # A tibble: 4 × 3 #>   .metric  .estimator .estimate #>   <chr>    <chr>          <dbl> #> 1 accuracy binary         0.936 #> 2 kap      binary         0.872 #> 3 ppv      binary         0.925 #> 4 npv      binary         0.948"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"Create detailed antibiograms options traditional, combination, syndromic, Bayesian WISCA methods. Adhering previously described approaches (see Source) especially Bayesian WISCA model (Weighted-Incidence Syndromic Combination Antibiogram) Bielicki et al., functions provide flexible output formats including plots tables, ideal integration R Markdown Quarto reports.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"","code":"antibiogram(x, antimicrobials = where(is.sir), mo_transform = \"shortname\",   ab_transform = \"name\", syndromic_group = NULL, add_total_n = FALSE,   only_all_tested = FALSE, digits = ifelse(wisca, 1, 0),   formatting_type = getOption(\"AMR_antibiogram_formatting_type\",   ifelse(wisca, 14, 18)), col_mo = NULL, language = get_AMR_locale(),   minimum = 30, combine_SI = TRUE, sep = \" + \", sort_columns = TRUE,   wisca = FALSE, simulations = 1000, conf_interval = 0.95,   interval_side = \"two-tailed\", info = interactive(), ...)  wisca(x, antimicrobials = where(is.sir), ab_transform = \"name\",   syndromic_group = NULL, only_all_tested = FALSE, digits = 1,   formatting_type = getOption(\"AMR_antibiogram_formatting_type\", 14),   col_mo = NULL, language = get_AMR_locale(), combine_SI = TRUE,   sep = \" + \", sort_columns = TRUE, simulations = 1000,   conf_interval = 0.95, interval_side = \"two-tailed\",   info = interactive(), ...)  retrieve_wisca_parameters(wisca_model, ...)  # S3 method for class 'antibiogram' plot(x, ...)  # S3 method for class 'antibiogram' autoplot(object, ...)  # S3 method for class 'antibiogram' knit_print(x, italicise = TRUE,   na = getOption(\"knitr.kable.NA\", default = \"\"), ...)"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"Bielicki JA et al. (2016). Selecting appropriate empirical antibiotic regimens paediatric bloodstream infections: application Bayesian decision model local pooled antimicrobial resistance surveillance data Journal Antimicrobial Chemotherapy 71(3); doi:10.1093/jac/dkv397 Bielicki JA et al. (2020). Evaluation coverage 3 antibiotic regimens neonatal sepsis hospital setting across Asian countries JAMA Netw Open. 3(2):e1921124; doi:10.1001/jamanetworkopen.2019.21124 Klinker KP et al. (2021). Antimicrobial stewardship antibiograms: importance moving beyond traditional antibiograms. Therapeutic Advances Infectious Disease, May 5;8:20499361211011373; doi:10.1177/20499361211011373 Barbieri E et al. (2021). Development Weighted-Incidence Syndromic Combination Antibiogram (WISCA) guide choice empiric antibiotic treatment urinary tract infection paediatric patients: Bayesian approach Antimicrobial Resistance & Infection Control May 1;10(1):74; doi:10.1186/s13756-021-00939-2 M39 Analysis Presentation Cumulative Antimicrobial Susceptibility Test Data, 5th Edition, 2022, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/microbiology/documents/m39/.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"x data.frame containing least column microorganisms columns antimicrobial results (class 'sir', see .sir()). antimicrobials vector specifying antimicrobials containing SIR values include antibiogram (see Examples). evaluated using guess_ab_col(). can : antimicrobial name code match (see guess_ab_col()) column x antimicrobial selector, aminoglycosides() carbapenems() combination , using c(), e.g.: c(aminoglycosides(), \"AMP\", \"AMC\") c(aminoglycosides(), carbapenems()) Column indices using numbers Combination therapy, indicated using \"+\", without antimicrobial selectors, e.g.: \"cipro + genta\" \"TZP+TOB\" c(\"TZP\", \"TZP+GEN\", \"TZP+TOB\") carbapenems() + \"GEN\" carbapenems() + c(\"\", \"GEN\") carbapenems() + c(\"\", aminoglycosides()) mo_transform character transform microorganism input - must \"name\", \"shortname\" (default), \"gramstain\", one column names microorganisms data set: \"mo\", \"fullname\", \"status\", \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\", \"subspecies\", \"rank\", \"ref\", \"oxygen_tolerance\", \"source\", \"lpsn\", \"lpsn_parent\", \"lpsn_renamed_to\", \"mycobank\", \"mycobank_parent\", \"mycobank_renamed_to\", \"gbif\", \"gbif_parent\", \"gbif_renamed_to\", \"prevalence\", \"snomed\". Can also NULL transform input NA consider microorganisms 'unknown'. ab_transform character transform antimicrobial input - must one column names antimicrobials data set (defaults \"name\"): \"ab\", \"cid\", \"name\", \"group\", \"atc\", \"atc_group1\", \"atc_group2\", \"abbreviations\", \"synonyms\", \"oral_ddd\", \"oral_units\", \"iv_ddd\", \"iv_units\", \"loinc\". Can also NULL transform input. syndromic_group column name x, values calculated split rows x, e.g. using ifelse() case_when(). See Examples. add_total_n (deprecated favour formatting_type) logical indicate whether n_tested available numbers per pathogen added table (default TRUE). add lowest highest number available isolates per antimicrobial (e.g, E. coli 200 isolates available ciprofloxacin 150 amoxicillin, returned number \"150-200\"). option unavailable wisca = TRUE; case, use retrieve_wisca_parameters() get parameters used WISCA. only_all_tested (combination antibiograms): logical indicate isolates must tested antimicrobials, see Details. digits Number digits use rounding antimicrobial coverage, defaults 1 WISCA 0 otherwise. formatting_type Numeric value (1–22 WISCA, 1-12 non-WISCA) indicating 'cells' antibiogram table formatted. See Details > Formatting Type list options. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). language Language translate text, defaults system language (see get_AMR_locale()). minimum minimum allowed number available (tested) isolates. isolate count lower minimum return NA warning. default number 30 isolates advised Clinical Laboratory Standards Institute (CLSI) best practice, see Source. combine_SI logical indicate whether susceptibility determined results either S, SDD, , instead S (default TRUE). sep separating character antimicrobial columns combination antibiograms. sort_columns logical indicate whether antimicrobial columns must sorted name. wisca logical indicate whether Weighted-Incidence Syndromic Combination Antibiogram (WISCA) must generated (default FALSE). use Bayesian decision model estimate regimen coverage probabilities using Monte Carlo simulations. Set simulations, conf_interval, interval_side adjust. simulations (WISCA) numerical value set number Monte Carlo simulations. conf_interval numerical value set confidence interval (default 0.95). interval_side side confidence interval, either \"two-tailed\" (default), \"left\" \"right\". info logical indicate info printed - default TRUE interactive mode. ... used R Markdown Quarto: arguments passed knitr::kable() (otherwise, use). wisca_model outcome wisca() antibiogram(..., wisca = TRUE). object antibiogram() object. italicise logical indicate whether microorganism names knitr table made italic, using italicise_taxonomy(). na Character use showing NA values.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"functions return table values 0 100 susceptibility, resistance. Remember filter data let contain first isolates! needed exclude duplicates reduce selection bias. Use first_isolate() determine one four available algorithms: isolate-based, patient-based, episode-based, phenotype-based. estimating antimicrobial coverage, especially creating WISCA, outcome might become reliable including top n species encountered data. can filter top n using top_n_microorganisms(). example, use top_n_microorganisms(your_data, n = 10) pre-processing step include top 10 species data. numeric values antibiogram stored long format attribute long_numeric. can retrieve using attributes(x)$long_numeric, x outcome antibiogram() wisca(). ideal e.g. advanced plotting.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"formatting-type","dir":"Reference","previous_headings":"","what":"Formatting Type","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"formatting 'cells' table can set argument formatting_type. examples, 5 indicates antimicrobial coverage (4-6 confidence level), 15 number susceptible isolates, 300 number tested (.e., available) isolates: 5 15 300 15/300 5 (300) 5% (300) 5 (N=300) 5% (N=300) 5 (15/300) 5% (15/300) 5 (N=15/300) 5% (N=15/300) 5 (4-6) 5% (4-6%) - default WISCA 5 (4-6,300) 5% (4-6%,300) 5 (4-6,N=300) 5% (4-6%,N=300) - default non-WISCA 5 (4-6,15/300) 5% (4-6%,15/300) 5 (4-6,N=15/300) 5% (4-6%,N=15/300) default can set globally package option AMR_antibiogram_formatting_type, e.g. options(AMR_antibiogram_formatting_type = 5). note WISCA, total numbers tested susceptible isolates less useful report, since included Bayesian model apparent susceptibility confidence level. Set digits (defaults 0) alter rounding susceptibility percentages.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"antibiogram-types","dir":"Reference","previous_headings":"","what":"Antibiogram Types","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"various antibiogram types, summarised Klinker et al. (2021, doi:10.1177/20499361211011373 ), supported antibiogram(). clinical coverage estimations, use WISCA whenever possible, since provides precise coverage estimates accounting pathogen incidence antimicrobial susceptibility, shown Bielicki et al. (2020, doi:10.1001/jamanetworkopen.2019.21124 ). See section Explaining WISCA page. note WISCA pathogen-agnostic, meaning outcome stratied pathogen, rather syndrome. Traditional Antibiogram Case example: Susceptibility Pseudomonas aeruginosa piperacillin/tazobactam (TZP) Code example:   Combination Antibiogram Case example: Additional susceptibility Pseudomonas aeruginosa TZP + tobramycin versus TZP alone Code example:   Syndromic Antibiogram Case example: Susceptibility Pseudomonas aeruginosa TZP among respiratory specimens (obtained among ICU patients ) Code example:   Weighted-Incidence Syndromic Combination Antibiogram (WISCA) WISCA can applied antibiogram, see section Explaining WISCA page information. Code example:   WISCA uses sophisticated Bayesian decision model combine local pooled antimicrobial resistance data. approach evaluates local patterns can also draw multi-centre datasets improve regimen accuracy, even low-incidence infections like paediatric bloodstream infections (BSIs).","code":"antibiogram(your_data,             antimicrobials = \"TZP\") antibiogram(your_data,             antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\")) antibiogram(your_data,             antimicrobials = penicillins(),             syndromic_group = \"ward\") antibiogram(your_data,             antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),             wisca = TRUE)  # this is equal to: wisca(your_data,       antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"))"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"grouped-tibbles","dir":"Reference","previous_headings":"","what":"Grouped tibbles","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"type antibiogram, grouped tibbles can also used calculate susceptibilities various groups. Code example:","code":"library(dplyr) your_data %>%   group_by(has_sepsis, is_neonate, sex) %>%   wisca(antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"))"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"stepped-approach-for-clinical-insight","dir":"Reference","previous_headings":"","what":"Stepped Approach for Clinical Insight","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"clinical practice, antimicrobial coverage decisions evolve microbiological data becomes available. theoretical stepped approach ensures empirical coverage can continuously assessed improve patient outcomes: Initial Empirical Therapy (Admission / Pre-Culture Data) admission, pathogen information available. Action: broad-spectrum coverage based local resistance patterns syndromic antibiograms. Using pathogen-agnostic yet incidence-weighted WISCA preferred. Code example:   Refinement Gram Stain Results blood culture becomes positive, Gram stain provides initial crucial first stratification (Gram-positive vs. Gram-negative). Action: narrow coverage based Gram stain-specific resistance patterns. Code example:   Definitive Therapy Based Species Identification cultivation pathogen, full pathogen identification allows precise targeting therapy. Action: adjust treatment pathogen-specific antibiograms, minimizing resistance risks. Code example:   structuring antibiograms around stepped approach, clinicians can make data-driven adjustments stage, ensuring optimal empirical targeted therapy reducing unnecessary broad-spectrum antimicrobial use.","code":"antibiogram(your_data,             antimicrobials = selected_regimens,             mo_transform = NA) # all pathogens set to `NA`  # preferred: use WISCA wisca(your_data,       antimicrobials = selected_regimens) antibiogram(your_data,             antimicrobials = selected_regimens,             mo_transform = \"gramstain\") # all pathogens set to Gram-pos/Gram-neg antibiogram(your_data,             antimicrobials = selected_regimens,             mo_transform = \"shortname\") # all pathogens set to 'G. species', e.g., E. coli"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"inclusion-in-combination-antibiograms","dir":"Reference","previous_headings":"","what":"Inclusion in Combination Antibiograms","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"Note combination antibiograms, important realise susceptibility can calculated two ways, can set only_all_tested argument (default FALSE). See example two antimicrobials, Drug Drug B, antibiogram() works calculate %SI:","code":"--------------------------------------------------------------------                     only_all_tested = FALSE  only_all_tested = TRUE                     -----------------------  -----------------------  Drug A    Drug B   considered   considered  considered   considered                     susceptible    tested    susceptible    tested --------  --------  -----------  ----------  -----------  ----------  S or I    S or I        X            X           X            X    R       S or I        X            X           X            X   <NA>     S or I        X            X           -            -  S or I      R           X            X           X            X    R         R           -            X           -            X   <NA>       R           -            -           -            -  S or I     <NA>         X            X           -            -    R        <NA>         -            -           -            -   <NA>      <NA>         -            -           -            - --------------------------------------------------------------------"},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"plotting","dir":"Reference","previous_headings":"","what":"Plotting","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"types antibiograms listed can plotted (using ggplot2::autoplot() base R's plot() barplot()). mentioned , numeric values antibiogram stored long format attribute long_numeric. can retrieve using attributes(x)$long_numeric, x outcome antibiogram() wisca(). outcome antibiogram() can also used directly R Markdown / Quarto (.e., knitr) reports. case, knitr::kable() applied automatically microorganism names even printed italics default (see argument italicise). can also use functions specific 'table reporting' packages transform output antibiogram() needs, e.g. flextable::as_flextable() gt::gt().","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"explaining-wisca","dir":"Reference","previous_headings":"","what":"Explaining WISCA","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"WISCA (Weighted-Incidence Syndromic Combination Antibiogram) estimates probability empirical coverage combination regimens. weights susceptibility pathogen prevalence within clinical syndrome provides credible intervals around expected coverage. background, interpretation, examples, see WISCA vignette.","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"Implementation: Dr. Larisse Bolton Dr. Matthijs Berends","code":""},{"path":"https://amr-for-r.org/reference/antibiogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Traditional, Combination, Syndromic, or WISCA Antibiograms — antibiogram","text":"","code":"# example_isolates is a data set available in the AMR package. # run ?example_isolates for more info. example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # \\donttest{ # Traditional antibiogram ----------------------------------------------  antibiogram(example_isolates,   antimicrobials = c(aminoglycosides(), carbapenems()) ) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # An Antibiogram: 10 × 7 #> # Type:           Non-WISCA with 95% CI #>    Pathogen       Amikacin    Gentamicin Imipenem Kanamycin Meropenem Tobramycin #>    <chr>          <chr>       <chr>      <chr>    <chr>     <chr>     <chr>      #>  1 CoNS           0% (0-8%,N… 86% (82-9… 52% (37… 0% (0-8%… 52% (37-… 22% (12-3… #>  2 E. coli        100% (98-1… 98% (96-9… 100% (9… NA        100% (99… 97% (96-9… #>  3 E. faecalis    0% (0-9%,N… 0% (0-9%,… 100% (9… 0% (0-9%… NA        0% (0-9%,… #>  4 K. pneumoniae  NA          90% (79-9… 100% (9… NA        100% (93… 90% (79-9… #>  5 P. aeruginosa  NA          100% (88-… NA       0% (0-12… NA        100% (88-… #>  6 P. mirabilis   NA          94% (80-9… 94% (79… NA        NA        94% (80-9… #>  7 S. aureus      NA          99% (97-1… NA       NA        NA        98% (92-1… #>  8 S. epidermidis 0% (0-8%,N… 79% (71-8… NA       0% (0-8%… NA        51% (40-6… #>  9 S. hominis     NA          92% (84-9… NA       NA        NA        85% (74-9… #> 10 S. pneumoniae  0% (0-3%,N… 0% (0-3%,… NA       0% (0-3%… NA        0% (0-3%,… #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram  antibiogram(example_isolates,   antimicrobials = aminoglycosides(),   ab_transform = \"atc\",   mo_transform = \"gramstain\" ) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> # An Antibiogram: 2 × 5 #> # Type:           Non-WISCA with 95% CI #>   Pathogen      J01GB01            J01GB03             J01GB04         J01GB06   #>   <chr>         <chr>              <chr>               <chr>           <chr>     #> 1 Gram-negative 96% (94-97%,N=686) 96% (95-98%,N=684)  0% (0-10%,N=35) 98% (96-… #> 2 Gram-positive 34% (31-38%,N=665) 63% (60-66%,N=1170) 0% (0-1%,N=436) 0% (0-1%… #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram  antibiogram(example_isolates,   antimicrobials = carbapenems(),   ab_transform = \"name\",   mo_transform = \"name\" ) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # An Antibiogram: 5 × 3 #> # Type:           Non-WISCA with 95% CI #>   Pathogen                                 Imipenem             Meropenem        #>   <chr>                                    <chr>                <chr>            #> 1 Coagulase-negative Staphylococcus (CoNS) 52% (37-67%,N=48)    52% (37-67%,N=4… #> 2 Enterococcus faecalis                    100% (91-100%,N=38)  NA               #> 3 Escherichia coli                         100% (99-100%,N=422) 100% (99-100%,N… #> 4 Klebsiella pneumoniae                    100% (93-100%,N=51)  100% (93-100%,N… #> 5 Proteus mirabilis                        94% (79-99%,N=32)    NA               #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram   # Combined antibiogram -------------------------------------------------  # combined antimicrobials yield higher empiric coverage antibiogram(example_isolates,   antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),   mo_transform = \"gramstain\" ) #> # An Antibiogram: 2 × 4 #> # Type:           Non-WISCA with 95% CI #>   Pathogen  Piperacillin/tazobac…¹ Piperacillin/tazobac…² Piperacillin/tazobac…³ #>   <chr>     <chr>                  <chr>                  <chr>                  #> 1 Gram-neg… 88% (85-91%,N=641)     99% (97-99%,N=691)     98% (97-99%,N=693)     #> 2 Gram-pos… 86% (82-89%,N=345)     98% (96-98%,N=1044)    95% (93-97%,N=550)     #> # ℹ abbreviated names: ¹​`Piperacillin/tazobactam`, #> #   ²​`Piperacillin/tazobactam + Gentamicin`, #> #   ³​`Piperacillin/tazobactam + Tobramycin` #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram  # you can use any antimicrobial selector with `+` too: antibiogram(example_isolates,   antimicrobials = ureidopenicillins() + c(\"\", \"GEN\", \"tobra\"),   mo_transform = \"gramstain\" ) #> ℹ For ureidopenicillins() using column 'TZP' (piperacillin/tazobactam) #> # An Antibiogram: 2 × 4 #> # Type:           Non-WISCA with 95% CI #>   Pathogen  Piperacillin/tazobac…¹ Piperacillin/tazobac…² Piperacillin/tazobac…³ #>   <chr>     <chr>                  <chr>                  <chr>                  #> 1 Gram-neg… 88% (85-91%,N=641)     99% (97-99%,N=691)     98% (97-99%,N=693)     #> 2 Gram-pos… 86% (82-89%,N=345)     98% (96-98%,N=1044)    95% (93-97%,N=550)     #> # ℹ abbreviated names: ¹​`Piperacillin/tazobactam`, #> #   ²​`Piperacillin/tazobactam + Gentamicin`, #> #   ³​`Piperacillin/tazobactam + Tobramycin` #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram  # names of antimicrobials do not need to resemble columns exactly: antibiogram(example_isolates,   antimicrobials = c(\"Cipro\", \"cipro + genta\"),   mo_transform = \"gramstain\",   ab_transform = \"name\",   sep = \" & \" ) #> # An Antibiogram: 2 × 3 #> # Type:           Non-WISCA with 95% CI #>   Pathogen      Ciprofloxacin      `Ciprofloxacin & Gentamicin` #>   <chr>         <chr>              <chr>                        #> 1 Gram-negative 91% (88-93%,N=684) 99% (97-99%,N=694)           #> 2 Gram-positive 77% (74-80%,N=724) 93% (91-94%,N=847)           #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram   # Syndromic antibiogram ------------------------------------------------  # the data set could contain a filter for e.g. respiratory specimens antibiogram(example_isolates,   antimicrobials = c(aminoglycosides(), carbapenems()),   syndromic_group = \"ward\" ) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # An Antibiogram: 14 × 8 #> # Type:           Non-WISCA with 95% CI #>    `Syndromic Group` Pathogen   Amikacin Gentamicin Imipenem Kanamycin Meropenem #>    <chr>             <chr>      <chr>    <chr>      <chr>    <chr>     <chr>     #>  1 Clinical          CoNS       NA       89% (84-9… 57% (39… NA        57% (39-… #>  2 ICU               CoNS       NA       79% (68-8… NA       NA        NA        #>  3 Outpatient        CoNS       NA       84% (66-9… NA       NA        NA        #>  4 Clinical          E. coli    100% (9… 98% (96-9… 100% (9… NA        100% (99… #>  5 ICU               E. coli    100% (9… 99% (95-1… 100% (9… NA        100% (97… #>  6 Clinical          K. pneumo… NA       92% (81-9… 100% (9… NA        100% (92… #>  7 Clinical          P. mirabi… NA       100% (88-… NA       NA        NA        #>  8 Clinical          S. aureus  NA       99% (95-1… NA       NA        NA        #>  9 ICU               S. aureus  NA       100% (95-… NA       NA        NA        #> 10 Clinical          S. epider… NA       82% (72-9… NA       NA        NA        #> 11 ICU               S. epider… NA       72% (60-8… NA       NA        NA        #> 12 Clinical          S. hominis NA       96% (85-9… NA       NA        NA        #> 13 Clinical          S. pneumo… 0% (0-5… 0% (0-5%,… NA       0% (0-5%… NA        #> 14 ICU               S. pneumo… 0% (0-1… 0% (0-12%… NA       0% (0-12… NA        #> # ℹ 1 more variable: Tobramycin <chr> #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram  # now define a data set with only E. coli ex1 <- example_isolates[which(mo_genus() == \"Escherichia\"), ] #> ℹ Using column 'mo' as input for mo_genus()  # with a custom language, though this will be determined automatically # (i.e., this table will be in Spanish on Spanish systems) antibiogram(ex1,   antimicrobials = aminoglycosides(),   ab_transform = \"name\",   syndromic_group = ifelse(ex1$ward == \"ICU\",     \"UCI\", \"No UCI\"   ),   language = \"es\" ) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> # An Antibiogram: 2 × 5 #> # Type:           Non-WISCA with 95% CI #>   `Grupo sindrómico` Patógeno Amikacina            Gentamicina       Tobramicina #>   <chr>              <chr>    <chr>                <chr>             <chr>       #> 1 No UCI             E. coli  100% (97-100%,N=119) 98% (96-99%,N=32… 98% (96-99… #> 2 UCI                E. coli  100% (93-100%,N=52)  99% (95-100%,N=1… 96% (92-99… #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram   # WISCA antibiogram ----------------------------------------------------  # WISCA are not stratified by species, but rather on syndromes antibiogram(example_isolates,   antimicrobials = c(\"TZP\", \"TZP+TOB\", \"TZP+GEN\"),   syndromic_group = \"ward\",   wisca = TRUE ) #> # An Antibiogram: 3 × 4 #> # Type:           WISCA with 95% CI #>   `Syndromic Group` `Piperacillin/tazobactam` Piperacillin/tazobactam + Gentam…¹ #>   <chr>             <chr>                     <chr>                              #> 1 Clinical          73.6% (68.3-78.8%)        92.3% (90.8-93.8%)                 #> 2 ICU               57.2% (49.8-65.1%)        84.9% (81.8-87.8%)                 #> 3 Outpatient        57.1% (47.2-66.8%)        74.4% (69-79.6%)                   #> # ℹ abbreviated name: ¹​`Piperacillin/tazobactam + Gentamicin` #> # ℹ 1 more variable: `Piperacillin/tazobactam + Tobramycin` <chr> #> # Use `ggplot2::autoplot()` or base R `plot()` to create a plot of this antibiogram, #> # or use it directly in R Markdown or https://quarto.org, see ?antibiogram   # Print the output for R Markdown / Quarto -----------------------------  ureido <- antibiogram(example_isolates,   antimicrobials = ureidopenicillins(),   syndromic_group = \"ward\",   wisca = TRUE ) #> ℹ For ureidopenicillins() using column 'TZP' (piperacillin/tazobactam)  # in an Rmd file, you would just need to return `ureido` in a chunk, # but to be explicit here: if (requireNamespace(\"knitr\")) {   cat(knitr::knit_print(ureido)) } #>  #>  #> |Syndromic Group |Piperacillin/tazobactam | #> |:---------------|:-----------------------| #> |Clinical        |73.4% (67.8-78.8%)      | #> |ICU             |57.2% (49.6-65.3%)      | #> |Outpatient      |56.9% (47.1-66.9%)      |   # Generate plots with ggplot2 or base R --------------------------------  ab1 <- antibiogram(example_isolates,   antimicrobials = c(\"AMC\", \"CIP\", \"TZP\", \"TZP+TOB\"),   mo_transform = \"gramstain\" ) ab2 <- antibiogram(example_isolates,   antimicrobials = c(\"AMC\", \"CIP\", \"TZP\", \"TZP+TOB\"),   mo_transform = \"gramstain\",   syndromic_group = \"ward\" )  if (requireNamespace(\"ggplot2\")) {   ggplot2::autoplot(ab1) }  if (requireNamespace(\"ggplot2\")) {   ggplot2::autoplot(ab2) }   plot(ab1)  plot(ab2)  # }"},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Antimicrobial Selectors — antimicrobial_selectors","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"functions allow filtering rows selecting columns based antimicrobial test results specific antimicrobial class group, without need define columns antimicrobial abbreviations. can used base R, tidyverse, tidymodels, data.table. Simply puy, column name resembles antimicrobial drug, picked functions matches pharmaceutical class, code name: column names \"cefazolin\", \"kefzol\", \"CZO\" \"J01DB04\" included following selection:","code":"library(dplyr) my_data_with_all_these_columns %>%   select(cephalosporins())"},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"","code":"aminoglycosides(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  aminopenicillins(only_sir_columns = FALSE, return_all = TRUE, ...)  antifungals(only_sir_columns = FALSE, return_all = TRUE, ...)  antimycobacterials(only_sir_columns = FALSE, return_all = TRUE, ...)  betalactams(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  betalactams_with_inhibitor(only_sir_columns = FALSE, return_all = TRUE,   ...)  carbapenems(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  cephalosporins(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  cephalosporins_1st(only_sir_columns = FALSE, return_all = TRUE, ...)  cephalosporins_2nd(only_sir_columns = FALSE, return_all = TRUE, ...)  cephalosporins_3rd(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  cephalosporins_4th(only_sir_columns = FALSE, return_all = TRUE, ...)  cephalosporins_5th(only_sir_columns = FALSE, return_all = TRUE, ...)  fluoroquinolones(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  glycopeptides(only_sir_columns = FALSE, return_all = TRUE, ...)  isoxazolylpenicillins(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  lincosamides(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  lipoglycopeptides(only_sir_columns = FALSE, return_all = TRUE, ...)  macrolides(only_sir_columns = FALSE, return_all = TRUE, ...)  monobactams(only_sir_columns = FALSE, return_all = TRUE, ...)  nitrofurans(only_sir_columns = FALSE, return_all = TRUE, ...)  oxazolidinones(only_sir_columns = FALSE, return_all = TRUE, ...)  penicillins(only_sir_columns = FALSE, return_all = TRUE, ...)  phenicols(only_sir_columns = FALSE, return_all = TRUE, ...)  polymyxins(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  quinolones(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  rifamycins(only_sir_columns = FALSE, return_all = TRUE, ...)  streptogramins(only_sir_columns = FALSE, return_all = TRUE, ...)  sulfonamides(only_sir_columns = FALSE, return_all = TRUE, ...)  tetracyclines(only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  trimethoprims(only_sir_columns = FALSE, return_all = TRUE, ...)  ureidopenicillins(only_sir_columns = FALSE, return_all = TRUE, ...)  amr_class(amr_class, only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  amr_selector(filter, only_sir_columns = FALSE, only_treatable = TRUE,   return_all = TRUE, ...)  administrable_per_os(only_sir_columns = FALSE, return_all = TRUE, ...)  administrable_iv(only_sir_columns = FALSE, return_all = TRUE, ...)  not_intrinsic_resistant(only_sir_columns = FALSE, col_mo = NULL,   version_expected_phenotypes = 1.2, ...)"},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"only_sir_columns logical indicate whether antimicrobial columns must included transformed class sir beforehand. Defaults FALSE. only_treatable logical indicate whether antimicrobial drugs excluded laboratory tests (default TRUE), gentamicin-high (GEH) imipenem/EDTA (IPE). return_all logical indicate whether matched columns must returned (default TRUE). FALSE, first unique antimicrobial returned, e.g. columns \"genta\" \"gentamicin\" exist data, first hit gentamicin returned. ... Ignored, place allow future extensions. amr_class antimicrobial class part , \"carba\" \"carbapenems\". columns group, atc_group1 atc_group2 antimicrobials data set searched (case-insensitive) value. filter expression evaluated antimicrobials data set, name %like% \"trim\". col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). version_expected_phenotypes version number use EUCAST Expected Phenotypes. Can \"1.2\".","code":""},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"used inside selecting filtering, returns character vector column names, additional class \"amr_selector\". used individually, returns 'ab' vector possible antimicrobials function able select filter.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"functions can used data set calls selecting columns filtering rows. work base R, Tidyverse, data.table. heavily inspired Tidyverse selection helpers everything(), limited dplyr verbs. Nonetheless, convenient use dplyr functions select(), filter() summarise(), see Examples. selectors can also used tidymodels packages recipe parsnip. See info tutorial using antimicrobial selectors predictive modelling. columns data functions called searched known antimicrobial names, abbreviations, brand names, codes (ATC, EARS-Net, , etc.) according antimicrobials data set. means selector aminoglycosides() pick column names like 'gen', 'genta', 'J01GB03', 'tobra', 'Tobracin', etc. amr_class() function can used filter/select manually defined antimicrobial class. searches results antimicrobials data set within columns group, atc_group1 atc_group2. administrable_per_os() administrable_iv() functions also rely antimicrobials data set - antimicrobials matched DDD (defined daily dose) resp. oral IV treatment available antimicrobials data set. amr_selector() function can used internally filter antimicrobials data set results, see Examples. allows filtering (part ) certain name, /group name even minimum DDDs oral treatment. function yields highest flexibility, also least user-friendly, since requires hard-coded filter set. not_intrinsic_resistant() function can used select antimicrobials pose intrinsic resistance microorganisms data set. example, data set contains microorganism codes names E. coli K. pneumoniae contains column \"vancomycin\", column removed (rather, unselected) using function. currently applies 'EUCAST Expected Resistant Phenotypes' v1.2 (2023) determine intrinsic resistance, using eucast_rules() function internally. determination, function quite slow terms performance.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"full-list-of-supported-antimicrobial-classes","dir":"Reference","previous_headings":"","what":"Full list of supported (antimicrobial) classes","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"aminoglycosides() can select:  amikacin (AMK), amikacin/fosfomycin (AKF), apramycin (APR), arbekacin (ARB), astromicin (AST), bekanamycin (BEK), dibekacin (DKB), framycetin (FRM), gentamicin (GEN), gentamicin-high (GEH), habekacin (HAB), hygromycin (HYG), isepamicin (ISE), kanamycin (KAN), kanamycin-high (KAH), kanamycin/cephalexin (KAC), micronomicin (MCR), neomycin (NEO), netilmicin (NET), pentisomicin (PIM), plazomicin (PLZ), propikacin (PKA), ribostamycin (RST), sisomicin (SIS), streptoduocin (STR), streptomycin (STR1), streptomycin-high (STH), tobramycin (TOB), tobramycin-high (TOH) aminopenicillins() can select:  amoxicillin (AMX) ampicillin (AMP) antifungals() can select:  amorolfine (AMO), amphotericin B (AMB), amphotericin B-high (AMH), anidulafungin (ANI), butoconazole (), caspofungin (CAS), ciclopirox (CIX), clotrimazole (CTR), econazole (ECO), fluconazole (FLU), flucytosine (FCT), fosfluconazole (FFL), griseofulvin (GRI), hachimycin (HCH), ibrexafungerp (IBX), isavuconazole (ISV), isoconazole (ISO), itraconazole (ITR), ketoconazole (KET), manogepix (MGX), micafungin (MIF), miconazole (MCZ), nystatin (NYS), oteseconazole (OTE), pimaricin (PMR), posaconazole (POS), rezafungin (RZF), ribociclib (RBC), sulconazole (SUC), terbinafine (TRB), terconazole (TRC), voriconazole (VOR) antimycobacterials() can select:  4-aminosalicylic acid (AMA), calcium aminosalicylate (CLA), capreomycin (CAP), clofazimine (CLF), delamanid (DLM), enviomycin (ENV), ethambutol (ETH), ethambutol/isoniazid (ETI), ethionamide (ETI1), isoniazid (INH), isoniazid/sulfamethoxazole/trimethoprim/pyridoxine (IST), morinamide (MRN), p-aminosalicylic acid (PAS), pretomanid (PMD), protionamide (PTH), pyrazinamide (PZA), rifabutin (RIB), rifampicin (RIF), rifampicin/ethambutol/isoniazid (REI), rifampicin/isoniazid (RFI), rifampicin/pyrazinamide/ethambutol/isoniazid (RPEI), rifampicin/pyrazinamide/isoniazid (RPI), rifamycin (RFM), rifapentine (RFP), simvastatin/fenofibrate (SMF), sodium aminosalicylate (SDA), streptomycin/isoniazid (STI), terizidone (TRZ), thioacetazone (TAT), thioacetazone/isoniazid (THI1), tiocarlide (TCR), viomycin (VIO) betalactams() can select:  amoxicillin (AMX), amoxicillin/clavulanic acid (AMC), amoxicillin/sulbactam (AXS), ampicillin (AMP), ampicillin/sulbactam (SAM), apalcillin (APL), aspoxicillin (APX), azidocillin (AZD), azlocillin (AZL), aztreonam (ATM), aztreonam/avibactam (AZA), aztreonam/nacubactam (ANC), bacampicillin (BAM), benzathine benzylpenicillin (BNB), benzathine phenoxymethylpenicillin (BNP), benzylpenicillin (PEN), benzylpenicillin screening test (PEN-S), biapenem (BIA), carbenicillin (CRB), carindacillin (CRN), carumonam (CAR), cefacetrile (CAC), cefaclor (CEC), cefadroxil (CFR), cefalexin (LEX), cefaloridine (RID), cefalotin (CEP), cefamandole (MAN), cefapirin (HAP), cefatrizine (CTZ), cefazedone (CZD), cefazolin (CZO), cefcapene (CCP), cefcapene pivoxil (CCX), cefdinir (CDR), cefditoren (DIT), cefditoren pivoxil (DIX), cefepime (FEP), cefepime/amikacin (CFA), cefepime/clavulanic acid (CPC), cefepime/enmetazobactam (FPE), cefepime/nacubactam (FNC), cefepime/tazobactam (FPT), cefepime/zidebactam (FPZ), cefetamet (CAT), cefetamet pivoxil (CPI), cefetecol (CCL), cefetrizole (CZL), cefiderocol (FDC), cefixime (CFM), cefmenoxime (CMX), cefmetazole (CMZ), cefodizime (DIZ), cefonicid (CID), cefoperazone (CFP), cefoperazone/sulbactam (CSL), ceforanide (CND), cefoselis (CSE), cefotaxime (CTX), cefotaxime screening test (CTX-S), cefotaxime/clavulanic acid (CTC), cefotaxime/sulbactam (CTS), cefotetan (CTT), cefotiam (CTF), cefotiam hexetil (CHE), cefovecin (FOV), cefoxitin (FOX), cefoxitin screening test (FOX-S), cefozopran (ZOP), cefpimizole (CFZ), cefpiramide (CPM), cefpirome (CPO), cefpodoxime (CPD), cefpodoxime proxetil (CPX), cefpodoxime/clavulanic acid (CDC), cefprozil (CPR), cefquinome (CEQ), cefroxadine (CRD), cefsulodin (CFS), cefsumide (CSU), ceftaroline (CPT), ceftaroline/avibactam (CPA), ceftazidime (CAZ), ceftazidime/avibactam (CZA), ceftazidime/clavulanic acid (CCV), cefteram (CEM), cefteram pivoxil (CPL), ceftezole (CTL), ceftibuten (CTB), ceftiofur (TIO), ceftizoxime (CZX), ceftizoxime alapivoxil (CZP), ceftobiprole (BPR), ceftobiprole medocaril (CFM1), ceftolozane/tazobactam (CZT), ceftriaxone (CRO), ceftriaxone/beta-lactamase inhibitor (CEB), cefuroxime (CXM), cefuroxime axetil (CXA), cephradine (CED), ciclacillin (CIC), clometocillin (CLM), cloxacillin (CLO), dicloxacillin (DIC), doripenem (DOR), epicillin (EPC), ertapenem (ETP), flucloxacillin (FLC), hetacillin (HET), imipenem (IPM), imipenem/EDTA (IPE), imipenem/relebactam (IMR), latamoxef (LTM), lenampicillin (LEN), loracarbef (LOR), mecillinam (MEC), meropenem (MEM), meropenem/nacubactam (MNC), meropenem/vaborbactam (MEV), metampicillin (MTM), meticillin (MET), mezlocillin (MEZ), mezlocillin/sulbactam (MSU), nafcillin (NAF), oxacillin (OXA), oxacillin screening test (OXA-S), panipenem (PAN), penamecillin (PNM), penicillin/novobiocin (PNO), penicillin/sulbactam (PSU), pheneticillin (PHE), phenoxymethylpenicillin (PHN), piperacillin (PIP), piperacillin/sulbactam (PIS), piperacillin/tazobactam (TZP), piridicillin (PRC), pivampicillin (PVM), pivmecillinam (PME), procaine benzylpenicillin (PRB), propicillin (PRP), razupenem (RZM), ritipenem (RIT), ritipenem acoxil (RIA), sarmoxicillin (SRX), sulbenicillin (SBC), sultamicillin (SLT6), talampicillin (TAL), tebipenem (TBP), temocillin (TEM), ticarcillin (TIC), ticarcillin/clavulanic acid (TCC), tigemonam (TMN) betalactams_with_inhibitor() can select:  amoxicillin/clavulanic acid (AMC), amoxicillin/sulbactam (AXS), ampicillin/sulbactam (SAM), aztreonam/avibactam (AZA), aztreonam/nacubactam (ANC), cefepime/amikacin (CFA), cefepime/clavulanic acid (CPC), cefepime/enmetazobactam (FPE), cefepime/nacubactam (FNC), cefepime/tazobactam (FPT), cefepime/zidebactam (FPZ), cefoperazone/sulbactam (CSL), cefotaxime/clavulanic acid (CTC), cefotaxime/sulbactam (CTS), cefpodoxime/clavulanic acid (CDC), ceftaroline/avibactam (CPA), ceftazidime/avibactam (CZA), ceftazidime/clavulanic acid (CCV), ceftolozane/tazobactam (CZT), ceftriaxone/beta-lactamase inhibitor (CEB), imipenem/relebactam (IMR), meropenem/nacubactam (MNC), meropenem/vaborbactam (MEV), mezlocillin/sulbactam (MSU), penicillin/novobiocin (PNO), penicillin/sulbactam (PSU), piperacillin/sulbactam (PIS), piperacillin/tazobactam (TZP), ticarcillin/clavulanic acid (TCC) carbapenems() can select:  biapenem (BIA), doripenem (DOR), ertapenem (ETP), imipenem (IPM), imipenem/EDTA (IPE), imipenem/relebactam (IMR), meropenem (MEM), meropenem/nacubactam (MNC), meropenem/vaborbactam (MEV), panipenem (PAN), razupenem (RZM), ritipenem (RIT), ritipenem acoxil (RIA), tebipenem (TBP) cephalosporins() can select:  cefacetrile (CAC), cefaclor (CEC), cefadroxil (CFR), cefalexin (LEX), cefaloridine (RID), cefalotin (CEP), cefamandole (MAN), cefapirin (HAP), cefatrizine (CTZ), cefazedone (CZD), cefazolin (CZO), cefcapene (CCP), cefcapene pivoxil (CCX), cefdinir (CDR), cefditoren (DIT), cefditoren pivoxil (DIX), cefepime (FEP), cefepime/amikacin (CFA), cefepime/clavulanic acid (CPC), cefepime/enmetazobactam (FPE), cefepime/nacubactam (FNC), cefepime/tazobactam (FPT), cefepime/zidebactam (FPZ), cefetamet (CAT), cefetamet pivoxil (CPI), cefetecol (CCL), cefetrizole (CZL), cefiderocol (FDC), cefixime (CFM), cefmenoxime (CMX), cefmetazole (CMZ), cefodizime (DIZ), cefonicid (CID), cefoperazone (CFP), cefoperazone/sulbactam (CSL), ceforanide (CND), cefoselis (CSE), cefotaxime (CTX), cefotaxime screening test (CTX-S), cefotaxime/clavulanic acid (CTC), cefotaxime/sulbactam (CTS), cefotetan (CTT), cefotiam (CTF), cefotiam hexetil (CHE), cefovecin (FOV), cefoxitin (FOX), cefoxitin screening test (FOX-S), cefozopran (ZOP), cefpimizole (CFZ), cefpiramide (CPM), cefpirome (CPO), cefpodoxime (CPD), cefpodoxime proxetil (CPX), cefpodoxime/clavulanic acid (CDC), cefprozil (CPR), cefquinome (CEQ), cefroxadine (CRD), cefsulodin (CFS), cefsumide (CSU), ceftaroline (CPT), ceftaroline/avibactam (CPA), ceftazidime (CAZ), ceftazidime/avibactam (CZA), ceftazidime/clavulanic acid (CCV), cefteram (CEM), cefteram pivoxil (CPL), ceftezole (CTL), ceftibuten (CTB), ceftiofur (TIO), ceftizoxime (CZX), ceftizoxime alapivoxil (CZP), ceftobiprole (BPR), ceftobiprole medocaril (CFM1), ceftolozane/tazobactam (CZT), ceftriaxone (CRO), ceftriaxone/beta-lactamase inhibitor (CEB), cefuroxime (CXM), cefuroxime axetil (CXA), cephradine (CED), latamoxef (LTM), loracarbef (LOR) cephalosporins_1st() can select:  cefacetrile (CAC), cefadroxil (CFR), cefalexin (LEX), cefaloridine (RID), cefalotin (CEP), cefapirin (HAP), cefatrizine (CTZ), cefazedone (CZD), cefazolin (CZO), cefroxadine (CRD), ceftezole (CTL), cephradine (CED) cephalosporins_2nd() can select:  cefaclor (CEC), cefamandole (MAN), cefmetazole (CMZ), cefonicid (CID), ceforanide (CND), cefotetan (CTT), cefotiam (CTF), cefoxitin (FOX), cefoxitin screening test (FOX-S), cefprozil (CPR), cefuroxime (CXM), cefuroxime axetil (CXA), loracarbef (LOR) cephalosporins_3rd() can select:  cefcapene (CCP), cefcapene pivoxil (CCX), cefdinir (CDR), cefditoren (DIT), cefditoren pivoxil (DIX), cefetamet (CAT), cefetamet pivoxil (CPI), cefixime (CFM), cefmenoxime (CMX), cefodizime (DIZ), cefoperazone (CFP), cefoperazone/sulbactam (CSL), cefotaxime (CTX), cefotaxime screening test (CTX-S), cefotaxime/clavulanic acid (CTC), cefotaxime/sulbactam (CTS), cefotiam hexetil (CHE), cefovecin (FOV), cefpimizole (CFZ), cefpiramide (CPM), cefpodoxime (CPD), cefpodoxime proxetil (CPX), cefpodoxime/clavulanic acid (CDC), cefsulodin (CFS), ceftazidime (CAZ), ceftazidime/avibactam (CZA), ceftazidime/clavulanic acid (CCV), cefteram (CEM), cefteram pivoxil (CPL), ceftibuten (CTB), ceftiofur (TIO), ceftizoxime (CZX), ceftizoxime alapivoxil (CZP), ceftriaxone (CRO), ceftriaxone/beta-lactamase inhibitor (CEB), latamoxef (LTM) cephalosporins_4th() can select:  cefepime (FEP), cefepime/amikacin (CFA), cefepime/clavulanic acid (CPC), cefepime/enmetazobactam (FPE), cefepime/nacubactam (FNC), cefepime/tazobactam (FPT), cefepime/zidebactam (FPZ), cefetecol (CCL), cefoselis (CSE), cefozopran (ZOP), cefpirome (CPO), cefquinome (CEQ) cephalosporins_5th() can select:  ceftaroline (CPT), ceftaroline/avibactam (CPA), ceftobiprole (BPR), ceftobiprole medocaril (CFM1), ceftolozane/tazobactam (CZT) fluoroquinolones() can select:  besifloxacin (BES), ciprofloxacin (CIP), ciprofloxacin/metronidazole (CIM), ciprofloxacin/ornidazole (CIO), ciprofloxacin/tinidazole (CIT), clinafloxacin (CLX), danofloxacin (DAN), delafloxacin (DFX), difloxacin (DIF), enoxacin (ENX), enrofloxacin (ENR), finafloxacin (FIN), fleroxacin (FLE), garenoxacin (GRN), gatifloxacin (GAT), gemifloxacin (GEM), grepafloxacin (GRX), lascufloxacin (LSC), levofloxacin (LVX), levofloxacin/ornidazole (LEO), levonadifloxacin (LND), lomefloxacin (LOM), marbofloxacin (MAR), metioxate (MXT), miloxacin (MIL), moxifloxacin (MFX), nadifloxacin (NAD), nemonoxacin (NEM), nifuroquine (NIF), nitroxoline (NTR), norfloxacin (), norfloxacin screening test (-S), norfloxacin/metronidazole (NME), norfloxacin/tinidazole (NTI), ofloxacin (OFX), ofloxacin/ornidazole (OOR), orbifloxacin (ORB), pazufloxacin (PAZ), pefloxacin (PEF), pefloxacin screening test (PEF-S), pradofloxacin (PRA), premafloxacin (PRX), prulifloxacin (PRU), rufloxacin (RFL), sarafloxacin (SAR), sitafloxacin (SIT), sparfloxacin (SPX), temafloxacin (TMX), tilbroquinol (TBQ), tioxacin (TXC), tosufloxacin (TFX), trovafloxacin (TVA) glycopeptides() can select:  avoparcin (AVO), bleomycin (BLM), dalbavancin (DAL), norvancomycin (NVA), oritavancin (ORI), ramoplanin (RAM), teicoplanin (TEC), teicoplanin-macromethod (TCM), telavancin (TLV), vancomycin (VAN), vancomycin-macromethod (VAM) isoxazolylpenicillins() can select:  cloxacillin (CLO), dicloxacillin (DIC), flucloxacillin (FLC), meticillin (MET), oxacillin (OXA), oxacillin screening test (OXA-S) lincosamides() can select:  clindamycin (CLI), lincomycin (LIN), pirlimycin (PRL) lipoglycopeptides() can select:  dalbavancin (DAL), oritavancin (ORI), telavancin (TLV) macrolides() can select:  acetylmidecamycin (ACM), acetylspiramycin (ASP), azithromycin (AZM), clarithromycin (CLR), dirithromycin (DIR), erythromycin (ERY), flurithromycin (FLR1), gamithromycin (GAM), josamycin (JOS), kitasamycin (KIT), meleumycin (MEL), midecamycin (MID), miocamycin (MCM), nafithromycin (ZWK), oleandomycin (OLE), rokitamycin (ROK), roxithromycin (RXT), solithromycin (SOL), spiramycin (SPI), telithromycin (TLT), tildipirosin (TIP), tilmicosin (TIL), troleandomycin (TRL), tulathromycin (TUL), tylosin (TYL), tylvalosin (TYL1) monobactams() can select:  aztreonam (ATM), aztreonam/avibactam (AZA), aztreonam/nacubactam (ANC), carumonam (CAR), tigemonam (TMN) nitrofurans() can select:  furazidin (FUR), furazolidone (FRZ), nifurtoinol (NFR), nitrofurantoin (NIT), nitrofurazone (NIZ) oxazolidinones() can select:  cadazolid (CDZ), cycloserine (CYC), linezolid (LNZ), tedizolid (TZD), thiacetazone (THA) penicillins() can select:  amoxicillin (AMX), amoxicillin/clavulanic acid (AMC), amoxicillin/sulbactam (AXS), ampicillin (AMP), ampicillin/sulbactam (SAM), apalcillin (APL), aspoxicillin (APX), azidocillin (AZD), azlocillin (AZL), bacampicillin (BAM), benzathine benzylpenicillin (BNB), benzathine phenoxymethylpenicillin (BNP), benzylpenicillin (PEN), benzylpenicillin screening test (PEN-S), carbenicillin (CRB), carindacillin (CRN), ciclacillin (CIC), clometocillin (CLM), cloxacillin (CLO), dicloxacillin (DIC), epicillin (EPC), flucloxacillin (FLC), hetacillin (HET), lenampicillin (LEN), mecillinam (MEC), metampicillin (MTM), meticillin (MET), mezlocillin (MEZ), mezlocillin/sulbactam (MSU), nafcillin (NAF), oxacillin (OXA), oxacillin screening test (OXA-S), penamecillin (PNM), penicillin/novobiocin (PNO), penicillin/sulbactam (PSU), pheneticillin (PHE), phenoxymethylpenicillin (PHN), piperacillin (PIP), piperacillin/sulbactam (PIS), piperacillin/tazobactam (TZP), piridicillin (PRC), pivampicillin (PVM), pivmecillinam (PME), procaine benzylpenicillin (PRB), propicillin (PRP), sarmoxicillin (SRX), sulbenicillin (SBC), sultamicillin (SLT6), talampicillin (TAL), temocillin (TEM), ticarcillin (TIC), ticarcillin/clavulanic acid (TCC) phenicols() can select:  chloramphenicol (CHL), florfenicol (FLR), thiamphenicol (THI) polymyxins() can select:  colistin (COL), polymyxin B (PLB), polymyxin B/polysorbate 80 (POP) quinolones() can select:  besifloxacin (BES), cinoxacin (CIN), ciprofloxacin (CIP), ciprofloxacin/metronidazole (CIM), ciprofloxacin/ornidazole (CIO), ciprofloxacin/tinidazole (CIT), clinafloxacin (CLX), danofloxacin (DAN), delafloxacin (DFX), difloxacin (DIF), enoxacin (ENX), enrofloxacin (ENR), finafloxacin (FIN), fleroxacin (FLE), flumequine (FLM), garenoxacin (GRN), gatifloxacin (GAT), gemifloxacin (GEM), grepafloxacin (GRX), lascufloxacin (LSC), levofloxacin (LVX), levofloxacin/ornidazole (LEO), levonadifloxacin (LND), lomefloxacin (LOM), marbofloxacin (MAR), metioxate (MXT), miloxacin (MIL), moxifloxacin (MFX), nadifloxacin (NAD), nalidixic acid (NAL), nalidixic acid screening test (NAL-S), nemonoxacin (NEM), nifuroquine (NIF), nitroxoline (NTR), norfloxacin (), norfloxacin screening test (-S), norfloxacin/metronidazole (NME), norfloxacin/tinidazole (NTI), ofloxacin (OFX), ofloxacin/ornidazole (OOR), orbifloxacin (ORB), oxolinic acid (OXO), pazufloxacin (PAZ), pefloxacin (PEF), pefloxacin screening test (PEF-S), pipemidic acid (PPA), piromidic acid (PIR), pradofloxacin (PRA), premafloxacin (PRX), prulifloxacin (PRU), rosoxacin (ROS), rufloxacin (RFL), sarafloxacin (SAR), sitafloxacin (SIT), sparfloxacin (SPX), temafloxacin (TMX), tilbroquinol (TBQ), tioxacin (TXC), tosufloxacin (TFX), trovafloxacin (TVA) rifamycins() can select:  rifabutin (RIB), rifampicin (RIF), rifampicin/ethambutol/isoniazid (REI), rifampicin/isoniazid (RFI), rifampicin/pyrazinamide/ethambutol/isoniazid (RPEI), rifampicin/pyrazinamide/isoniazid (RPI), rifamycin (RFM), rifapentine (RFP) streptogramins() can select:  pristinamycin (PRI) quinupristin/dalfopristin (QDA) sulfonamides() can select:  brodimoprim (BDP), sulfadiazine (SDI), sulfadiazine/tetroxoprim (SLT), sulfadimethoxine (SUD), sulfadimidine (SDM), sulfafurazole (SLF), sulfaisodimidine (SLF1), sulfalene (SLF2), sulfamazone (SZO), sulfamerazine (SLF3), sulfamethizole (SLF4), sulfamethoxazole (SMX), sulfamethoxypyridazine (SLF5), sulfametomidine (SLF6), sulfametoxydiazine (SLF7), sulfamoxole (SLF8), sulfanilamide (SLF9), sulfaperin (SLF10), sulfaphenazole (SLF11), sulfapyridine (SLF12), sulfathiazole (SUT), sulfathiourea (SLF13) tetracyclines() can select:  cetocycline (CTO), chlortetracycline (CTE), clomocycline (CLM1), demeclocycline (DEM), doxycycline (DOX), eravacycline (ERV), lymecycline (LYM), metacycline (MTC), minocycline (MNO), omadacycline (OMC), oxytetracycline (OXY), penimepicycline (PNM1), rolitetracycline (RLT), sarecycline (SRC), tetracycline (TCY), tetracycline screening test (TCY-S), tigecycline (TGC) trimethoprims() can select:  brodimoprim (BDP), sulfadiazine (SDI), sulfadiazine/tetroxoprim (SLT), sulfadiazine/trimethoprim (SLT1), sulfadimethoxine (SUD), sulfadimidine (SDM), sulfadimidine/trimethoprim (SLT2), sulfafurazole (SLF), sulfaisodimidine (SLF1), sulfalene (SLF2), sulfamazone (SZO), sulfamerazine (SLF3), sulfamerazine/trimethoprim (SLT3), sulfamethizole (SLF4), sulfamethoxazole (SMX), sulfamethoxypyridazine (SLF5), sulfametomidine (SLF6), sulfametoxydiazine (SLF7), sulfametrole/trimethoprim (SLT4), sulfamoxole (SLF8), sulfamoxole/trimethoprim (SLT5), sulfanilamide (SLF9), sulfaperin (SLF10), sulfaphenazole (SLF11), sulfapyridine (SLF12), sulfathiazole (SUT), sulfathiourea (SLF13), trimethoprim (TMP), trimethoprim/sulfamethoxazole (SXT) ureidopenicillins() can select:  azlocillin (AZL), mezlocillin (MEZ), piperacillin (PIP), piperacillin/tazobactam (TZP)","code":""},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobial_selectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antimicrobial Selectors — antimicrobial_selectors","text":"","code":"# `example_isolates` is a data set available in the AMR package. # See ?example_isolates. example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …   # you can use the selectors separately to retrieve all possible antimicrobials: carbapenems() #> ℹ in carbapenems(): Imipenem/EDTA (IPE) and meropenem/nacubactam #>   (MNC) are not included since only_treatable = TRUE. #> ℹ This 'ab' vector was retrieved using carbapenems(), which should #>   normally be used inside a dplyr verb or data.frame call, e.g.: #>   • your_data %>% select(carbapenems()) #>   • your_data %>% select(column_a, column_b, carbapenems()) #>   • your_data %>% filter(any(carbapenems() == \"R\")) #>   • your_data[, carbapenems()] #>   • your_data[, c(\"column_a\", \"column_b\", carbapenems())] #> Class 'ab' #>  [1] BIA DOR ETP IMR IPM MEM MEV PAN RIA RIT RZM TBP   # Though they are primarily intended to use for selections and filters. # Examples sections below are split into 'dplyr', 'base R', and 'data.table':  # \\donttest{ if (FALSE) { # \\dontrun{ # dplyr -------------------------------------------------------------------  library(dplyr, warn.conflicts = FALSE)  example_isolates %>% select(carbapenems())  # select columns 'mo', 'AMK', 'GEN', 'KAN' and 'TOB' example_isolates %>% select(mo, aminoglycosides())  # you can combine selectors like you are used with tidyverse # e.g., for betalactams, but not the ones with an enzyme inhibitor: example_isolates %>% select(betalactams(), -betalactams_with_inhibitor())  # select only antimicrobials with DDDs for oral treatment example_isolates %>% select(administrable_per_os())  # get AMR for all aminoglycosides e.g., per ward: example_isolates %>%   group_by(ward) %>%   summarise(across(aminoglycosides(),                    resistance))  # You can combine selectors with '&' to be more specific: example_isolates %>%   select(penicillins() & administrable_per_os())  # get AMR for only drugs that matter - no intrinsic resistance: example_isolates %>%   filter(mo_genus() %in% c(\"Escherichia\", \"Klebsiella\")) %>%   group_by(ward) %>%   summarise_at(not_intrinsic_resistant(),                resistance)  # get susceptibility for antimicrobials whose name contains \"trim\": example_isolates %>%   filter(first_isolate()) %>%   group_by(ward) %>%   summarise(across(amr_selector(name %like% \"trim\"), susceptibility))  # this will select columns 'IPM' (imipenem) and 'MEM' (meropenem): example_isolates %>%   select(carbapenems())  # this will select columns 'mo', 'AMK', 'GEN', 'KAN' and 'TOB': example_isolates %>%   select(mo, aminoglycosides())  # any() and all() work in dplyr's filter() too: example_isolates %>%   filter(     any(aminoglycosides() == \"R\"),     all(cephalosporins_2nd() == \"R\")   )  # also works with c(): example_isolates %>%   filter(any(c(carbapenems(), aminoglycosides()) == \"R\"))  # not setting any/all will automatically apply all(): example_isolates %>%   filter(aminoglycosides() == \"R\")  # this will select columns 'mo' and all antimycobacterial drugs ('RIF'): example_isolates %>%   select(mo, amr_class(\"mycobact\"))  # get bug/drug combinations for only glycopeptides in Gram-positives: example_isolates %>%   filter(mo_is_gram_positive()) %>%   select(mo, glycopeptides()) %>%   bug_drug_combinations() %>%   format()  data.frame(   some_column = \"some_value\",   J01CA01 = \"S\" ) %>% # ATC code of ampicillin   select(penicillins()) # only the 'J01CA01' column will be selected  # with recent versions of dplyr, this is all equal: x <- example_isolates[carbapenems() == \"R\", ] y <- example_isolates %>% filter(carbapenems() == \"R\") z <- example_isolates %>% filter(if_all(carbapenems(), ~ .x == \"R\")) identical(x, y) && identical(y, z)  } # } # base R ------------------------------------------------------------------  # select columns 'IPM' (imipenem) and 'MEM' (meropenem) example_isolates[, carbapenems()] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # A tibble: 2,000 × 2 #>    IPM   MEM   #>    <sir> <sir> #>  1   NA    NA  #>  2   NA    NA  #>  3   NA    NA  #>  4   NA    NA  #>  5   NA    NA  #>  6   NA    NA  #>  7   NA    NA  #>  8   NA    NA  #>  9   NA    NA  #> 10   NA    NA  #> # ℹ 1,990 more rows  # select columns 'mo', 'AMK', 'GEN', 'KAN' and 'TOB' example_isolates[, c(\"mo\", aminoglycosides())] #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> # A tibble: 2,000 × 5 #>    mo           GEN   TOB   AMK   KAN   #>    <mo>         <sir> <sir> <sir> <sir> #>  1 B_ESCHR_COLI   NA    NA    NA    NA  #>  2 B_ESCHR_COLI   NA    NA    NA    NA  #>  3 B_STPHY_EPDR   NA    NA    NA    NA  #>  4 B_STPHY_EPDR   NA    NA    NA    NA  #>  5 B_STPHY_EPDR   NA    NA    NA    NA  #>  6 B_STPHY_EPDR   NA    NA    NA    NA  #>  7 B_STPHY_AURS   NA    S     NA    NA  #>  8 B_STPHY_AURS   NA    S     NA    NA  #>  9 B_STPHY_EPDR   NA    NA    NA    NA  #> 10 B_STPHY_EPDR   NA    NA    NA    NA  #> # ℹ 1,990 more rows  # select only antimicrobials with DDDs for oral treatment example_isolates[, administrable_per_os()] #> ℹ For administrable_per_os() using columns 'OXA' (oxacillin), 'FLC' #>   (flucloxacillin), 'AMX' (amoxicillin), 'AMC' (amoxicillin/clavulanic acid), #>   'AMP' (ampicillin), 'CXM' (cefuroxime), 'KAN' (kanamycin), 'TMP' #>   (trimethoprim), 'NIT' (nitrofurantoin), 'FOS' (fosfomycin), 'LNZ' #>   (linezolid), 'CIP' (ciprofloxacin), 'MFX' (moxifloxacin), 'VAN' #>   (vancomycin), 'TCY' (tetracycline), 'DOX' (doxycycline), 'ERY' #>   (erythromycin), 'CLI' (clindamycin), 'AZM' (azithromycin), 'MTR' #>   (metronidazole), 'CHL' (chloramphenicol), 'COL' (colistin), and 'RIF' #>   (rifampicin) #> # A tibble: 2,000 × 23 #>    OXA   FLC   AMX   AMC   AMP   CXM   KAN   TMP   NIT   FOS   LNZ   CIP   MFX   #>    <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sirℹ 1,990 more rows #> # ℹ 10 more variables: VAN <sir>, TCY <sir>, DOX <sir>, ERY <sir>, CLI <sir>, #> #   AZM <sir>, MTR <sir>, CHL <sir>, COL <sir>, RIF <sir>  # filter using any() or all() example_isolates[any(carbapenems() == \"R\"), ] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # A tibble: 55 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2004-06-09 529296     69 M      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  2 2004-06-09 529296     69 M      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  3 2004-11-03 D65308     80 F      ICU      B_STNTR_MLTP   R     NA    NA    R   #>  4 2005-04-21 452212     82 F      ICU      B_ENTRC        NA    NA    NA    NA  #>  5 2005-04-22 452212     82 F      ICU      B_ENTRC        NA    NA    NA    NA  #>  6 2005-04-22 452212     82 F      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  7 2007-02-21 8BBC46     61 F      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  8 2007-12-15 401043     72 M      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  9 2008-01-22 1710B8     82 M      Clinical B_PROTS_MRBL   R     NA    NA    NA  #> 10 2008-01-22 1710B8     82 M      Clinical B_PROTS_MRBL   R     NA    NA    NA  #> # ℹ 45 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … subset(example_isolates, any(carbapenems() == \"R\")) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> # A tibble: 55 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2004-06-09 529296     69 M      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  2 2004-06-09 529296     69 M      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  3 2004-11-03 D65308     80 F      ICU      B_STNTR_MLTP   R     NA    NA    R   #>  4 2005-04-21 452212     82 F      ICU      B_ENTRC        NA    NA    NA    NA  #>  5 2005-04-22 452212     82 F      ICU      B_ENTRC        NA    NA    NA    NA  #>  6 2005-04-22 452212     82 F      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  7 2007-02-21 8BBC46     61 F      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  8 2007-12-15 401043     72 M      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  9 2008-01-22 1710B8     82 M      Clinical B_PROTS_MRBL   R     NA    NA    NA  #> 10 2008-01-22 1710B8     82 M      Clinical B_PROTS_MRBL   R     NA    NA    NA  #> # ℹ 45 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # filter on any or all results in the carbapenem columns (i.e., IPM, MEM): example_isolates[any(carbapenems()), ] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ Filtering any of columns 'IPM' and 'MEM' to contain value \"S\", \"I\" or \"R\" #> # A tibble: 962 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #>  4 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #>  5 2002-02-05 067927     45 F      ICU      B_SERRT_MRCS   R     NA    NA    R   #>  6 2002-02-05 067927     45 F      ICU      B_SERRT_MRCS   R     NA    NA    R   #>  7 2002-02-05 067927     45 F      ICU      B_SERRT_MRCS   R     NA    NA    R   #>  8 2002-02-27 066895     85 F      Clinical B_KLBSL_PNMN   R     NA    NA    R   #>  9 2002-02-27 066895     85 F      Clinical B_KLBSL_PNMN   R     NA    NA    R   #> 10 2002-03-08 4FC193     69 M      Clinical B_ESCHR_COLI   R     NA    NA    R   #> # ℹ 952 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … example_isolates[all(carbapenems()), ] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ Filtering all of columns 'IPM' and 'MEM' to contain value \"S\", \"I\" or \"R\" #> # A tibble: 756 × 46 #>    date       patient   age gender ward    mo            PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>   <mo>          <sir> <sir> <sir> <sir> #>  1 2002-04-14 F30196     73 M      Outpat… B_STRPT_GRPB    S     NA    S     S   #>  2 2003-04-08 114570     74 M      ICU     B_STRPT_PYGN    S     NA    S     S   #>  3 2003-04-08 114570     74 M      ICU     B_STRPT_GRPA    S     NA    S     S   #>  4 2003-04-08 114570     74 M      ICU     B_STRPT_GRPA    S     NA    S     S   #>  5 2003-08-14 F71508      0 F      Clinic… B_STRPT_GRPB    S     NA    S     S   #>  6 2003-10-16 650870     63 F      ICU     B_ESCHR_COLI    R     NA    NA    R   #>  7 2003-10-20 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #>  8 2003-10-20 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #>  9 2003-11-04 2FC253     87 F      ICU     B_ESCHR_COLI    R     NA    NA    NA  #> 10 2003-11-04 2FC253     87 F      ICU     B_ESCHR_COLI    R     NA    NA    NA  #> # ℹ 746 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # filter with multiple antimicrobial selectors using c() example_isolates[all(c(carbapenems(), aminoglycosides()) == \"R\"), ] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> # A tibble: 26 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2004-11-03 D65308     80 F      ICU      B_STNTR_MLTP   R     NA    NA    R   #>  2 2005-04-22 452212     82 F      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  3 2007-02-21 8BBC46     61 F      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  4 2007-12-15 401043     72 M      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  5 2008-12-06 501361     43 F      Clinical B_STNTR_MLTP   R     NA    NA    R   #>  6 2011-05-09 207325     82 F      ICU      B_ENTRC_FACM   NA    NA    NA    NA  #>  7 2012-03-12 582258     80 M      ICU      B_STPHY_CONS   R     R     R     R   #>  8 2012-05-19 C25552     89 F      Outpati… B_STPHY_CONS   R     R     R     R   #>  9 2012-07-17 F05015     83 M      ICU      B_STPHY_CONS   R     R     R     R   #> 10 2012-07-20 404299     66 F      Clinical B_STPHY_CONS   R     R     R     R   #> # ℹ 16 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # filter + select in one go: get penicillins in carbapenem-resistant strains example_isolates[any(carbapenems() == \"R\"), penicillins()] #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ For penicillins() using columns 'PEN' (benzylpenicillin), 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), and 'TZP' #>   (piperacillin/tazobactam) #> # A tibble: 55 × 7 #>    PEN   OXA   FLC   AMX   AMC   AMP   TZP   #>    <sir> <sir> <sir> <sir> <sir> <sir> <sir> #>  1   NA    NA    NA    NA    NA    NA    NA  #>  2   NA    NA    NA    NA    NA    NA    NA  #>  3   R     NA    NA    R     R     R     R   #>  4   NA    NA    NA    NA    NA    NA    R   #>  5   NA    NA    NA    NA    NA    NA    R   #>  6   NA    NA    NA    NA    NA    NA    R   #>  7   NA    NA    NA    NA    NA    NA    R   #>  8   NA    NA    NA    NA    NA    NA    R   #>  9   R     NA    NA    NA    S     NA    S   #> 10   R     NA    NA    NA    S     NA    S   #> # ℹ 45 more rows  # You can combine selectors with '&' to be more specific. For example, # penicillins() would select benzylpenicillin ('peni G') and # administrable_per_os() would select erythromycin. Yet, when combined these # drugs are both omitted since benzylpenicillin is not administrable per os # and erythromycin is not a penicillin: example_isolates[, penicillins() & administrable_per_os()] #> ℹ For penicillins() using columns 'PEN' (benzylpenicillin), 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), and 'TZP' #>   (piperacillin/tazobactam) #> ℹ For administrable_per_os() using columns 'OXA' (oxacillin), 'FLC' #>   (flucloxacillin), 'AMX' (amoxicillin), 'AMC' (amoxicillin/clavulanic acid), #>   'AMP' (ampicillin), 'CXM' (cefuroxime), 'KAN' (kanamycin), 'TMP' #>   (trimethoprim), 'NIT' (nitrofurantoin), 'FOS' (fosfomycin), 'LNZ' #>   (linezolid), 'CIP' (ciprofloxacin), 'MFX' (moxifloxacin), 'VAN' #>   (vancomycin), 'TCY' (tetracycline), 'DOX' (doxycycline), 'ERY' #>   (erythromycin), 'CLI' (clindamycin), 'AZM' (azithromycin), 'MTR' #>   (metronidazole), 'CHL' (chloramphenicol), 'COL' (colistin), and 'RIF' #>   (rifampicin) #> # A tibble: 2,000 × 5 #>    OXA   FLC   AMX   AMC   AMP   #>    <sir> <sir> <sir> <sir> <sir> #>  1   NA    NA    NA    I     NA  #>  2   NA    NA    NA    I     NA  #>  3   NA    R     NA    NA    NA  #>  4   NA    R     NA    NA    NA  #>  5   NA    R     NA    NA    NA  #>  6   NA    R     NA    NA    NA  #>  7   NA    S     R     S     R   #>  8   NA    S     R     S     R   #>  9   NA    R     NA    NA    NA  #> 10   NA    S     NA    NA    NA  #> # ℹ 1,990 more rows  # amr_selector() applies a filter in the `antimicrobials` data set and is thus # very flexible. For instance, to select antimicrobials with an oral DDD # of at least 1 gram: example_isolates[, amr_selector(oral_ddd > 1 & oral_units == \"g\")] #> ℹ For amr_selector(oral_ddd > 1 & oral_units == \"g\") using columns 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), 'KAN' (kanamycin), 'FOS' #>   (fosfomycin), 'LNZ' (linezolid), 'VAN' (vancomycin), 'ERY' (erythromycin), #>   'CLI' (clindamycin), 'MTR' (metronidazole), and 'CHL' (chloramphenicol) #> # A tibble: 2,000 × 13 #>    OXA   FLC   AMX   AMC   AMP   KAN   FOS   LNZ   VAN   ERY   CLI   MTR   CHL   #>    <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sirℹ 1,990 more rows   # data.table --------------------------------------------------------------  # data.table is supported as well, just use it in the same way as with # base R, but add `with = FALSE` if using a single AB selector.  if (require(\"data.table\")) {   dt <- as.data.table(example_isolates)    # this does not work, it returns column *names*   dt[, carbapenems()] } #> Loading required package: data.table #>  #> Attaching package: ‘data.table’ #> The following object is masked from ‘package:purrr’: #>  #>     transpose #> The following objects are masked from ‘package:dplyr’: #>  #>     between, first, last #> The following objects are masked from ‘package:AMR’: #>  #>     %like%, like #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> Warning: It should never be needed to print an antimicrobial selector class. Are you #> using data.table? Then add the argument with = FALSE, see our examples at #> ?amr_selector. #> Class 'amr_selector' #> [1] IPM MEM if (require(\"data.table\")) {   # so `with = FALSE` is required   dt[, carbapenems(), with = FALSE] } #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #>         IPM   MEM #>       <sir> <sir> #>    1:  <NA>  <NA> #>    2:  <NA>  <NA> #>    3:  <NA>  <NA> #>    4:  <NA>  <NA> #>    5:  <NA>  <NA> #>   ---             #> 1996:  <NA>  <NA> #> 1997:     S     S #> 1998:     S     S #> 1999:     S     S #> 2000:     S     S  # for multiple selections or AB selectors, `with = FALSE` is not needed: if (require(\"data.table\")) {   dt[, c(\"mo\", aminoglycosides())] } #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #>                 mo   GEN   TOB   AMK   KAN #>               <mo> <sir> <sir> <sir> <sir> #>    1: B_ESCHR_COLI  <NA>  <NA>  <NA>  <NA> #>    2: B_ESCHR_COLI  <NA>  <NA>  <NA>  <NA> #>    3: B_STPHY_EPDR  <NA>  <NA>  <NA>  <NA> #>    4: B_STPHY_EPDR  <NA>  <NA>  <NA>  <NA> #>    5: B_STPHY_EPDR  <NA>  <NA>  <NA>  <NA> #>   ---                                      #> 1996: B_STRPT_PNMN     R     R     R     R #> 1997: B_ESCHR_COLI     S     S     S  <NA> #> 1998: B_STPHY_CONS     S  <NA>  <NA>  <NA> #> 1999: B_ESCHR_COLI     S     S  <NA>  <NA> #> 2000: B_KLBSL_PNMN     S     S  <NA>  <NA> if (require(\"data.table\")) {   dt[, c(carbapenems(), aminoglycosides())] } #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #>         IPM   MEM   GEN   TOB   AMK   KAN #>       <sir> <sir> <sir> <sir> <sir> <sir> #>    1:  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>    2:  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>    3:  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>    4:  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>    5:  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>   ---                                     #> 1996:  <NA>  <NA>     R     R     R     R #> 1997:     S     S     S     S     S  <NA> #> 1998:     S     S     S  <NA>  <NA>  <NA> #> 1999:     S     S     S     S  <NA>  <NA> #> 2000:     S     S     S     S  <NA>  <NA>  # row filters are also supported: if (require(\"data.table\")) {   dt[any(carbapenems() == \"S\"), ] } #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #>            date patient   age gender       ward           mo   PEN   OXA   FLC #>          <Date>  <char> <num> <char>     <char>         <mo> <sir> <sir> <sir> #>   1: 2002-01-19  738003    71      M   Clinical B_ESCHR_COLI     R  <NA>  <NA> #>   2: 2002-01-19  738003    71      M   Clinical B_ESCHR_COLI     R  <NA>  <NA> #>   3: 2002-01-22  F35553    50      M        ICU B_PROTS_MRBL     R  <NA>  <NA> #>   4: 2002-01-22  F35553    50      M        ICU B_PROTS_MRBL     R  <NA>  <NA> #>   5: 2002-02-05  067927    45      F        ICU B_SERRT_MRCS     R  <NA>  <NA> #>  ---                                                                           #> 905: 2005-04-12  D71461    70      M        ICU B_ESCHR_COLI     R  <NA>  <NA> #> 906: 2009-11-12  650870    69      F Outpatient B_ESCHR_COLI     R  <NA>  <NA> #> 907: 2012-06-14  8CBCF2    41      F   Clinical B_STPHY_CONS     R     S     S #> 908: 2012-10-11  175532    78      M   Clinical B_ESCHR_COLI     R  <NA>  <NA> #> 909: 2013-11-23  A97263    77      M   Clinical B_KLBSL_PNMN     R  <NA>  <NA> #>        AMX   AMC   AMP   TZP   CZO   FEP   CXM   FOX   CTX   CAZ   CRO   GEN #>      <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sirsir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sirsir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sir> <sirsir> #>   1:     R #>   2:     R #>   3:     R #>   4:     R #>   5:     R #>  ---       #> 905:     R #> 906:     R #> 907:  <NA> #> 908:     R #> 909:     R if (require(\"data.table\")) {   dt[any(carbapenems() == \"S\"), penicillins(), with = FALSE] } #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ For penicillins() using columns 'PEN' (benzylpenicillin), 'OXA' #>   (oxacillin), 'FLC' (flucloxacillin), 'AMX' (amoxicillin), 'AMC' #>   (amoxicillin/clavulanic acid), 'AMP' (ampicillin), and 'TZP' #>   (piperacillin/tazobactam) #>        PEN   OXA   FLC   AMX   AMC   AMP   TZP #>      <sir> <sir> <sir> <sir> <sir> <sir> <sir}"},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"Two data sets containing antimicrobials antivirals. Use .ab() one ab_* functions retrieve values antimicrobials data set. Three identifiers included data set: antimicrobial ID (ab, primarily used package) defined WHONET/EARS-Net, ATC code (atc) defined , Compound ID (cid) found PubChem. properties data set derived one codes. Note drugs multiple ATC codes. antibiotics data set renamed antimicrobials. old name removed future version.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"","code":"antimicrobials  antibiotics  antivirals"},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"object class deprecated_amr_dataset (inherits tbl_df, tbl, data.frame) 497 rows 14 columns. object class tbl_df (inherits tbl, data.frame) 120 rows 11 columns.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"for-the-antimicrobials-data-set-a-tibble-with-observations-and-variables-","dir":"Reference","previous_headings":"","what":"For the antimicrobials data set: a tibble with 497 observations and 14 variables:","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"ab antimicrobial ID used package (AMC), using official EARS-Net (European Antimicrobial Resistance Surveillance Network) codes available. unique identifier. cid Compound ID found PubChem. unique identifier. name Official name used WHONET/EARS-Net . unique identifier. group short concise group name, based WHONET WHOCC definitions atc ATC codes (Anatomical Therapeutic Chemical) defined WHOCC, like J01CR02 (last updated May 4th, 2025): atc_group1 Official pharmacological subgroup (3rd level ATC code) defined WHOCC, like \"Macrolides, lincosamides streptogramins\" atc_group2 Official chemical subgroup (4th level ATC code) defined WHOCC, like \"Macrolides\" abbr List abbreviations used many countries, also antimicrobial susceptibility testing (AST) synonyms Synonyms (often trade names) drug, found PubChem based compound ID ATC properties (last updated May 4th, 2025): oral_ddd Defined Daily Dose (DDD), oral treatment, currently available 180 drugs oral_units Units oral_ddd iv_ddd Defined Daily Dose (DDD), parenteral (intravenous) treatment, currently available 153 drugs iv_units Units iv_ddd LOINC: loinc codes associated name antimicrobial drug Logical Observation Identifiers Names Codes (LOINC), Version 2.76 (18 September, 2023). Use ab_loinc() retrieve quickly, see ab_property().","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"for-the-antivirals-data-set-a-tibble-with-observations-and-variables-","dir":"Reference","previous_headings":"","what":"For the antivirals data set: a tibble with 120 observations and 11 variables:","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"av Antiviral ID used package (ACI), using official EARS-Net (European Antimicrobial Resistance Surveillance Network) codes available. unique identifier. Combinations codes contain + indicate , ATA+COBI atazanavir/cobicistat. name Official name used WHONET/EARS-Net . unique identifier. atc ATC codes (Anatomical Therapeutic Chemical) defined WHOCC, see Details cid Compound ID found PubChem. unique identifier. atc_group Official pharmacological subgroup (3rd level ATC code) defined WHOCC synonyms Synonyms (often trade names) drug, found PubChem based compound ID oral_ddd Defined Daily Dose (DDD), oral treatment oral_units Units oral_ddd iv_ddd Defined Daily Dose (DDD), parenteral treatment iv_units Units iv_ddd loinc codes associated name antiviral drug Logical Observation Identifiers Names Codes (LOINC), Version 2.76 (18 September, 2023). Use av_loinc() retrieve quickly, see av_property().","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"Collaborating Centre Drug Statistics Methodology, Guidelines ATC classification DDD assignment, Oslo Accessed https://atcddd.fhi./atc_ddd_index/ May 4th, 2025. Logical Observation Identifiers Names Codes (LOINC), Version 2.76 (18 September, 2023). Accessed https://loinc.org October 19th, 2023. European Commission Public Health PHARMACEUTICALS - COMMUNITY REGISTER: https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"Properties based ATC code available ATC available. properties : atc_group1, atc_group2, oral_ddd, oral_units, iv_ddd iv_units. note ATC codes unique. example, J01CR02 officially ATC code \"amoxicillin beta-lactamase inhibitor\". Consequently, two items antimicrobials data set return \"J01CR02\":   Synonyms (.e. trade names) derived PubChem Compound ID (column cid) consequently available CID available.","code":"ab_atc(\"amoxicillin/clavulanic acid\") ab_atc(\"amoxicillin/sulbactam\")"},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"whocc","dir":"Reference","previous_headings":"","what":"WHOCC","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"package contains ~550 antibiotic, antimycotic antiviral drugs Anatomical Therapeutic Chemical (ATC) codes, ATC groups Defined Daily Dose (DDD) World Health Organization Collaborating Centre Drug Statistics Methodology (WHOCC, https://atcddd.fhi.) Pharmaceuticals Community Register European Commission (https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm). become gold standard international drug utilisation monitoring research. WHOCC located Oslo Norwegian Institute Public Health funded Norwegian government. European Commission executive European Union promotes general interest. NOTE: WHOCC copyright allow use commercial purposes, unlike info package. See https://atcddd.fhi./copyright_disclaimer/.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/antimicrobials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Sets with 617 Antimicrobial Drugs — antimicrobials","text":"","code":"antimicrobials #> # A tibble: 497 × 14 #>    ab        cid name   group atc   atc_group1 atc_group2 abbreviations synonyms #>    <ab>    <dbl> <chr>  <chr> <lis> <chr>      <chr>      <list>        <named > #>  1 AMA      4649 4-ami… Anti… <chr> Drugs for… Aminosali… <chr [1]>     <chr>    #>  2 ACM   6450012 Acety… Macr… <chr> NA         NA         <chr [1]>     <chr>    #>  3 ASP  49787020 Acety… Macr… <chr> NA         NA         <chr [1]>     <chr>    #>  4 ALS      8954 Aldes… Othe… <chr> Drugs for… Drugs for… <chr [1]>     <chr>    #>  5 AMK     37768 Amika… Amin… <chr> Aminoglyc… Other ami… <chr [6]>     <chr>    #>  6 AKF        NA Amika… Amin… <chr> NA         NA         <chr [1]>     <chr>    #>  7 AMO     54260 Amoro… Anti… <chr> Antifunga… Other ant… <chr [1]>     <chr>    #>  8 AMX     33613 Amoxi… Beta… <chr> Beta-lact… Penicilli… <chr [4]>     <chr>    #>  9 AMC  23665637 Amoxi… Beta… <chr> Beta-lact… Combinati… <chr [6]>     <chr>    #> 10 AXS    465441 Amoxi… Beta… <chr> NA         NA         <chr [1]>     <chr>    #> # ℹ 487 more rows #> # ℹ 5 more variables: oral_ddd <dbl>, oral_units <chr>, iv_ddd <dbl>, #> #   iv_units <chr>, loinc <list> antivirals #> # A tibble: 120 × 11 #>    av       name      atc      cid atc_group synonyms oral_ddd oral_units iv_ddd #>    <av>     <chr>     <chr>  <dbl> <chr>     <list>      <dbl> <chr>       <dbl> #>  1 ABA      Abacavir  J05A… 4.41e5 Nucleosi… <chr>         0.6 g              NA #>  2 ACI      Aciclovir J05A… 1.35e8 Nucleosi… <chr>         4   g               4 #>  3 ADD      Adefovir… J05A… 6.09e4 Nucleosi… <chr>        10   mg             NA #>  4 AME      Amenamev… J05A… 1.14e7 Other an… <chr>         0.4 g              NA #>  5 AMP      Amprenav… J05A… 6.50e4 Protease… <chr>         1.2 g              NA #>  6 ASU      Asunapre… J05A… 1.61e7 Antivira… <chr>         0.2 g              NA #>  7 ATA      Atazanav… J05A… 1.48e5 Protease… <chr>         0.3 g              NA #>  8 ATA+COBI Atazanav… J05A… 8.66e7 Antivira… <chr>        NA   NA             NA #>  9 ATA+RIT  Atazanav… J05A… 2.51e7 Antivira… <chr>         0.3 g              NA #> 10 BAM      Baloxavi… J05A… 1.24e8 Other an… <chr>        40   mg             NA #> # ℹ 110 more rows #> # ℹ 2 more variables: iv_units <chr>, loinc <list>"},{"path":"https://amr-for-r.org/reference/as.ab.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Input to an Antibiotic ID — as.ab","title":"Transform Input to an Antibiotic ID — as.ab","text":"Use function determine antimicrobial drug code one antimicrobials. data set antimicrobials searched abbreviations, official names synonyms (brand names).","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Input to an Antibiotic ID — as.ab","text":"","code":"as.ab(x, flag_multiple_results = TRUE, language = get_AMR_locale(),   info = interactive(), ...)  is.ab(x)  ab_reset_session()"},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Input to an Antibiotic ID — as.ab","text":"x character vector determine antibiotic ID. flag_multiple_results logical indicate whether note printed console probably one antibiotic drug code name can retrieved single input value. language Language coerce input values 28 supported languages - default system language supported (see get_AMR_locale()). info logical indicate whether progress bar printed - default TRUE interactive mode. ... Arguments passed internal functions.","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Input to an Antibiotic ID — as.ab","text":"character vector additional class ab","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Input to an Antibiotic ID — as.ab","text":"entries antimicrobials data set three different identifiers: human readable EARS-Net code (column ab, used ECDC WHONET), ATC code (column atc, used ), CID code (column cid, Compound ID, used PubChem). data set contains 5,000 official brand names many different countries, found PubChem. drugs contain multiple ATC codes. properties searched user input. .ab() can correct different forms misspelling: Wrong spelling drug names (\"tobramicin\" \"gentamycin\"), corrects audible similarities f/ph, x/ks, c/z/s, t/th, etc. many vowels consonants Switching two characters (\"mreopenem\", often case clinical data, doctors typed fast) Digitalised paper records, leaving artefacts like 0/o/O (zero O's), B/8, n/r, etc. Use ab_* functions get properties based returned antibiotic ID, see Examples. Note: .ab() ab_* functions may use long regular expression match brand names antimicrobial drugs. may fail systems. can add manual codes considered .ab() ab_* functions, see add_custom_antimicrobials().","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transform Input to an Antibiotic ID — as.ab","text":"World Health Organization () Collaborating Centre Drug Statistics Methodology: https://atcddd.fhi./atc_ddd_index/ European Commission Public Health PHARMACEUTICALS - COMMUNITY REGISTER: https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"whocc","dir":"Reference","previous_headings":"","what":"WHOCC","title":"Transform Input to an Antibiotic ID — as.ab","text":"package contains ~550 antibiotic, antimycotic antiviral drugs Anatomical Therapeutic Chemical (ATC) codes, ATC groups Defined Daily Dose (DDD) World Health Organization Collaborating Centre Drug Statistics Methodology (WHOCC, https://atcddd.fhi.) Pharmaceuticals Community Register European Commission (https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm). become gold standard international drug utilisation monitoring research. WHOCC located Oslo Norwegian Institute Public Health funded Norwegian government. European Commission executive European Union promotes general interest. NOTE: WHOCC copyright allow use commercial purposes, unlike info package. See https://atcddd.fhi./copyright_disclaimer/.","code":""},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Transform Input to an Antibiotic ID — as.ab","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/as.ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Input to an Antibiotic ID — as.ab","text":"","code":"# these examples all return \"ERY\", the ID of erythromycin: as.ab(\"J01FA01\") #> Class 'ab' #> [1] ERY as.ab(\"J 01 FA 01\") #> Class 'ab' #> [1] ERY as.ab(\"Erythromycin\") #> Class 'ab' #> [1] ERY as.ab(\"eryt\") #> Class 'ab' #> [1] ERY as.ab(\"ERYT\") #> Class 'ab' #> [1] ERY as.ab(\"ERY\") #> Class 'ab' #> [1] ERY as.ab(\"eritromicine\") # spelled wrong, yet works #> Class 'ab' #> [1] ERY as.ab(\"Erythrocin\") # trade name #> Class 'ab' #> [1] ERY  # spelling from different languages and dyslexia are no problem ab_atc(\"ceftriaxon\") #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"cephtriaxone\") # small spelling error #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"cephthriaxone\") # or a bit more severe #> [1] \"J01DD04\"  \"QJ01DD04\" ab_atc(\"seephthriaaksone\") # and even this works #> [1] \"J01DD04\"  \"QJ01DD04\"  # use ab_* functions to get a specific properties (see ?ab_property); # they use as.ab() internally: ab_name(\"J01FA01\") #> [1] \"Erythromycin\" ab_name(\"eryt\") #> [1] \"Erythromycin\"  # \\donttest{ if (require(\"dplyr\")) {   # you can quickly rename 'sir' columns using set_ab_names() with dplyr:   example_isolates %>%     set_ab_names(where(is.sir), property = \"atc\") } #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           J01CE01 J01CF04 J01CF05 #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir>   <sir>   <sir>   #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R       NA      NA    #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R       NA      NA    #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R       NA      R     #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R       NA      R     #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R       NA      R     #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R       NA      R     #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R       NA      S     #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R       NA      S     #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R       NA      R     #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R       NA      S     #> # ℹ 1,990 more rows #> # ℹ 37 more variables: J01CA04 <sir>, J01CR02 <sir>, J01CA01 <sir>, #> #   J01CR05 <sir>, J01DB04 <sir>, J01DE01 <sir>, J01DC02 <sir>, J01DC01 <sir>, #> #   J01DD01 <sir>, J01DD02 <sir>, J01DD04 <sir>, J01GB03 <sir>, J01GB01 <sir>, #> #   J01GB06 <sir>, J01GB04 <sir>, J01EA01 <sir>, J01EE01 <sir>, J01XE01 <sir>, #> #   J01XX01 <sir>, J01XX08 <sir>, J01MA02 <sir>, J01MA14 <sir>, J01XA01 <sir>, #> #   J01XA02 <sir>, J01AA07 <sir>, J01AA12 <sir>, J01AA02 <sir>, … # }"},{"path":"https://amr-for-r.org/reference/as.av.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Input to an Antiviral Drug ID — as.av","title":"Transform Input to an Antiviral Drug ID — as.av","text":"Use function determine antiviral drug code one antiviral drugs. data set antivirals searched abbreviations, official names synonyms (brand names).","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Input to an Antiviral Drug ID — as.av","text":"","code":"as.av(x, flag_multiple_results = TRUE, info = interactive(), ...)  is.av(x)"},{"path":"https://amr-for-r.org/reference/as.av.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Input to an Antiviral Drug ID — as.av","text":"x character vector determine antiviral drug ID. flag_multiple_results logical indicate whether note printed console probably one antiviral drug code name can retrieved single input value. info logical indicate whether progress bar printed - default TRUE interactive mode. ... Arguments passed internal functions.","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Input to an Antiviral Drug ID — as.av","text":"character vector additional class ab","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Input to an Antiviral Drug ID — as.av","text":"entries antivirals data set three different identifiers: human readable EARS-Net code (column ab, used ECDC WHONET), ATC code (column atc, used ), CID code (column cid, Compound ID, used PubChem). data set contains 5,000 official brand names many different countries, found PubChem. drugs contain multiple ATC codes. properties searched user input. .av() can correct different forms misspelling: Wrong spelling drug names (\"acyclovir\"), corrects audible similarities f/ph, x/ks, c/z/s, t/th, etc. many vowels consonants Switching two characters (\"aycclovir\", often case clinical data, doctors typed fast) Digitalised paper records, leaving artefacts like 0/o/O (zero O's), B/8, n/r, etc. Use av_* functions get properties based returned antiviral drug ID, see Examples. Note: .av() av_* functions may use long regular expression match brand names antimicrobial drugs. may fail systems.","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transform Input to an Antiviral Drug ID — as.av","text":"World Health Organization () Collaborating Centre Drug Statistics Methodology: https://atcddd.fhi./atc_ddd_index/ European Commission Public Health PHARMACEUTICALS - COMMUNITY REGISTER: https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"whocc","dir":"Reference","previous_headings":"","what":"WHOCC","title":"Transform Input to an Antiviral Drug ID — as.av","text":"package contains ~550 antibiotic, antimycotic antiviral drugs Anatomical Therapeutic Chemical (ATC) codes, ATC groups Defined Daily Dose (DDD) World Health Organization Collaborating Centre Drug Statistics Methodology (WHOCC, https://atcddd.fhi.) Pharmaceuticals Community Register European Commission (https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm). become gold standard international drug utilisation monitoring research. WHOCC located Oslo Norwegian Institute Public Health funded Norwegian government. European Commission executive European Union promotes general interest. NOTE: WHOCC copyright allow use commercial purposes, unlike info package. See https://atcddd.fhi./copyright_disclaimer/.","code":""},{"path":"https://amr-for-r.org/reference/as.av.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Transform Input to an Antiviral Drug ID — as.av","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/as.av.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Input to an Antiviral Drug ID — as.av","text":"","code":"# these examples all return \"ACI\", the ID of aciclovir: as.av(\"J05AB01\") #> Class 'av' #> [1] ACI as.av(\"J 05 AB 01\") #> Class 'av' #> [1] ACI as.av(\"Aciclovir\") #> Class 'av' #> [1] ACI as.av(\"aciclo\") #> Class 'av' #> [1] ACI as.av(\"   aciclo 123\") #> Class 'av' #> [1] ACI as.av(\"ACICL\") #> Class 'av' #> [1] ACI as.av(\"ACI\") #> Class 'av' #> [1] ACI as.av(\"Virorax\") # trade name #> Class 'av' #> [1] ACI as.av(\"Zovirax\") # trade name #> Class 'av' #> [1] ACI  as.av(\"acyklofir\") # severe spelling error, yet works #> Class 'av' #> [1] ACI  # use av_* functions to get a specific properties (see ?av_property); # they use as.av() internally: av_name(\"J05AB01\") #> [1] \"Aciclovir\" av_name(\"acicl\") #> [1] \"Aciclovir\""},{"path":"https://amr-for-r.org/reference/as.disk.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Input to Disk Diffusion Diameters — as.disk","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"transforms vector new class disk, disk diffusion growth zone size (around antibiotic disk) millimetres 0 50.","code":""},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"","code":"as.disk(x, na.rm = FALSE)  NA_disk_  is.disk(x)"},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"object class disk (inherits integer) length 1.","code":""},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"x Vector. na.rm logical indicating whether missing values removed.","code":""},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"integer additional class disk","code":""},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"Interpret disk values SIR values .sir(). supports guidelines EUCAST CLSI. Disk diffusion growth zone sizes must 0 50 millimetres. Values higher 50 lower 100 maximised 50. others input values outside 0-50 range return NA. NA_disk_ missing value new disk class.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/as.disk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Input to Disk Diffusion Diameters — as.disk","text":"","code":"# transform existing disk zones to the `disk` class (using base R) df <- data.frame(   microorganism = \"Escherichia coli\",   AMP = 20,   CIP = 14,   GEN = 18,   TOB = 16 ) df[, 2:5] <- lapply(df[, 2:5], as.disk) str(df) #> 'data.frame':\t1 obs. of  5 variables: #>  $ microorganism: chr \"Escherichia coli\" #>  $ AMP          : 'disk' int 20 #>  $ CIP          : 'disk' int 14 #>  $ GEN          : 'disk' int 18 #>  $ TOB          : 'disk' int 16  # \\donttest{ # transforming is easier with dplyr: if (require(\"dplyr\")) {   df %>% mutate(across(AMP:TOB, as.disk)) } #>      microorganism AMP CIP GEN TOB #> 1 Escherichia coli  20  14  18  16 # }  # interpret disk values, see ?as.sir as.sir(   x = as.disk(18),   mo = \"Strep pneu\", # `mo` will be coerced with as.mo()   ab = \"ampicillin\", # and `ab` with as.ab()   guideline = \"EUCAST\" ) #> Class 'sir' #> [1] R  # interpret whole data set, pretend to be all from urinary tract infections: as.sir(df, uti = TRUE) #>      microorganism AMP  CIP GEN TOB #> 1 Escherichia coli   S <NA>   S   S"},{"path":"https://amr-for-r.org/reference/as.mic.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"transforms vectors new class mic, treats input decimal numbers, maintaining operators (\">=\") allowing valid MIC values known field (medical) microbiology.","code":""},{"path":"https://amr-for-r.org/reference/as.mic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"","code":"as.mic(x, na.rm = FALSE, keep_operators = \"all\")  is.mic(x)  NA_mic_  rescale_mic(x, mic_range, keep_operators = \"edges\", as.mic = TRUE)  mic_p50(x, na.rm = FALSE, ...)  mic_p90(x, na.rm = FALSE, ...)  # S3 method for class 'mic' droplevels(x, as.mic = FALSE, ...)"},{"path":"https://amr-for-r.org/reference/as.mic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"x character numeric vector. na.rm logical indicating whether missing values removed. keep_operators character specifying handle operators (> <=) input. Accepts one three values: \"\" (TRUE) keep operators, \"none\" (FALSE) remove operators, \"edges\" keep operators ends range. mic_range manual range rescale MIC values, e.g., mic_range = c(0.001, 32). Use NA prevent rescaling one side, e.g., mic_range = c(NA, 32). .mic logical indicate whether mic class kept - default TRUE rescale_mic() FALSE droplevels(). setting FALSE rescale_mic(), output factor levels acknowledge mic_range. ... Arguments passed methods.","code":""},{"path":"https://amr-for-r.org/reference/as.mic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"Ordered factor additional class mic, mathematical operations acts numeric vector. Bear mind outcome mathematical operation MICs return numeric value.","code":""},{"path":"https://amr-for-r.org/reference/as.mic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"interpret MIC values SIR values, use .sir() MIC values. supports guidelines EUCAST (2011-2025) CLSI (2011-2025). class MIC values quite special data type: formally ordered factor valid MIC values factor levels (make sure valid MIC values retained), mathematical operation acts decimal numbers:   makes possible maintain operators often come MIC values, \">=\" \"<=\", even filtering using numeric values data analysis, e.g.:   -called group generic functions implemented MIC class (!, !=, <, >=, exp(), log2()). mathematical functions also implemented (quantile(), median(), fivenum()). Since sd() var() non-generic functions, extended. Use mad() alternative, use e.g. sd(.numeric(x)) x vector MIC values. Using .double() .numeric() MIC values remove operators return numeric vector. use .integer() MIC values R convention factors, return index factor levels (often useless regular users). function .mic() detects input contains class mic. input data.frame list, iterates columns/items returns logical vector. Use droplevels() drop unused levels. default, return plain factor. Use droplevels(..., .mic = TRUE) maintain mic class. rescale_mic(), existing MIC ranges can limited defined range MIC values. can useful better compare MIC distributions. ggplot2, use one scale_*_mic() functions plot MIC values. allows custom MIC ranges plot intermediate log2 levels missing MIC values. NA_mic_ missing value new mic class, analogous e.g. base R's NA_character_. Use mic_p50() mic_p90() get 50th 90th percentile MIC values. return 'normal' numeric values.","code":"x <- random_mic(10) x #> Class 'mic' #>  [1] 16     1      8      8      64     >=128  0.0625 32     32     16  is.factor(x) #> [1] TRUE  x[1] * 2 #> [1] 32  median(x) #> [1] 26 x[x > 4] #> Class 'mic' #> [1] 16    8     8     64    >=128 32    32    16  df <- data.frame(x, hospital = \"A\") subset(df, x > 4) # or with dplyr: df %>% filter(x > 4) #>        x hospital #> 1     16        A #> 5     64        A #> 6  >=128        A #> 8     32        A #> 9     32        A #> 10    16        A"},{"path":[]},{"path":"https://amr-for-r.org/reference/as.mic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Input to Minimum Inhibitory Concentrations (MIC) — as.mic","text":"","code":"mic_data <- as.mic(c(\">=32\", \"1.0\", \"1\", \"1.00\", 8, \"<=0.128\", \"8\", \"16\", \"16\")) mic_data #> Class 'mic' #> [1] >=32    1       1       1       8       <=0.128 8       16      16      is.mic(mic_data) #> [1] TRUE  # this can also coerce combined MIC/SIR values: as.mic(\"<=0.002; S\") #> Class 'mic' #> [1] <=0.002  # mathematical processing treats MICs as numeric values fivenum(mic_data) #> [1]  0.128  1.000  8.000 16.000 32.000 quantile(mic_data) #>     0%    25%    50%    75%   100%  #>  0.128  1.000  8.000 16.000 32.000  all(mic_data < 512) #> [1] TRUE  # rescale MICs using rescale_mic() rescale_mic(mic_data, mic_range = c(4, 16)) #> Class 'mic' #> [1] >=16 <=4  <=4  <=4  8    <=4  8    >=16 >=16  # interpret MIC values as.sir(   x = as.mic(2),   mo = as.mo(\"Streptococcus pneumoniae\"),   ab = \"AMX\",   guideline = \"EUCAST\" ) #> Class 'sir' #> [1] R as.sir(   x = as.mic(c(0.01, 2, 4, 8)),   mo = as.mo(\"Streptococcus pneumoniae\"),   ab = \"AMX\",   guideline = \"EUCAST\" ) #> Class 'sir' #> [1] S R R R  # plot MIC values, see ?plot plot(mic_data)  plot(mic_data, mo = \"E. coli\", ab = \"cipro\")   if (require(\"ggplot2\")) {   autoplot(mic_data, mo = \"E. coli\", ab = \"cipro\") }  if (require(\"ggplot2\")) {   autoplot(mic_data, mo = \"E. coli\", ab = \"cipro\", language = \"nl\") # Dutch }"},{"path":"https://amr-for-r.org/reference/as.mo.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"Use function get valid microorganism code (mo) based arbitrary user input. Determination done using intelligent rules complete taxonomic tree kingdoms Animalia, Archaea, Bacteria, Chromista, Protozoa, microbial species kingdom Fungi (see Source). input can almost anything: full name (like \"Staphylococcus aureus\"), abbreviated name (\"S. aureus\"), abbreviation known field (\"MRSA\"), just genus. See Examples.","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"","code":"as.mo(x, Becker = FALSE, Lancefield = FALSE,   minimum_matching_score = NULL,   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE),   reference_df = get_mo_source(),   ignore_pattern = getOption(\"AMR_ignore_pattern\", NULL),   cleaning_regex = getOption(\"AMR_cleaning_regex\", mo_cleaning_regex()),   only_fungi = getOption(\"AMR_only_fungi\", FALSE),   language = get_AMR_locale(), info = interactive(), ...)  is.mo(x)  mo_uncertainties()  mo_renamed()  mo_failures()  mo_reset_session()  mo_cleaning_regex()"},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"x character vector data.frame one two columns. Becker logical indicate whether staphylococci categorised coagulase-negative staphylococci (\"CoNS\") coagulase-positive staphylococci (\"CoPS\") instead species, according Karsten Becker et al. (see Source). Please see Details full list staphylococcal species converted. excludes Staphylococcus aureus default, use Becker = \"\" also categorise S. aureus \"CoPS\". Lancefield logical indicate whether beta-haemolytic Streptococcus categorised Lancefield groups instead species, according Rebecca C. Lancefield (see Source). streptococci categorised first group, e.g. Streptococcus dysgalactiae group C, although officially also categorised groups G L. . Please see Details full list streptococcal species converted. excludes enterococci default (group D), use Lancefield = \"\" also categorise enterococci group D. minimum_matching_score numeric value set lower limit MO matching score. left blank, determined automatically based character length x, taxonomic kingdom human pathogenicity. keep_synonyms logical indicate old, previously valid taxonomic names must preserved corrected currently accepted names. default FALSE, return note old taxonomic names processed. default can set package option AMR_keep_synonyms, .e. options(AMR_keep_synonyms = TRUE) options(AMR_keep_synonyms = FALSE). reference_df data.frame used extra reference translating x valid mo. See set_mo_source() get_mo_source() automate usage codes (e.g. used analysis organisation). ignore_pattern Perl-compatible regular expression (case-insensitive) matches x must return NA. can convenient exclude known non-relevant input can also set package option AMR_ignore_pattern, e.g. options(AMR_ignore_pattern = \"(reported|contaminated flora)\"). cleaning_regex Perl-compatible regular expression (case-insensitive) clean input x. Every matched part x removed. default, outcome mo_cleaning_regex(), removes texts brackets texts \"species\" \"serovar\". default can set package option AMR_cleaning_regex. only_fungi logical indicate fungi must found, making sure e.g. misspellings always return records kingdom Fungi. can set globally microorganism functions package option AMR_only_fungi, .e. options(AMR_only_fungi = TRUE). language Language translate text like \"growth\", defaults system language (see get_AMR_locale()). info logical indicate info must printed, e.g. progress bar 25 items coerced, list old taxonomic names. default TRUE interactive mode. ... arguments passed functions.","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"character vector additional class mo","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"microorganism (MO) code package (class: mo) human-readable typically looks like examples:   Values coerced considered 'unknown' return MO code UNKNOWN warning. Use mo_* functions get properties based returned code, see Examples. .mo() function uses novel scientifically validated (doi:10.18637/jss.v104.i03 ) matching score algorithm (see Matching Score Microorganisms ) match input available microbial taxonomy package. implicates e.g. \"E. coli\" (microorganism highly prevalent humans) return microbial ID Escherichia coli Entamoeba coli (microorganism less prevalent humans), although latter alphabetically come first.","code":"Code               Full name   ---------------    --------------------------------------   B_KLBSL            Klebsiella   B_KLBSL_PNMN       Klebsiella pneumoniae   B_KLBSL_PNMN_RHNS  Klebsiella pneumoniae rhinoscleromatis   |   |    |    |   |   |    |    |   |   |    |    \\---> subspecies, a 3-5 letter acronym   |   |    \\----> species, a 3-6 letter acronym   |   \\----> genus, a 4-8 letter acronym   \\----> kingdom: A (Archaea), AN (Animalia), B (Bacteria),                   C (Chromista), F (Fungi), PL (Plantae),                   P (Protozoa)"},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"coping-with-uncertain-results","dir":"Reference","previous_headings":"","what":"Coping with Uncertain Results","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"Results non-exact taxonomic input based matching score. lowest allowed score can set minimum_matching_score argument. default determined based character length input, taxonomic kingdom, human pathogenicity taxonomic outcome. values matched uncertainty, message shown suggest user inspect results mo_uncertainties(), returns data.frame specifications. increase quality matching, cleaning_regex argument used clean input. must regular expression matches parts input removed input matched available microbial taxonomy. matched Perl-compatible case-insensitive. default value cleaning_regex outcome helper function mo_cleaning_regex(). three helper functions can run using .mo() function: Use mo_uncertainties() get data.frame prints pretty format taxonomic names guessed. output contains matching score matches (see Matching Score Microorganisms ). Use mo_failures() get character vector values coerced valid value. Use mo_renamed() get data.frame values coerced based old, previously accepted taxonomic names.","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"for-mycologists","dir":"Reference","previous_headings":"","what":"For Mycologists","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"matching score algorithm gives precedence bacteria fungi. analysing fungi, sure use only_fungi = TRUE, better yet, add code run every session:   make sure bacteria 'non-fungi' returned .mo(), mo_* functions.","code":"options(AMR_only_fungi = TRUE)"},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"coagulase-negative-and-coagulase-positive-staphylococci","dir":"Reference","previous_headings":"","what":"Coagulase-negative and Coagulase-positive Staphylococci","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"Becker = TRUE, following staphylococci converted corresponding coagulase group: Coagulase-negative: S. americanisciuri, S. argensis, S. arlettae, S. auricularis, S. borealis, S. brunensis, S. caeli, S. caledonicus, S. canis, S. capitis, S. capitis capitis, S. capitis urealyticus, S. capitis ureolyticus, S. caprae, S. carnosus, S. carnosus carnosus, S. carnosus utilis, S. casei, S. caseolyticus, S. chromogenes, S. cohnii, S. cohnii cohnii, S. cohnii urealyticum, S. cohnii urealyticus, S. condimenti, S. croceilyticus, S. debuckii, S. devriesei, S. durrellii, S. edaphicus, S. epidermidis, S. equorum, S. equorum equorum, S. equorum linens, S. felis, S. fleurettii, S. gallinarum, S. haemolyticus, S. hominis, S. hominis hominis, S. hominis novobiosepticus, S. jettensis, S. kloosii, S. lentus, S. lloydii, S. lugdunensis, S. marylandisciuri, S. massiliensis, S. microti, S. muscae, S. nepalensis, S. pasteuri, S. petrasii, S. petrasii croceilyticus, S. petrasii jettensis, S. petrasii petrasii, S. petrasii pragensis, S. pettenkoferi, S. piscifermentans, S. pragensis, S. pseudoxylosus, S. pulvereri, S. ratti, S. rostri, S. saccharolyticus, S. saprophyticus, S. saprophyticus bovis, S. saprophyticus saprophyticus, S. schleiferi, S. schleiferi schleiferi, S. sciuri, S. sciuri carnaticus, S. sciuri lentus, S. sciuri rodentium, S. sciuri sciuri, S. shinii, S. simulans, S. stepanovicii, S. succinus, S. succinus casei, S. succinus succinus, S. taiwanensis, S. urealyticus, S. ureilyticus, S. veratri, S. vitulinus, S. vitulus, S. warneri, S. xylosus Coagulase-positive: S. agnetis, S. argenteus, S. coagulans, S. cornubiensis, S. delphini, S. hyicus, S. hyicus chromogenes, S. hyicus hyicus, S. intermedius, S. lutrae, S. pseudintermedius, S. roterodami, S. schleiferi coagulans, S. schweitzeri, S. simiae, S. singaporensis based : Becker K et al. (2014). Coagulase-Negative Staphylococci. Clin Microbiol Rev. 27(4): 870-926; doi:10.1128/CMR.00109-13 Becker K et al. (2019). Implications identifying recently defined members S. aureus complex, S. argenteus S. schweitzeri: position paper members ESCMID Study Group staphylococci Staphylococcal Diseases (ESGS). Clin Microbiol Infect; doi:10.1016/j.cmi.2019.02.028 Becker K et al. (2020). Emergence coagulase-negative staphylococci. Expert Rev Anti Infect Ther. 18(4):349-366; doi:10.1080/14787210.2020.1730813 newly named staphylococcal species, S. brunensis (2024) S. shinii (2023), looked scientific reference make sure species considered correct coagulase group.","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"lancefield-groups-in-streptococci","dir":"Reference","previous_headings":"","what":"Lancefield Groups in Streptococci","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"Lancefield = TRUE, following streptococci converted corresponding Lancefield group: Streptococcus Group : S. pyogenes Streptococcus Group B: S. agalactiae Streptococcus Group C: S. dysgalactiae, S. dysgalactiae dysgalactiae, S. dysgalactiae equisimilis, S. equi, S. equi equi, S. equi ruminatorum, S. equi zooepidemicus Streptococcus Group F: S. anginosus, S. anginosus anginosus, S. anginosus whileyi, S. constellatus, S. constellatus constellatus, S. constellatus pharyngis, S. constellatus viborgensis, S. intermedius Streptococcus Group G: S. canis, S. dysgalactiae, S. dysgalactiae dysgalactiae, S. dysgalactiae equisimilis Streptococcus Group H: S. sanguinis Streptococcus Group K: S. salivarius, S. salivarius salivarius, S. salivarius thermophilus Streptococcus Group L: S. dysgalactiae, S. dysgalactiae dysgalactiae, S. dysgalactiae equisimilis based : Lancefield RC (1933). serological differentiation human groups hemolytic streptococci. J Exp Med. 57(4): 571-95; doi:10.1084/jem.57.4.571","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"Berends MS et al. (2022). AMR: R Package Working Antimicrobial Resistance Data. Journal Statistical Software, 104(3), 1-31; doi:10.18637/jss.v104.i03 Parte, AC et al. (2020). List Prokaryotic names Standing Nomenclature (LPSN) moves DSMZ. International Journal Systematic Evolutionary Microbiology, 70, 5607-5612; doi:10.1099/ijsem.0.004332 . Accessed https://lpsn.dsmz.de June 24th, 2024. Vincent, R et al (2013). MycoBank gearing new horizons. IMA Fungus, 4(2), 371-9; doi:10.5598/imafungus.2013.04.02.16 . Accessed https://www.mycobank.org June 24th, 2024. GBIF Secretariat (2023). GBIF Backbone Taxonomy. Checklist dataset doi:10.15468/39omei . Accessed https://www.gbif.org June 24th, 2024. Reimer, LC et al. (2022). BacDive 2022: knowledge base standardized bacterial archaeal data. Nucleic Acids Res., 50(D1):D741-D74; doi:10.1093/nar/gkab961 . Accessed https://bacdive.dsmz.de July 16th, 2024. Public Health Information Network Vocabulary Access Distribution System (PHIN VADS). US Edition SNOMED CT 1 September 2020. Value Set Name 'Microorganism', OID 2.16.840.1.114222.4.11.1009 (v12). URL: https://www.cdc.gov/phin/php/phinvads/ Bartlett et al. (2022). comprehensive list bacterial pathogens infecting humans Microbiology 168:001269; doi:10.1099/mic.0.001269","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"matching-score-for-microorganisms","dir":"Reference","previous_headings":"","what":"Matching Score for Microorganisms","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"ambiguous user input .mo() mo_* functions, returned results chosen based matching score using mo_matching_score(). matching score \\(m\\), calculated : $$m_{(x, n)} = \\frac{l_{n} - 0.5 \\cdot \\min \\begin{cases}l_{n} \\\\ \\textrm{lev}(x, n)\\end{cases}}{l_{n} \\cdot p_{n} \\cdot k_{n}}$$ : \\(x\\) user input; \\(n\\) taxonomic name (genus, species, subspecies); \\(l_n\\) length \\(n\\); \\(lev\\) Levenshtein distance function (counting insertion 1, deletion substitution 2) needed change \\(x\\) \\(n\\); \\(p_n\\) human pathogenic prevalence group \\(n\\), described ; \\(k_n\\) taxonomic kingdom \\(n\\), set Bacteria = 1, Fungi = 1.25, Protozoa = 1.5, Chromista = 1.75, Archaea = 2, others = 3. grouping human pathogenic prevalence \\(p\\) based recent work Bartlett et al. (2022, doi:10.1099/mic.0.001269 ) extensively studied medical-scientific literature categorise bacterial species groups: Established, taxonomic species infected least three persons three references. records prevalence = 1.15 microorganisms data set; Putative, taxonomic species fewer three known cases. records prevalence = 1.25 microorganisms data set. Furthermore, Genera World Health Organization's () Priority Pathogen List prevalence = 1.0 microorganisms data set; genus present established list also prevalence = 1.15 microorganisms data set; genus present putative list prevalence = 1.25 microorganisms data set; species subspecies genus present two aforementioned groups, prevalence = 1.5 microorganisms data set; non-bacterial genus, species subspecies genus present following list, prevalence = 1.25 microorganisms data set: Absidia, Acanthamoeba, Acremonium, Actinomucor, Aedes, Alternaria, Amoeba, Ancylostoma, Angiostrongylus, Anisakis, Anopheles, Apophysomyces, Arthroderma, Aspergillus, Aureobasidium, Basidiobolus, Beauveria, Bipolaris, Blastobotrys, Blastocystis, Blastomyces, Candida, Capillaria, Chaetomium, Chilomastix, Chrysonilia, Chrysosporium, Cladophialophora, Cladosporium, Clavispora, Coccidioides, Cokeromyces, Conidiobolus, Coniochaeta, Contracaecum, Cordylobia, Cryptococcus, Cryptosporidium, Cunninghamella, Curvularia, Cyberlindnera, Debaryozyma, Demodex, Dermatobia, Dientamoeba, Diphyllobothrium, Dirofilaria, Echinostoma, Entamoeba, Enterobius, Epidermophyton, Exidia, Exophiala, Exserohilum, Fasciola, Fonsecaea, Fusarium, Geotrichum, Giardia, Graphium, Haloarcula, Halobacterium, Halococcus, Hansenula, Hendersonula, Heterophyes, Histomonas, Histoplasma, Hortaea, Hymenolepis, Hypomyces, Hysterothylacium, Kloeckera, Kluyveromyces, Kodamaea, Lacazia, Leishmania, Lichtheimia, Lodderomyces, Lomentospora, Madurella, Malassezia, Malbranchea, Metagonimus, Meyerozyma, Microsporidium, Microsporum, Millerozyma, Mortierella, Mucor, Mycocentrospora, Nannizzia, Necator, Nectria, Ochroconis, Oesophagostomum, Oidiodendron, Opisthorchis, Paecilomyces, Paracoccidioides, Pediculus, Penicillium, Phaeoacremonium, Phaeomoniella, Phialophora, Phlebotomus, Phoma, Pichia, Piedraia, Pithomyces, Pityrosporum, Pneumocystis, Pseudallescheria, Pseudoscopulariopsis, Pseudoterranova, Pulex, Purpureocillium, Quambalaria, Rhinocladiella, Rhizomucor, Rhizopus, Rhodotorula, Saccharomyces, Saksenaea, Saprochaete, Sarcoptes, Scedosporium, Schistosoma, Schizosaccharomyces, Scolecobasidium, Scopulariopsis, Scytalidium, Spirometra, Sporobolomyces, Sporopachydermia, Sporothrix, Sporotrichum, Stachybotrys, Strongyloides, Syncephalastrum, Syngamus, Taenia, Talaromyces, Teleomorph, Toxocara, Trichinella, Trichobilharzia, Trichoderma, Trichomonas, Trichophyton, Trichosporon, Trichostrongylus, Trichuris, Tritirachium, Trombicula, Trypanosoma, Tunga, Ulocladium, Ustilago, Verticillium, Wallemia, Wangiella, Wickerhamomyces, Wuchereria, Yarrowia, Zygosaccharomyces; records prevalence = 2.0 microorganisms data set. calculating matching score, characters \\(x\\) \\(n\\) ignored -Z, -z, 0-9, spaces parentheses. matches sorted descending matching score user input values, top match returned. lead effect e.g., \"E. coli\" return microbial ID Escherichia coli (\\(m = 0.688\\), highly prevalent microorganism found humans) Entamoeba coli (\\(m = 0.381\\), less prevalent microorganism humans), although latter alphabetically come first.","code":""},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/as.mo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Arbitrary Input to Valid Microbial Taxonomy — as.mo","text":"","code":"# \\donttest{ # These examples all return \"B_STPHY_AURS\", the ID of S. aureus: as.mo(c(   \"sau\", # WHONET code   \"stau\",   \"STAU\",   \"staaur\",   \"S. aureus\",   \"S aureus\",   \"Sthafilokkockus aureus\", # handles incorrect spelling   \"Staphylococcus aureus (MRSA)\",   \"MRSA\", # Methicillin Resistant S. aureus   \"VISA\", # Vancomycin Intermediate S. aureus   \"VRSA\", # Vancomycin Resistant S. aureus   115329001 # SNOMED CT code )) #> Class 'mo' #>  [1] B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS #>  [6] B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS B_STPHY_AURS #> [11] B_STPHY_AURS B_STPHY_AURS  # Dyslexia is no problem - these all work: as.mo(c(   \"Ureaplasma urealyticum\",   \"Ureaplasma urealyticus\",   \"Ureaplasmium urealytica\",   \"Ureaplazma urealitycium\" )) #> Class 'mo' #> [1] B_URPLS_URLY B_URPLS_URLY B_URPLS_URLY B_URPLS_URLY  # input will get cleaned up with the input given in the `cleaning_regex` argument, # which defaults to `mo_cleaning_regex()`: cat(mo_cleaning_regex(), \"\\n\") #> ([^A-Za-z- \\(\\)\\[\\]{}]+|([({]|\\[).+([})]|\\])|(^| )( ?[a-z-]+[-](resistant|susceptible) ?|e?spp([^a-z]+|$)|e?ssp([^a-z]+|$)|serogr.?up[a-z]*|e?ss([^a-z]+|$)|e?sp([^a-z]+|$)|var([^a-z]+|$)|serovar[a-z]*|sube?species|biovar[a-z]*|e?species|Ig[ADEGM]|e?subsp|biotype|titer|dummy))   as.mo(\"Streptococcus group A\") #> Class 'mo' #> [1] B_STRPT_GRPA  as.mo(\"S. epidermidis\") # will remain species: B_STPHY_EPDR #> Class 'mo' #> [1] B_STPHY_EPDR as.mo(\"S. epidermidis\", Becker = TRUE) # will not remain species: B_STPHY_CONS #> Class 'mo' #> [1] B_STPHY_CONS  as.mo(\"S. pyogenes\") # will remain species: B_STRPT_PYGN #> Class 'mo' #> [1] B_STRPT_PYGN as.mo(\"S. pyogenes\", Lancefield = TRUE) # will not remain species: B_STRPT_GRPA #> Class 'mo' #> [1] B_STRPT_GRPA  # All mo_* functions use as.mo() internally too (see ?mo_property): mo_genus(\"E. coli\") #> [1] \"Escherichia\" mo_gramstain(\"ESCO\") #> [1] \"Gram-negative\" mo_is_intrinsic_resistant(\"ESCCOL\", ab = \"vanco\") #> ℹ Determining intrinsic resistance based on 'EUCAST Expected Resistant #>   Phenotypes' v1.2 (2023). This note will be shown once per session. #> [1] TRUE # }"},{"path":"https://amr-for-r.org/reference/as.sir.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"Clean existing SIR values, interpret minimum inhibitory concentration (MIC) values disk diffusion diameters according EUCAST CLSI. .sir() transforms input new class sir, ordered factor containing levels S, SDD, , R, NI. Breakpoints currently implemented EUCAST 2011-2025 CLSI 2011-2025, see Details. breakpoints used interpretation available clinical_breakpoints data set.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"","code":"as.sir(x, ...)  NA_sir_  is.sir(x)  is_sir_eligible(x, threshold = 0.05)  # Default S3 method as.sir(x, S = \"^(S|U)+$\", I = \"^(I)+$\", R = \"^(R)+$\",   NI = \"^(N|NI|V)+$\", SDD = \"^(SDD|D|H)+$\", info = interactive(), ...)  # S3 method for class 'mic' as.sir(x, mo = NULL, ab = deparse(substitute(x)),   guideline = getOption(\"AMR_guideline\", \"EUCAST\"), uti = NULL,   capped_mic_handling = getOption(\"AMR_capped_mic_handling\", \"standard\"),   add_intrinsic_resistance = FALSE,   reference_data = AMR::clinical_breakpoints,   substitute_missing_r_breakpoint = getOption(\"AMR_substitute_missing_r_breakpoint\",   FALSE), include_screening = getOption(\"AMR_include_screening\", FALSE),   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), host = NULL,   language = get_AMR_locale(), verbose = FALSE, info = interactive(),   conserve_capped_values = NULL, ...)  # S3 method for class 'disk' as.sir(x, mo = NULL, ab = deparse(substitute(x)),   guideline = getOption(\"AMR_guideline\", \"EUCAST\"), uti = NULL,   add_intrinsic_resistance = FALSE,   reference_data = AMR::clinical_breakpoints,   substitute_missing_r_breakpoint = getOption(\"AMR_substitute_missing_r_breakpoint\",   FALSE), include_screening = getOption(\"AMR_include_screening\", FALSE),   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), host = NULL,   language = get_AMR_locale(), verbose = FALSE, info = interactive(),   ...)  # S3 method for class 'data.frame' as.sir(x, ..., col_mo = NULL,   guideline = getOption(\"AMR_guideline\", \"EUCAST\"), uti = NULL,   capped_mic_handling = getOption(\"AMR_capped_mic_handling\", \"standard\"),   add_intrinsic_resistance = FALSE,   reference_data = AMR::clinical_breakpoints,   substitute_missing_r_breakpoint = getOption(\"AMR_substitute_missing_r_breakpoint\",   FALSE), include_screening = getOption(\"AMR_include_screening\", FALSE),   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), host = NULL,   language = get_AMR_locale(), verbose = FALSE, info = interactive(),   parallel = FALSE, max_cores = -1, conserve_capped_values = NULL)  sir_interpretation_history(clean = FALSE)"},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"interpretations minimum inhibitory concentration (MIC) values disk diffusion diameters: CLSI M39: Analysis Presentation Cumulative Antimicrobial Susceptibility Test Data, 2011-2025, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/microbiology/documents/m39/. CLSI M100: Performance Standard Antimicrobial Susceptibility Testing, 2011-2025, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/microbiology/documents/m100/. CLSI VET01: Performance Standards Antimicrobial Disk Dilution Susceptibility Tests Bacteria Isolated Animals, 2019-2025, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/veterinary-medicine/documents/vet01/. EUCAST Breakpoint tables interpretation MICs zone diameters, 2011-2025, European Committee Antimicrobial Susceptibility Testing (EUCAST). https://www.eucast.org/clinical_breakpoints. WHONET source machine-reading clinical breakpoints (read ), 1989-2025, Collaborating Centre Surveillance Antimicrobial Resistance. https://whonet.org/.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"x Vector values (class mic: MIC values mg/L, class disk: disk diffusion radius millimetres). ... using data.frame: selection columns apply .sir() . Supports tidyselect language (.mic), starts_with(...), column1:column4, can thus also antimicrobial selectors .sir(df, penicillins()). Otherwise: arguments passed methods. threshold Maximum fraction invalid antimicrobial interpretations x, see Examples. S, , R, NI, SDD case-independent regular expression translate input result. regular expression run non-letters whitespaces removed input. info logical print information process, defaults TRUE interactive sessions. mo vector (column name) characters can coerced valid microorganism codes .mo(), can left empty determine automatically. ab vector (column name) characters can coerced valid antimicrobial drug code .ab(). guideline guideline name (column name) use SIR interpretation. Defaults EUCAST 2025 (latest implemented EUCAST guideline clinical_breakpoints data set), can set package option AMR_guideline. Currently supports EUCAST (2011-2025) CLSI (2011-2025), see Details. Using column name allows straightforward interpretation historical data, must analysed context , example, different years. uti (Urinary Tract Infection) vector (column name) logicals (TRUE FALSE) specify whether UTI specific interpretation guideline chosen. using .sir() data.frame, can also column containing logicals left blank, data set searched column 'specimen', rows within column containing 'urin' ('urine', 'urina') regarded isolates UTI. See Examples. capped_mic_handling character string controls MIC values cap (.e., starting <, <=, >, >=) interpreted. Supports following options: \"none\" <= >= treated -. < > treated -. \"conservative\" <= >= return \"NI\" (non-interpretable) MIC within breakpoint guideline range. < always returns \"S\", > always returns \"R\". \"standard\" (default) <= >= return \"NI\" (non-interpretable) MIC within breakpoint guideline range. < > treated -. \"inverse\" <= >= treated -. < always returns \"S\", > always returns \"R\". default \"standard\" setting ensures cautious handling uncertain values preserving interpretability. option can also set package option AMR_capped_mic_handling. add_intrinsic_resistance (useful using EUCAST guideline) logical indicate whether intrinsic antibiotic resistance must also considered applicable bug-drug combinations, meaning e.g. ampicillin always return \"R\" Klebsiella species. Determination based intrinsic_resistant data set, based 'EUCAST Expert Rules' 'EUCAST Intrinsic Resistance Unusual Phenotypes' v3.3 (2021). reference_data data.frame used interpretation, defaults clinical_breakpoints data set. Changing argument allows using interpretation guidelines. argument must contain data set equal structure clinical_breakpoints data set (column names column types). Please note guideline argument ignored reference_data manually set. substitute_missing_r_breakpoint logical indicate missing clinical breakpoints R (resistant) must substituted R - default FALSE. (especially CLSI) breakpoints breakpoint S, meaning outcome can \"S\" NA. Setting TRUE convert NAs cases \"R\". Can also set package option AMR_substitute_missing_r_breakpoint. include_screening logical indicate clinical breakpoints screening allowed - default FALSE. Can also set package option AMR_include_screening. include_PKPD logical indicate PK/PD clinical breakpoints must applied last resort - default TRUE. Can also set package option AMR_include_PKPD. breakpoint_type type breakpoints use, either \"ECOFF\", \"animal\", \"human\". ECOFF stands Epidemiological Cut-values. default \"human\", can also set package option AMR_breakpoint_type. host set values veterinary species, automatically set \"animal\". host vector (column name) characters indicate host. useful veterinary breakpoints, requires breakpoint_type = \"animal\". values can text resembling animal species, even 28 supported languages package. foreign languages, sure set language set_AMR_locale() (though automatically guessed based system language). language Language convert values set host using animal breakpoints. Use one supported language names ISO 639-1 codes: English (en), Arabic (ar), Bengali (bn), Chinese (zh), Czech (cs), Danish (da), Dutch (nl), Finnish (fi), French (fr), German (de), Greek (el), Hindi (hi), Indonesian (id), Italian (), Japanese (ja), Korean (ko), Norwegian (), Polish (pl), Portuguese (pt), Romanian (ro), Russian (ru), Spanish (es), Swahili (sw), Swedish (sv), Turkish (tr), Ukrainian (uk), Urdu (ur), Vietnamese (vi). verbose logical indicate notes printed interpretation MIC values disk diffusion values. conserve_capped_values Deprecated, use capped_mic_handling instead. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). parallel logical indicate parallel computing must used, defaults FALSE. requires additional packages, used parallel package part base R. Windows R < 4.0.0 parallel::parLapply() used, cases efficient parallel::mclapply() used. max_cores Maximum number cores use parallel = TRUE. Use negative value subtract number available number cores, e.g. value -2 8-core machine means 6 cores used. Defaults -1. never used cores variables analyse. available number cores detected using parallelly::availableCores() package installed, base R's parallel::detectCores() otherwise. clean logical indicate whether previously stored results forgotten returning 'logbook' results.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"Ordered factor new class sir","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"Note: clinical breakpoints package validated , imported , WHONET. public use AMR package endorsed CLSI EUCAST. See clinical_breakpoints information. NA_sir_ missing value new sir class, analogous e.g. base R's NA_character_.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How it Works","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":".sir() function can work four ways: cleaning raw / untransformed data. data cleaned contain valid values, namely: S susceptible, intermediate 'susceptible, increased exposure', R resistant, NI non-interpretable, SDD susceptible dose-dependent. can set using regular expression. Furthermore, .sir() try best clean intelligence. example, mixed values SIR interpretations MIC values \"<0.25; S\" coerced \"S\". Combined interpretations multiple test methods (seen laboratory records) \"S; S\" coerced \"S\", value like \"S; \" return NA warning input invalid. interpreting minimum inhibitory concentration (MIC) values according EUCAST CLSI. must clean MIC values first using .mic(), also gives columns new data class mic. Also, sure column microorganism names codes. found automatically, can set manually using mo argument. Example apply using dplyr:   Operators like \"<=\" stripped interpretation. using capped_mic_handling = \"conservative\", MIC value e.g. \">2\" always return \"R\", even breakpoint according chosen guideline \">=4\". prevent capped values raw laboratory data treated conservatively. default behaviour (capped_mic_handling = \"standard\") considers \">2\" lower \">=4\" might case return \"S\" \"\". Note: using CLSI guideline, MIC values must log2-based doubling dilutions. Values format, automatically rounded nearest log2 level CLSI instructs, warning thrown. interpreting disk diffusion diameters according EUCAST CLSI. must clean disk zones first using .disk(), also gives columns new data class disk. Also, sure column microorganism names codes. found automatically, can set manually using mo argument. Example apply using dplyr:   interpreting complete data set, automatic determination MIC values, disk diffusion diameters, microorganism names codes, antimicrobial test results. done simply running .sir(your_data). points 2, 3 4: Use sir_interpretation_history() retrieve data.frame results previous .sir() calls. also contains notes interpretation, exact input output values.","code":"your_data %>% mutate_if(is.mic, as.sir) your_data %>% mutate(across(where(is.mic), as.sir)) your_data %>% mutate_if(is.mic, as.sir, ab = \"column_with_antibiotics\", mo = \"column_with_microorganisms\") your_data %>% mutate_if(is.mic, as.sir, ab = c(\"cipro\", \"ampicillin\", ...), mo = c(\"E. coli\", \"K. pneumoniae\", ...))  # for veterinary breakpoints, also set `host`: your_data %>% mutate_if(is.mic, as.sir, host = \"column_with_animal_species\", guideline = \"CLSI\")  # fast processing with parallel computing: as.sir(your_data, ..., parallel = TRUE) your_data %>% mutate_if(is.disk, as.sir) your_data %>% mutate(across(where(is.disk), as.sir)) your_data %>% mutate_if(is.disk, as.sir, ab = \"column_with_antibiotics\", mo = \"column_with_microorganisms\") your_data %>% mutate_if(is.disk, as.sir, ab = c(\"cipro\", \"ampicillin\", ...), mo = c(\"E. coli\", \"K. pneumoniae\", ...))  # for veterinary breakpoints, also set `host`: your_data %>% mutate_if(is.disk, as.sir, host = \"column_with_animal_species\", guideline = \"CLSI\")  # fast processing with parallel computing: as.sir(your_data, ..., parallel = TRUE)"},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"supported-guidelines","dir":"Reference","previous_headings":"","what":"Supported Guidelines","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"interpreting MIC values well disk diffusion diameters, currently implemented guidelines : clinical microbiology: EUCAST 2011-2025 CLSI 2011-2025; veterinary microbiology: EUCAST 2021-2025 CLSI 2019-2025; ECOFFs (Epidemiological Cut-Values): EUCAST 2020-2025 CLSI 2022-2025. guideline argument must set e.g., \"EUCAST 2025\" \"CLSI 2025\". simply using \"EUCAST\" (default) \"CLSI\" input, latest included version guideline automatically selected. Importantly, using column name data instead, allows straightforward interpretation historical data must analysed context , example, different years. can set data set using reference_data argument. guideline argument ignored. also possible set default guideline package option AMR_guideline (e.g. .Rprofile file), :","code":"options(AMR_guideline = \"CLSI\")   options(AMR_guideline = \"CLSI 2018\")   options(AMR_guideline = \"EUCAST 2020\")   # or to reset:   options(AMR_guideline = NULL)"},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"working-with-veterinary-breakpoints","dir":"Reference","previous_headings":"","what":"Working with Veterinary Breakpoints","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"using veterinary breakpoints (.e., setting breakpoint_type = \"animal\"), column animal species must available set manually using host argument. column must contain names like \"dogs\", \"cats\", \"cattle\", \"swine\", \"horses\", \"poultry\", \"aquatic\". animal names like \"goats\", \"rabbits\", \"monkeys\" also recognised may available guidelines. Matching case-insensitive accepts Latin-based synonyms (e.g., \"bovine\" cattle \"canine\" dogs). Regarding choice veterinary guidelines, might best options set analysis:","code":"options(AMR_guideline = \"CLSI\")   options(AMR_breakpoint_type = \"animal\")"},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"after-interpretation","dir":"Reference","previous_headings":"","what":"After Interpretation","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"using .sir(), can use eucast_rules() defined EUCAST (1) apply inferred susceptibility resistance based results antimicrobials (2) apply intrinsic resistance based taxonomic properties microorganism. determine isolates multi-drug resistant, sure run mdro() (applies MDR/PDR/XDR guideline 2012 default) data set contains S//R values. Read interpreting multidrug-resistant organisms .","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"other","dir":"Reference","previous_headings":"","what":"Other","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"function .sir() detects input contains class sir. input data.frame list, iterates columns/items returns logical vector. base R function .double() can used retrieve quantitative values sir object: \"S\" = 1, \"\"/\"SDD\" = 2, \"R\" = 3. values rendered NA. Note: use .integer(), since (R works internally) return factor level indices, aforementioned quantitative values. function is_sir_eligible() returns TRUE column contains 5% potentially invalid antimicrobial interpretations, FALSE otherwise. threshold 5% can set threshold argument. input data.frame, iterates columns returns logical vector.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"interpretation-of-sir","dir":"Reference","previous_headings":"","what":"Interpretation of SIR","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"2019, European Committee Antimicrobial Susceptibility Testing (EUCAST) decided change definitions susceptibility testing categories S, , R (https://www.eucast.org/newsiandr). AMR package follows insight; use susceptibility() (equal proportion_SI()) determine antimicrobial susceptibility count_susceptible() (equal count_SI()) count susceptible isolates.","code":""},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/as.sir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret MIC and Disk Diffusion as SIR, or Clean Existing SIR Data — as.sir","text":"","code":"example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  summary(example_isolates[, 1:10]) # see all SIR results at a glance #>       date              patient               age           gender          #>  Min.   :2002-01-02   Length:2000        Min.   : 0.00   Length:2000        #>  1st Qu.:2005-07-31   Class :character   1st Qu.:63.00   Class :character   #>  Median :2009-07-31   Mode  :character   Median :74.00   Mode  :character   #>  Mean   :2009-11-20                      Mean   :70.69                      #>  3rd Qu.:2014-05-30                      3rd Qu.:82.00                      #>  Max.   :2017-12-28                      Max.   :97.00                      #>      ward                mo                  PEN                 #>  Length:2000        Class :mo             Class:sir              #>  Class :character   <NA>  :0              %S   :25.6% (n=417)    #>  Mode  :character   Unique:90             %SDD : 0.0% (n=0)      #>                     #1    :B_ESCHR_COLI   %I   : 0.7% (n=11)     #>                     #2    :B_STPHY_CONS   %R   :73.7% (n=1201)   #>                     #3    :B_STPHY_AURS   %NI  : 0.0% (n=0)      #>     OXA                   FLC                   AMX                #>  Class:sir             Class:sir             Class:sir             #>  %S   :68.8% (n=251)   %S   :70.5% (n=665)   %S   :40.2% (n=543)   #>  %SDD : 0.0% (n=0)     %SDD : 0.0% (n=0)     %SDD : 0.0% (n=0)     #>  %I   : 0.0% (n=0)     %I   : 0.0% (n=0)     %I   : 0.2% (n=3)     #>  %R   :31.2% (n=114)   %R   :29.5% (n=278)   %R   :59.6% (n=804)   #>  %NI  : 0.0% (n=0)     %NI  : 0.0% (n=0)     %NI  : 0.0% (n=0)      # create some example data sets, with combined MIC values and disk zones df_wide <- data.frame(   microorganism = \"Escherichia coli\",   amoxicillin = as.mic(8),   cipro = as.mic(0.256),   tobra = as.disk(16),   genta = as.disk(18),   ERY = \"R\" ) df_long <- data.frame(   bacteria = rep(\"Escherichia coli\", 4),   antibiotic = c(\"amoxicillin\", \"cipro\", \"tobra\", \"genta\"),   mics = as.mic(c(0.01, 1, 4, 8)),   disks = as.disk(c(6, 10, 14, 18)),   guideline = c(\"EUCAST 2021\", \"EUCAST 2022\", \"EUCAST 2023\", \"EUCAST 2024\") ) # and clean previous SIR interpretation logs x <- sir_interpretation_history(clean = TRUE)   # For INTERPRETING disk diffusion and MIC values -----------------------  # most basic application: as.sir(df_wide) #>      microorganism amoxicillin cipro tobra genta ERY #> 1 Escherichia coli           S     I     S     S   R  # return a 'logbook' about the results: sir_interpretation_history() #> # A tibble: 4 × 18 #>   datetime            index method ab_given    mo_given   host_given input_given #>   <dttm>              <int> <chr>  <chr>       <chr>      <chr>      <chr>       #> 1 2025-07-17 17:15:56     1 MIC    amoxicillin Escherich… human      8           #> 2 2025-07-17 17:15:56     1 MIC    cipro       Escherich… human      0.256       #> 3 2025-07-17 17:15:57     1 DISK   tobra       Escherich… human      16          #> 4 2025-07-17 17:15:57     1 DISK   genta       Escherich… human      18          #> # ℹ 11 more variables: ab <ab>, mo <mo>, host <chr>, input <chr>, #> #   outcome <sir>, notes <chr>, guideline <chr>, ref_table <chr>, uti <lgl>, #> #   breakpoint_S_R <chr>, site <chr>  # \\donttest{ # using parallel computing, which is available in base R: as.sir(df_wide, parallel = TRUE, info = TRUE) #> ℹ Returning previously coerced values for various antimicrobials. Run #>   ab_reset_session() to reset this. This note will be shown once per #>   session. #>  #> Running in parallel mode using 3 out of 4 cores, on columns 'amoxicillin', #> 'cipro', 'tobra', 'genta', and 'ERY'... #>  DONE #>  #>  #> ℹ Run sir_interpretation_history() to retrieve a logbook with all details #>   of the breakpoint interpretations. #>      microorganism amoxicillin cipro tobra genta ERY #> 1 Escherichia coli           S     I     S     S   R   ## Using dplyr ------------------------------------------------- if (require(\"dplyr\")) {   # approaches that all work without additional arguments:   df_wide %>% mutate_if(is.mic, as.sir)   df_wide %>% mutate_if(function(x) is.mic(x) | is.disk(x), as.sir)   df_wide %>% mutate(across(where(is.mic), as.sir))    df_wide %>% mutate_at(vars(amoxicillin:tobra), as.sir)   df_wide %>% mutate(across(amoxicillin:tobra, as.sir))    df_wide %>% mutate(across(aminopenicillins(), as.sir))    # approaches that all work with additional arguments:   df_long %>%     # given a certain data type, e.g. MIC values     mutate_if(is.mic, as.sir,       mo = \"bacteria\",       ab = \"antibiotic\",       guideline = \"guideline\"     )   df_long %>%     mutate(across(       where(is.mic),       function(x) {         as.sir(x,           mo = \"bacteria\",           ab = \"antibiotic\",           guideline = \"CLSI\"         )       }     ))   df_wide %>%     # given certain columns, e.g. from 'cipro' to 'genta'     mutate_at(vars(cipro:genta), as.sir,       mo = \"bacteria\",       guideline = \"CLSI\"     )   df_wide %>%     mutate(across(       cipro:genta,       function(x) {         as.sir(x,           mo = \"bacteria\",           guideline = \"CLSI\"         )       }     ))    # for veterinary breakpoints, add 'host':   df_long$animal_species <- c(\"cats\", \"dogs\", \"horses\", \"cattle\")   df_long %>%     # given a certain data type, e.g. MIC values     mutate_if(is.mic, as.sir,       mo = \"bacteria\",       ab = \"antibiotic\",       host = \"animal_species\",       guideline = \"CLSI\"     )   df_long %>%     mutate(across(       where(is.mic),       function(x) {         as.sir(x,           mo = \"bacteria\",           ab = \"antibiotic\",           host = \"animal_species\",           guideline = \"CLSI\"         )       }     ))   df_wide %>%     mutate_at(vars(cipro:genta), as.sir,       mo = \"bacteria\",       ab = \"antibiotic\",       host = \"animal_species\",       guideline = \"CLSI\"     )   df_wide %>%     mutate(across(       cipro:genta,       function(x) {         as.sir(x,           mo = \"bacteria\",           host = \"animal_species\",           guideline = \"CLSI\"         )       }     ))    # to include information about urinary tract infections (UTI)   data.frame(     mo = \"E. coli\",     nitrofuratoin = c(\"<= 2\", 32),     from_the_bladder = c(TRUE, FALSE)   ) %>%     as.sir(uti = \"from_the_bladder\")    data.frame(     mo = \"E. coli\",     nitrofuratoin = c(\"<= 2\", 32),     specimen = c(\"urine\", \"blood\")   ) %>%     as.sir() # automatically determines urine isolates    df_wide %>%     mutate_at(vars(cipro:genta), as.sir, mo = \"E. coli\", uti = TRUE) } #> ℹ For aminopenicillins() using column 'amoxicillin' #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `across(...)`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `cipro = (function (x, ...) ...`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `across(...)`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `mics = (function (x, ...) ...`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `across(...)`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Interpreting MIC values: 'antibiotic' (ASP, acetylspiramycin), CLSI 2025... #> Interpreting disk diffusion zones: 'antibiotic' (ASP, acetylspiramycin), #> CLSI 2025... #> Interpreting disk diffusion zones: 'antibiotic' (ASP, acetylspiramycin), #> CLSI 2025... #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `cipro = (function (x, ...) ...`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `across(...)`. #> Caused by warning: #> ! Some MICs were converted to the nearest higher log2 level, following the #> CLSI interpretation guideline. #>      microorganism amoxicillin cipro tobra genta ERY #> 1 Escherichia coli           8  <NA>     S     S   R   ## Using base R ------------------------------------------------   # for single values as.sir(   x = as.mic(2),   mo = as.mo(\"S. pneumoniae\"),   ab = \"AMP\",   guideline = \"EUCAST\" ) #> Class 'sir' #> [1] R  as.sir(   x = as.disk(18),   mo = \"Strep pneu\", # `mo` will be coerced with as.mo()   ab = \"ampicillin\", # and `ab` with as.ab()   guideline = \"EUCAST\" ) #> Class 'sir' #> [1] R   # For CLEANING existing SIR values -------------------------------------  as.sir(c(\"S\", \"SDD\", \"I\", \"R\", \"NI\", \"A\", \"B\", \"C\")) #> Warning: in as.sir(): 3 results in index '21' truncated (38%) that were invalid #> antimicrobial interpretations: \"A\", \"B\", and \"C\" #> Class 'sir' #> [1] S    SDD  I    R    NI   <NA> <NA> <NA> as.sir(\"<= 0.002; S\") # will return \"S\" #> Class 'sir' #> [1] S sir_data <- as.sir(c(rep(\"S\", 474), rep(\"I\", 36), rep(\"R\", 370))) is.sir(sir_data) #> [1] TRUE plot(sir_data) # for percentages  barplot(sir_data) # for frequencies   # as common in R, you can use as.integer() to return factor indices: as.integer(as.sir(c(\"S\", \"SDD\", \"I\", \"R\", \"NI\", NA))) #> [1]  1  2  3  4  5 NA  # but for computational use, as.double() will return 1 for S, 2 for I/SDD, and 3 for R: as.double(as.sir(c(\"S\", \"SDD\", \"I\", \"R\", \"NI\", NA))) #> [1]  1  2  2  3 NA NA  # the dplyr way if (require(\"dplyr\")) {   example_isolates %>%     mutate_at(vars(PEN:RIF), as.sir)   # same:   example_isolates %>%     as.sir(PEN:RIF)    # fastest way to transform all columns with already valid AMR results to class `sir`:   example_isolates %>%     mutate_if(is_sir_eligible, as.sir)    # since dplyr 1.0.0, this can also be the more impractical:   # example_isolates %>%   #   mutate(across(where(is_sir_eligible), as.sir)) } #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … # }"},{"path":"https://amr-for-r.org/reference/atc_online.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ATC Properties from WHOCC Website — atc_online_property","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"Gets data WHOCC website determine properties Anatomical Therapeutic Chemical (ATC) (e.g. antimicrobial), name, defined daily dose (DDD) standard unit.","code":""},{"path":"https://amr-for-r.org/reference/atc_online.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"","code":"atc_online_property(atc_code, property, administration = \"O\",   url = \"https://atcddd.fhi.no/atc_ddd_index/?code=%s&showdescription=no\",   url_vet = \"https://atcddd.fhi.no/atcvet/atcvet_index/?code=%s&showdescription=no\")  atc_online_groups(atc_code, ...)  atc_online_ddd(atc_code, ...)  atc_online_ddd_units(atc_code, ...)"},{"path":"https://amr-for-r.org/reference/atc_online.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"https://atcddd.fhi./atc_ddd_alterations__cumulative/ddd_alterations/abbrevations/","code":""},{"path":"https://amr-for-r.org/reference/atc_online.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"atc_code character (vector) ATC code(s) antimicrobials, coerced .ab() ab_atc() internally valid ATC code. property Property ATC code. Valid values \"ATC\", \"Name\", \"DDD\", \"U\" (\"unit\"), \"Adm.R\", \"Note\" groups. last option, hierarchical groups ATC code returned, see Examples. administration Type administration using property = \"Adm.R\", see Details. url URL website WHOCC. sign %s can used placeholder ATC codes. url_vet URL website WHOCC veterinary medicine. sign %s can used placeholder ATC_vet codes (start \"Q\"). ... Arguments pass atc_property.","code":""},{"path":"https://amr-for-r.org/reference/atc_online.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"Options argument administration: \"Implant\" = Implant \"Inhal\" = Inhalation \"Instill\" = Instillation \"N\" = nasal \"O\" = oral \"P\" = parenteral \"R\" = rectal \"SL\" = sublingual/buccal \"TD\" = transdermal \"V\" = vaginal Abbreviations return values using property = \"U\" (unit): \"g\" = gram \"mg\" = milligram \"mcg\" = microgram \"U\" = unit \"TU\" = thousand units \"MU\" = million units \"mmol\" = millimole \"ml\" = millilitre (e.g. eyedrops) N.B. function requires internet connection works following packages installed: curl, rvest, xml2.","code":""},{"path":"https://amr-for-r.org/reference/atc_online.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ATC Properties from WHOCC Website — atc_online_property","text":"","code":"# \\donttest{ if (requireNamespace(\"curl\") && requireNamespace(\"rvest\") && requireNamespace(\"xml2\")) {   # oral DDD (Defined Daily Dose) of amoxicillin   atc_online_property(\"J01CA04\", \"DDD\", \"O\")   atc_online_ddd(ab_atc(\"amox\"))    # parenteral DDD (Defined Daily Dose) of amoxicillin   atc_online_property(\"J01CA04\", \"DDD\", \"P\")    atc_online_property(\"J01CA04\", property = \"groups\") # search hierarchical groups of amoxicillin } #> Loading required namespace: rvest #> ℹ in atc_online_property(): no properties found for ATC QG51AA03. Please #>   check #>   https://atcddd.fhi.no/atcvet/atcvet_index/?code=QG51AA03&showdescription=no. #> ℹ in atc_online_property(): no properties found for ATC QJ01CA04. Please #>   check #>   https://atcddd.fhi.no/atcvet/atcvet_index/?code=QJ01CA04&showdescription=no. #> [1] \"ANTIINFECTIVES FOR SYSTEMIC USE\"         #> [2] \"ANTIBACTERIALS FOR SYSTEMIC USE\"         #> [3] \"BETA-LACTAM ANTIBACTERIALS, PENICILLINS\" #> [4] \"Penicillins with extended spectrum\"      # }"},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"Use function e.g. clinical texts health care records. returns list antiviral drugs, doses forms administration found texts.","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"","code":"av_from_text(text, type = c(\"drug\", \"dose\", \"administration\"),   collapse = NULL, translate_av = FALSE, thorough_search = NULL,   info = interactive(), ...)"},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"text Text analyse. type Type property search , either \"drug\", \"dose\" \"administration\", see Examples. collapse character pass paste(, collapse = ...) return one character per element text, see Examples. translate_av type = \"drug\": column name antivirals data set translate antibiotic abbreviations , using av_property(). default FALSE. Using TRUE equal using \"name\". thorough_search logical indicate whether input must extensively searched misspelling faulty input values. Setting TRUE take considerably time using FALSE. default, turn TRUE input elements contain maximum three words. info logical indicate whether progress bar printed - default TRUE interactive mode. ... Arguments passed .av().","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"list,  character collapse NULL","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"function also internally used .av(), although searches first drug name throw note drug names returned. Note: .av() function may use long regular expression match brand names antiviral drugs. may fail systems.","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"argument-type","dir":"Reference","previous_headings":"","what":"Argument type","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"default, function search antiviral drug names. text elements searched official names, ATC codes brand names. uses .av() internally, correct misspelling. type = \"dose\" (similar, like \"dosing\", \"doses\"), text elements searched numeric values higher 100 resemble years. output numeric. supports unit (g, mg, IE, etc.) multiple values one clinical text, see Examples. type = \"administration\" (abbreviations, like \"admin\", \"adm\"), text elements searched form drug administration. supports following forms (including common abbreviations): buccal, implant, inhalation, instillation, intravenous, nasal, oral, parenteral, rectal, sublingual, transdermal vaginal. Abbreviations oral ('po', 'per os') become \"oral\", values intravenous ('iv', 'intraven') become \"iv\". supports multiple values one clinical text, see Examples.","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"argument-collapse","dir":"Reference","previous_headings":"","what":"Argument collapse","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"Without using collapse, function return list. can convenient use e.g. inside mutate()):df %>% mutate(avx = av_from_text(clinical_text)) returned AV codes can transformed official names, groups, etc. av_* functions av_name() av_group(), using translate_av argument. using collapse, function return character:df %>% mutate(avx = av_from_text(clinical_text, collapse = \"|\"))","code":""},{"path":"https://amr-for-r.org/reference/av_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Antiviral Drug Names and Doses from Clinical Text — av_from_text","text":"","code":"av_from_text(\"28/03/2020 valaciclovir po tid\") #> [[1]] #> Class 'av' #> [1] VALA #>  av_from_text(\"28/03/2020 valaciclovir po tid\", type = \"admin\") #> [[1]] #> [1] \"oral\" #>"},{"path":"https://amr-for-r.org/reference/av_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Properties of an Antiviral Drug — av_property","title":"Get Properties of an Antiviral Drug — av_property","text":"Use functions return specific property antiviral drug antivirals data set. input values evaluated internally .av().","code":""},{"path":"https://amr-for-r.org/reference/av_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Properties of an Antiviral Drug — av_property","text":"","code":"av_name(x, language = get_AMR_locale(), tolower = FALSE, ...)  av_cid(x, ...)  av_synonyms(x, ...)  av_tradenames(x, ...)  av_group(x, language = get_AMR_locale(), ...)  av_atc(x, ...)  av_loinc(x, ...)  av_ddd(x, administration = \"oral\", ...)  av_ddd_units(x, administration = \"oral\", ...)  av_info(x, language = get_AMR_locale(), ...)  av_url(x, open = FALSE, ...)  av_property(x, property = \"name\", language = get_AMR_locale(), ...)"},{"path":"https://amr-for-r.org/reference/av_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Properties of an Antiviral Drug — av_property","text":"x (vector ) text can coerced valid antiviral drug code .av(). language Language returned text - default system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. tolower logical indicate whether first character every output transformed lower case character. ... arguments passed .av(). administration Way administration, either \"oral\" \"iv\". open Browse URL using utils::browseURL(). property One column names one antivirals data set: vector_or(colnames(antivirals), sort = FALSE).","code":""},{"path":"https://amr-for-r.org/reference/av_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Properties of an Antiviral Drug — av_property","text":"integer case av_cid() named list case av_info() multiple av_atc()/av_synonyms()/av_tradenames() double case av_ddd() character cases","code":""},{"path":"https://amr-for-r.org/reference/av_property.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Properties of an Antiviral Drug — av_property","text":"output translated possible. function av_url() return direct URL official website. warning returned required ATC code available.","code":""},{"path":"https://amr-for-r.org/reference/av_property.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get Properties of an Antiviral Drug — av_property","text":"World Health Organization () Collaborating Centre Drug Statistics Methodology: https://atcddd.fhi./atc_ddd_index/ European Commission Public Health PHARMACEUTICALS - COMMUNITY REGISTER: https://ec.europa.eu/health/documents/community-register/html/reg_hum_atc.htm","code":""},{"path":"https://amr-for-r.org/reference/av_property.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Get Properties of an Antiviral Drug — av_property","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/av_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Properties of an Antiviral Drug — av_property","text":"","code":"# all properties: av_name(\"ACI\") #> [1] \"Aciclovir\" av_atc(\"ACI\") #> [1] \"J05AB01\" av_cid(\"ACI\") #> [1] 135398513 av_synonyms(\"ACI\") #>  [1] \"acicloftal\"        \"aciclovier\"        \"aciclovirum\"       #>  [4] \"activir\"           \"acyclofoam\"        \"acycloguanosine\"   #>  [7] \"acyclovir\"         \"acyclovir lauriad\" \"avaclyr\"           #> [10] \"cargosil\"          \"cyclovir\"          \"genvir\"            #> [13] \"gerpevir\"          \"hascovir\"          \"maynar\"            #> [16] \"novirus\"           \"poviral\"           \"sitavig\"           #> [19] \"sitavir\"           \"vipral\"            \"viropump\"          #> [22] \"virorax\"           \"zovirax\"           \"zyclir\"            av_tradenames(\"ACI\") #>  [1] \"acicloftal\"        \"aciclovier\"        \"aciclovirum\"       #>  [4] \"activir\"           \"acyclofoam\"        \"acycloguanosine\"   #>  [7] \"acyclovir\"         \"acyclovir lauriad\" \"avaclyr\"           #> [10] \"cargosil\"          \"cyclovir\"          \"genvir\"            #> [13] \"gerpevir\"          \"hascovir\"          \"maynar\"            #> [16] \"novirus\"           \"poviral\"           \"sitavig\"           #> [19] \"sitavir\"           \"vipral\"            \"viropump\"          #> [22] \"virorax\"           \"zovirax\"           \"zyclir\"            av_group(\"ACI\") #> [1] \"Nucleosides and nucleotides excl. reverse transcriptase inhibitors\" av_url(\"ACI\") #>                                                              Aciclovir  #> \"https://atcddd.fhi.no/atc_ddd_index/?code=J05AB01&showdescription=no\"   # lowercase transformation av_name(x = c(\"ACI\", \"VALA\")) #> [1] \"Aciclovir\"    \"Valaciclovir\" av_name(x = c(\"ACI\", \"VALA\"), tolower = TRUE) #> [1] \"aciclovir\"    \"valaciclovir\"  # defined daily doses (DDD) av_ddd(\"ACI\", \"oral\") #> [1] 4 av_ddd_units(\"ACI\", \"oral\") #> [1] \"g\" av_ddd(\"ACI\", \"iv\") #> [1] 4 av_ddd_units(\"ACI\", \"iv\") #> [1] \"g\"  av_info(\"ACI\") # all properties as a list #> $av #> [1] \"ACI\" #>  #> $cid #> [1] 135398513 #>  #> $name #> [1] \"Aciclovir\" #>  #> $group #> [1] \"Nucleosides and nucleotides excl. reverse transcriptase inhibitors\" #>  #> $atc #> [1] \"J05AB01\" #>  #> $tradenames #>  [1] \"acicloftal\"        \"aciclovier\"        \"aciclovirum\"       #>  [4] \"activir\"           \"acyclofoam\"        \"acycloguanosine\"   #>  [7] \"acyclovir\"         \"acyclovir lauriad\" \"avaclyr\"           #> [10] \"cargosil\"          \"cyclovir\"          \"genvir\"            #> [13] \"gerpevir\"          \"hascovir\"          \"maynar\"            #> [16] \"novirus\"           \"poviral\"           \"sitavig\"           #> [19] \"sitavir\"           \"vipral\"            \"viropump\"          #> [22] \"virorax\"           \"zovirax\"           \"zyclir\"            #>  #> $loinc #> [1] \"\" #>  #> $ddd #> $ddd$oral #> $ddd$oral$amount #> [1] 4 #>  #> $ddd$oral$units #> [1] \"g\" #>  #>  #> $ddd$iv #> $ddd$iv$amount #> [1] 4 #>  #> $ddd$iv$units #> [1] \"g\" #>  #>  #>   # all av_* functions use as.av() internally, so you can go from 'any' to 'any': av_atc(\"ACI\") #> [1] \"J05AB01\" av_group(\"J05AB01\") #> [1] \"Nucleosides and nucleotides excl. reverse transcriptase inhibitors\" av_loinc(\"abacavir\") #> [1] \"29113-8\" \"30273-7\" \"30287-7\" \"30303-2\" \"78772-1\" \"78773-9\" \"79134-3\" #> [8] \"80118-3\" av_name(\"29113-8\") #> [1] \"Abacavir\" av_name(135398513) #> [1] \"Aciclovir\" av_name(\"J05AB01\") #> [1] \"Aciclovir\""},{"path":"https://amr-for-r.org/reference/availability.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Availability of Columns — availability","title":"Check Availability of Columns — availability","text":"Easy check data availability columns data set. makes easy get idea antimicrobial combinations can used calculation e.g. susceptibility() resistance().","code":""},{"path":"https://amr-for-r.org/reference/availability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Availability of Columns — availability","text":"","code":"availability(tbl, width = NULL)"},{"path":"https://amr-for-r.org/reference/availability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Availability of Columns — availability","text":"tbl data.frame list. width Number characters present visual availability - default filling width console.","code":""},{"path":"https://amr-for-r.org/reference/availability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Availability of Columns — availability","text":"data.frame column names tbl row names","code":""},{"path":"https://amr-for-r.org/reference/availability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Availability of Columns — availability","text":"function returns data.frame columns \"resistant\" \"visual_resistance\". values columns calculated resistance().","code":""},{"path":"https://amr-for-r.org/reference/availability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Availability of Columns — availability","text":"","code":"availability(example_isolates) #>         count available     visual_availabilty resistant      visual_resistance #> date     2000    100.0% |####################|                                  #> patient  2000    100.0% |####################|                                  #> age      2000    100.0% |####################|                                  #> gender   2000    100.0% |####################|                                  #> ward     2000    100.0% |####################|                                  #> mo       2000    100.0% |####################|                                  #> PEN      1629     81.5% |################----|     73.7% |##############------| #> OXA       365     18.3% |###-----------------|     31.2% |######--------------| #> FLC       943     47.2% |#########-----------|     29.5% |#####---------------| #> AMX      1350     67.5% |#############-------|     59.6% |###########---------| #> AMC      1879     94.0% |##################--|     23.7% |####----------------| #> AMP      1350     67.5% |#############-------|     59.6% |###########---------| #> TZP      1001     50.0% |##########----------|     12.6% |##------------------| #> CZO       446     22.3% |####----------------|     44.6% |########------------| #> FEP       724     36.2% |#######-------------|     14.2% |##------------------| #> CXM      1789     89.5% |#################---|     26.3% |#####---------------| #> FOX       818     40.9% |########------------|     27.4% |#####---------------| #> CTX       943     47.2% |#########-----------|     15.5% |###-----------------| #> CAZ      1811     90.6% |##################--|     66.5% |#############-------| #> CRO       943     47.2% |#########-----------|     15.5% |###-----------------| #> GEN      1855     92.8% |##################--|     24.6% |####----------------| #> TOB      1351     67.6% |#############-------|     34.4% |######--------------| #> AMK       692     34.6% |######--------------|     63.7% |############--------| #> KAN       471     23.6% |####----------------|    100.0% |####################| #> TMP      1499     75.0% |###############-----|     38.1% |#######-------------| #> SXT      1759     88.0% |#################---|     20.5% |####----------------| #> NIT       743     37.2% |#######-------------|     17.1% |###-----------------| #> FOS       351     17.6% |###-----------------|     42.2% |########------------| #> LNZ      1023     51.2% |##########----------|     69.3% |#############-------| #> CIP      1409     70.5% |#############-------|     16.2% |###-----------------| #> MFX       211     10.6% |##------------------|     33.6% |######--------------| #> VAN      1861     93.1% |##################--|     38.3% |#######-------------| #> TEC       976     48.8% |#########-----------|     75.7% |###############-----| #> TCY      1200     60.0% |###########---------|     29.8% |#####---------------| #> TGC       798     39.9% |########------------|     12.7% |##------------------| #> DOX      1136     56.8% |###########---------|     27.7% |#####---------------| #> ERY      1894     94.7% |##################--|     57.2% |###########---------| #> CLI      1520     76.0% |###############-----|     61.2% |############--------| #> AZM      1894     94.7% |##################--|     57.2% |###########---------| #> IPM       889     44.5% |########------------|      6.2% |#-------------------| #> MEM       829     41.5% |########------------|      5.9% |#-------------------| #> MTR        34      1.7% |--------------------|     14.7% |##------------------| #> CHL       154      7.7% |#-------------------|     21.4% |####----------------| #> COL      1640     82.0% |################----|     81.2% |################----| #> MUP       270     13.5% |##------------------|      5.9% |#-------------------| #> RIF      1003     50.2% |##########----------|     69.6% |#############-------| # \\donttest{ if (require(\"dplyr\")) {   example_isolates %>%     filter(mo == as.mo(\"Escherichia coli\")) %>%     select_if(is.sir) %>%     availability() } #>     count available       visual_availabilty resistant        visual_resistance #> PEN   467    100.0% |######################|    100.0% |######################| #> OXA     0      0.0% |----------------------|                                    #> FLC     0      0.0% |----------------------|                                    #> AMX   392     83.9% |##################----|     50.0% |###########-----------| #> AMC   467    100.0% |######################|     13.1% |##--------------------| #> AMP   392     83.9% |##################----|     50.0% |###########-----------| #> TZP   416     89.1% |###################---|      5.5% |#---------------------| #> CZO    82     17.6% |###-------------------|      2.4% |----------------------| #> FEP   317     67.9% |##############--------|      2.8% |----------------------| #> CXM   465     99.6% |######################|      5.4% |#---------------------| #> FOX   377     80.7% |#################-----|      6.9% |#---------------------| #> CTX   459     98.3% |#####################-|      2.4% |----------------------| #> CAZ   460     98.5% |#####################-|      2.4% |----------------------| #> CRO   459     98.3% |#####################-|      2.4% |----------------------| #> GEN   460     98.5% |#####################-|      2.0% |----------------------| #> TOB   462     98.9% |#####################-|      2.6% |----------------------| #> AMK   171     36.6% |########--------------|      0.0% |----------------------| #> KAN     0      0.0% |----------------------|                                    #> TMP   396     84.8% |##################----|     39.1% |########--------------| #> SXT   465     99.6% |######################|     31.6% |######----------------| #> NIT   458     98.1% |#####################-|      2.8% |----------------------| #> FOS    61     13.1% |##--------------------|      0.0% |----------------------| #> LNZ   467    100.0% |######################|    100.0% |######################| #> CIP   456     97.6% |#####################-|     12.5% |##--------------------| #> MFX    57     12.2% |##--------------------|    100.0% |######################| #> VAN   467    100.0% |######################|    100.0% |######################| #> TEC   467    100.0% |######################|    100.0% |######################| #> TCY     3      0.6% |----------------------|     66.7% |##############--------| #> TGC    68     14.6% |###-------------------|      0.0% |----------------------| #> DOX     0      0.0% |----------------------|                                    #> ERY   467    100.0% |######################|    100.0% |######################| #> CLI   467    100.0% |######################|    100.0% |######################| #> AZM   467    100.0% |######################|    100.0% |######################| #> IPM   422     90.4% |###################---|      0.0% |----------------------| #> MEM   418     89.5% |###################---|      0.0% |----------------------| #> MTR     2      0.4% |----------------------|      0.0% |----------------------| #> CHL     0      0.0% |----------------------|                                    #> COL   240     51.4% |###########-----------|      0.0% |----------------------| #> MUP     0      0.0% |----------------------|                                    #> RIF   467    100.0% |######################|    100.0% |######################| # }"},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Bug-Drug Combinations — bug_drug_combinations","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"Determine antimicrobial resistance (AMR) bug-drug combinations data set least 30 (default) isolates available per species. Use format() result prettify publishable/printable format, see Examples.","code":""},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"","code":"bug_drug_combinations(x, col_mo = NULL, FUN = mo_shortname,   include_n_rows = FALSE, ...)  # S3 method for class 'bug_drug_combinations' format(x, translate_ab = \"name (ab, atc)\",   language = get_AMR_locale(), minimum = 30, combine_SI = TRUE,   add_ab_group = TRUE, remove_intrinsic_resistant = FALSE,   decimal.mark = getOption(\"OutDec\"), big.mark = ifelse(decimal.mark ==   \",\", \".\", \",\"), ...)"},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"x data set antimicrobials columns, amox, AMX AMC. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). FUN function call mo column transform microorganism codes - default mo_shortname(). include_n_rows logical indicate total number rows must included output. ... Arguments passed FUN. translate_ab character length 1 containing column names antimicrobials data set. language Language returned text - default current system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. minimum minimum allowed number available (tested) isolates. isolate count lower minimum return NA warning. default number 30 isolates advised Clinical Laboratory Standards Institute (CLSI) best practice, see Source. combine_SI logical indicate whether values S, SDD, summed, resistance based R - default TRUE. add_ab_group logical indicate group antimicrobials must included first column. remove_intrinsic_resistant logical indicate rows columns 100% resistance tested antimicrobials must removed table. decimal.mark character used indicate numeric     decimal point. big.mark character; empty used mark every     big.interval decimals (hence big)     decimal point.","code":""},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"function bug_drug_combinations() returns data.frame columns \"mo\", \"ab\", \"S\", \"SDD\", \"\", \"R\", \"total\".","code":""},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"function format() calculates resistance per bug-drug combination returns table ready reporting/publishing. Use combine_SI = TRUE (default) test R vs. S+combine_SI = FALSE test R+vs. S. table can also directly used R Markdown / Quarto without need e.g. knitr::kable().","code":""},{"path":"https://amr-for-r.org/reference/bug_drug_combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Bug-Drug Combinations — bug_drug_combinations","text":"","code":"# example_isolates is a data set available in the AMR package. # run ?example_isolates for more info. example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # \\donttest{ x <- bug_drug_combinations(example_isolates) head(x) #> # A tibble: 6 × 8 #>   mo                ab        S   SDD     I     R    NI total #>   <chr>             <chr> <int> <int> <int> <int> <int> <int> #> 1 (unknown species) AMC      15     0     0     0     0    15 #> 2 (unknown species) AMK       0     0     0     0     0     0 #> 3 (unknown species) AMP      15     0     0     1     0    16 #> 4 (unknown species) AMX      15     0     0     1     0    16 #> 5 (unknown species) AZM       3     0     0     3     0     6 #> 6 (unknown species) CAZ       0     0     0     0     0     0 #> Use 'format()' on this result to get a publishable/printable format. format(x, translate_ab = \"name (atc)\") #> # A tibble: 39 × 12 #>    Group     Drug  CoNS  `E. coli` `E. faecalis` `K. pneumoniae` `P. aeruginosa` #>    <chr>     <chr> <chr> <chr>     <chr>         <chr>           <chr>           #>  1 \"Aminogl… Amik… \"100… \"  0.0% … \"100.0% (39/… \"\"              \"\"              #>  2 \"\"        Gent… \" 13… \"  2.0% … \"100.0% (39/… \" 10.3% (6/58)\" \"  0.0% (0/30)\" #>  3 \"\"        Kana… \"100… \"\"        \"100.0% (39/… \"\"              \"100.0% (30/30… #>  4 \"\"        Tobr… \" 78… \"  2.6% … \"100.0% (39/… \" 10.3% (6/58)\" \"  0.0% (0/30)\" #>  5 \"Antimyc… Rifa… \"\"    \"100.0% … \"\"            \"100.0% (58/58… \"100.0% (30/30… #>  6 \"Beta-la… Amox… \" 93… \" 50.0% … \"\"            \"100.0% (58/58… \"100.0% (30/30… #>  7 \"\"        Amox… \" 42… \" 13.1% … \"\"            \" 10.3% (6/58)\" \"100.0% (30/30… #>  8 \"\"        Ampi… \" 93… \" 50.0% … \"\"            \"100.0% (58/58… \"100.0% (30/30… #>  9 \"\"        Benz… \" 77… \"100.0% … \"\"            \"100.0% (58/58… \"100.0% (30/30… #> 10 \"\"        Fluc… \" 42… \"\"        \"\"            \"\"              \"\"              #> # ℹ 29 more rows #> # ℹ 5 more variables: `P. mirabilis` <chr>, `S. aureus` <chr>, #> #   `S. epidermidis` <chr>, `S. hominis` <chr>, `S. pneumoniae` <chr>  # Use FUN to change to transformation of microorganism codes bug_drug_combinations(example_isolates,   FUN = mo_gramstain ) #> # A tibble: 80 × 8 #>    mo            ab        S   SDD     I     R    NI total #>    <chr>         <chr> <int> <int> <int> <int> <int> <int> #>  1 Gram-negative AMC     463     0    89   174     0   726 #>  2 Gram-negative AMK     251     0     0     5     0   256 #>  3 Gram-negative AMP     226     0     0   405     0   631 #>  4 Gram-negative AMX     226     0     0   405     0   631 #>  5 Gram-negative AZM       1     0     2   696     0   699 #>  6 Gram-negative CAZ     607     0     0    27     0   634 #>  7 Gram-negative CHL       1     0     0    30     0    31 #>  8 Gram-negative CIP     610     0    11    63     0   684 #>  9 Gram-negative CLI      18     0     1   709     0   728 #> 10 Gram-negative COL     309     0     0    78     0   387 #> # ℹ 70 more rows #> Use 'format()' on this result to get a publishable/printable format.  bug_drug_combinations(example_isolates,   FUN = function(x) {     ifelse(x == as.mo(\"Escherichia coli\"),       \"E. coli\",       \"Others\"     )   } ) #> # A tibble: 80 × 8 #>    mo      ab        S   SDD     I     R    NI total #>    <chr>   <chr> <int> <int> <int> <int> <int> <int> #>  1 E. coli AMC     332     0    74    61     0   467 #>  2 E. coli AMK     171     0     0     0     0   171 #>  3 E. coli AMP     196     0     0   196     0   392 #>  4 E. coli AMX     196     0     0   196     0   392 #>  5 E. coli AZM       0     0     0   467     0   467 #>  6 E. coli CAZ     449     0     0    11     0   460 #>  7 E. coli CHL       0     0     0     0     0     0 #>  8 E. coli CIP     398     0     1    57     0   456 #>  9 E. coli CLI       0     0     0   467     0   467 #> 10 E. coli COL     240     0     0     0     0   240 #> # ℹ 70 more rows #> Use 'format()' on this result to get a publishable/printable format. # }"},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"Data set containing clinical breakpoints interpret MIC disk diffusion SIR values, according international guidelines. dataset contain breakpoints humans, 7 different animal groups, ECOFFs. breakpoints currently implemented: clinical microbiology: EUCAST 2011-2025 CLSI 2011-2025; veterinary microbiology: EUCAST 2021-2025 CLSI 2019-2025; ECOFFs (Epidemiological Cut-Values): EUCAST 2020-2025 CLSI 2022-2025. Use .sir() transform MICs disks measurements SIR values.","code":""},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"","code":"clinical_breakpoints"},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"tibble 40 217 observations 14 variables: guideline Name guideline type Breakpoint type, either \"ECOFF\", \"animal\", \"human\" host Host infectious agent. mostly useful veterinary breakpoints either \"ECOFF\", \"aquatic\", \"cats\", \"cattle\", \"dogs\", \"horse\", \"human\", \"poultry\", \"swine\" method Testing method, either \"DISK\" \"MIC\" site Body site breakpoint must applied, e.g. \"Oral\" \"Respiratory\" mo Microbial ID, see .mo() rank_index Taxonomic rank index mo 1 (subspecies/infraspecies) 5 (unknown microorganism) ab Antimicrobial code used package, EARS-Net WHONET, see .ab() ref_tbl Info guideline rule can found disk_dose Dose used disk diffusion method breakpoint_S Lowest MIC value highest number millimetres leads \"S\" breakpoint_R Highest MIC value lowest number millimetres leads \"R\", can NA uti logical value (TRUE/FALSE) indicate whether rule applies urinary tract infection (UTI) is_SDD logical value (TRUE/FALSE) indicate whether intermediate range \"S\" \"R\" interpreted \"SDD\", instead \"\". currently applies 48 breakpoints.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"different-types-of-breakpoints","dir":"Reference","previous_headings":"","what":"Different Types of Breakpoints","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"Supported types breakpoints ECOFF, animal, human. ECOFF (Epidemiological cut-) values used antimicrobial susceptibility testing differentiate wild-type non-wild-type strains bacteria fungi. default \"human\", can also set package option AMR_breakpoint_type. Use .sir(..., breakpoint_type = ...) interpret raw data using specific breakpoint type, e.g. .sir(..., breakpoint_type = \"ECOFF\") use ECOFFs.","code":""},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"imported-from-whonet","dir":"Reference","previous_headings":"","what":"Imported From WHONET","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"Clinical breakpoints package validated imported WHONET, free desktop Windows application developed supported Collaborating Centre Surveillance Antimicrobial Resistance. can read website. developers WHONET AMR package contact sharing work. highly appreciate great development WHONET software. import reproduction script can found : https://github.com/msberends/AMR/blob/main/data-raw/_reproduction_scripts/reproduction_of_clinical_breakpoints.R.","code":""},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"response-from-clsi-and-eucast","dir":"Reference","previous_headings":"","what":"Response From CLSI and EUCAST","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"CEO CLSI chairman EUCAST endorsed work public use AMR package (consequently use breakpoints) June 2023, future development distributing clinical breakpoints discussed meeting CLSI, EUCAST, , developers WHONET software, developers AMR package.","code":""},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"download-note","dir":"Reference","previous_headings":"","what":"Download Note","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"AMR package (WHONET software well) contains rather complex internal methods apply guidelines. example, breakpoints must applied certain species groups (case package available microorganisms.groups data set). important considered implementing breakpoints use.","code":""},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/clinical_breakpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with Clinical Breakpoints for SIR Interpretation — clinical_breakpoints","text":"","code":"clinical_breakpoints #> # A tibble: 40,217 × 14 #>    guideline   type  host  method site    mo            rank_index ab   ref_tbl  #>    <chr>       <chr> <chr> <chr>  <chr>   <mo>               <dbl> <ab> <chr>    #>  1 EUCAST 2025 human human DISK   NA      B_ACHRMB_XYLS          2 MEM  A. xylo… #>  2 EUCAST 2025 human human MIC    NA      B_ACHRMB_XYLS          2 MEM  A. xylo… #>  3 EUCAST 2025 human human DISK   NA      B_ACHRMB_XYLS          2 SXT  A. xylo… #>  4 EUCAST 2025 human human MIC    NA      B_ACHRMB_XYLS          2 SXT  A. xylo… #>  5 EUCAST 2025 human human DISK   NA      B_ACHRMB_XYLS          2 TZP  A. xylo… #>  6 EUCAST 2025 human human MIC    NA      B_ACHRMB_XYLS          2 TZP  A. xylo… #>  7 EUCAST 2025 human human DISK   NA      B_ACNTB                3 AMK  Acineto… #>  8 EUCAST 2025 human human DISK   Uncomp… B_ACNTB                3 AMK  Acineto… #>  9 EUCAST 2025 human human MIC    NA      B_ACNTB                3 AMK  Acineto… #> 10 EUCAST 2025 human human MIC    Uncomp… B_ACNTB                3 AMK  Acineto… #> # ℹ 40,207 more rows #> # ℹ 5 more variables: disk_dose <chr>, breakpoint_S <dbl>, breakpoint_R <dbl>, #> #   uti <lgl>, is_SDD <lgl>"},{"path":"https://amr-for-r.org/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Available Isolates — count","title":"Count Available Isolates — count","text":"functions can used count resistant/susceptible microbial isolates. functions support quasiquotation pipes, can used summarise() dplyr package also support grouped variables, see Examples. count_resistant() used count resistant isolates, count_susceptible() used count susceptible isolates.","code":""},{"path":"https://amr-for-r.org/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Available Isolates — count","text":"","code":"count_resistant(..., only_all_tested = FALSE)  count_susceptible(..., only_all_tested = FALSE)  count_S(..., only_all_tested = FALSE)  count_SI(..., only_all_tested = FALSE)  count_I(..., only_all_tested = FALSE)  count_IR(..., only_all_tested = FALSE)  count_R(..., only_all_tested = FALSE)  count_all(..., only_all_tested = FALSE)  n_sir(..., only_all_tested = FALSE)  count_df(data, translate_ab = \"name\", language = get_AMR_locale(),   combine_SI = TRUE)"},{"path":"https://amr-for-r.org/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Available Isolates — count","text":"... One vectors (columns) antibiotic interpretations. transformed internally .sir() needed. only_all_tested (combination therapies, .e. using one variable ...): logical indicate isolates must tested antimicrobials, see section Combination Therapy . data data.frame containing columns class sir (see .sir()). translate_ab column name antimicrobials data set translate antibiotic abbreviations , using ab_property(). language Language returned text - default current system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. combine_SI logical indicate whether values S, SDD, must merged one, output consists S+SDD+vs. R (susceptible vs. resistant) - default TRUE.","code":""},{"path":"https://amr-for-r.org/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Available Isolates — count","text":"integer","code":""},{"path":"https://amr-for-r.org/reference/count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Available Isolates — count","text":"functions meant count isolates. Use resistance()/susceptibility() functions calculate microbial resistance/susceptibility. function count_resistant() equal function count_R(). function count_susceptible() equal function count_SI(). function n_sir() alias count_all(). can used count available isolates, .e. input antimicrobials available result (S, R). use equal n_distinct(). function equal count_susceptible(...) + count_resistant(...). function count_df() takes variable data sir class (created .sir()) counts number S's, 's R's. also supports grouped variables. function sir_df() works exactly like count_df(), adds percentage S, R.","code":""},{"path":"https://amr-for-r.org/reference/count.html","id":"interpretation-of-sir","dir":"Reference","previous_headings":"","what":"Interpretation of SIR","title":"Count Available Isolates — count","text":"2019, European Committee Antimicrobial Susceptibility Testing (EUCAST) decided change definitions susceptibility testing categories S, , R (https://www.eucast.org/newsiandr). AMR package follows insight; use susceptibility() (equal proportion_SI()) determine antimicrobial susceptibility count_susceptible() (equal count_SI()) count susceptible isolates.","code":""},{"path":"https://amr-for-r.org/reference/count.html","id":"combination-therapy","dir":"Reference","previous_headings":"","what":"Combination Therapy","title":"Count Available Isolates — count","text":"using one variable ... (= combination therapy), use only_all_tested count isolates tested antimicrobials/variables test . See example two antimicrobials, Drug Drug B, susceptibility() works calculate %SI:   Please note , combination therapies, only_all_tested = TRUE applies :   , combination therapies, only_all_tested = FALSE applies :   Using only_all_tested impact using one antibiotic input.","code":"--------------------------------------------------------------------                     only_all_tested = FALSE  only_all_tested = TRUE                     -----------------------  -----------------------  Drug A    Drug B   considered   considered  considered   considered                     susceptible    tested    susceptible    tested --------  --------  -----------  ----------  -----------  ----------  S or I    S or I        X            X           X            X    R       S or I        X            X           X            X   <NA>     S or I        X            X           -            -  S or I      R           X            X           X            X    R         R           -            X           -            X   <NA>       R           -            -           -            -  S or I     <NA>         X            X           -            -    R        <NA>         -            -           -            -   <NA>      <NA>         -            -           -            - -------------------------------------------------------------------- count_S()    +   count_I()    +   count_R()    = count_all()   proportion_S() + proportion_I() + proportion_R() = 1 count_S()    +   count_I()    +   count_R()    >= count_all()   proportion_S() + proportion_I() + proportion_R() >= 1"},{"path":[]},{"path":"https://amr-for-r.org/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Available Isolates — count","text":"","code":"# example_isolates is a data set available in the AMR package. # run ?example_isolates for more info.  # base R ------------------------------------------------------------ count_resistant(example_isolates$AMX) # counts \"R\" #> [1] 804 count_susceptible(example_isolates$AMX) # counts \"S\" and \"I\" #> [1] 546 count_all(example_isolates$AMX) # counts \"S\", \"I\" and \"R\" #> [1] 1350  # be more specific count_S(example_isolates$AMX) #> [1] 543 count_SI(example_isolates$AMX) #> [1] 546 count_I(example_isolates$AMX) #> [1] 3 count_IR(example_isolates$AMX) #> [1] 807 count_R(example_isolates$AMX) #> [1] 804  # Count all available isolates count_all(example_isolates$AMX) #> [1] 1350 n_sir(example_isolates$AMX) #> [1] 1350  # n_sir() is an alias of count_all(). # Since it counts all available isolates, you can # calculate back to count e.g. susceptible isolates. # These results are the same: count_susceptible(example_isolates$AMX) #> [1] 546 susceptibility(example_isolates$AMX) * n_sir(example_isolates$AMX) #> [1] 546  # dplyr ------------------------------------------------------------- # \\donttest{ if (require(\"dplyr\")) {   example_isolates %>%     group_by(ward) %>%     summarise(       R = count_R(CIP),       I = count_I(CIP),       S = count_S(CIP),       n1 = count_all(CIP), # the actual total; sum of all three       n2 = n_sir(CIP), # same - analogous to n_distinct       total = n()     ) # NOT the number of tested isolates!    # Number of available isolates for a whole antibiotic class   # (i.e., in this data set columns GEN, TOB, AMK, KAN)   example_isolates %>%     group_by(ward) %>%     summarise(across(aminoglycosides(), n_sir))    # Count co-resistance between amoxicillin/clav acid and gentamicin,   # so we can see that combination therapy does a lot more than mono therapy.   # Please mind that `susceptibility()` calculates percentages right away instead.   example_isolates %>% count_susceptible(AMC) # 1433   example_isolates %>% count_all(AMC) # 1879    example_isolates %>% count_susceptible(GEN) # 1399   example_isolates %>% count_all(GEN) # 1855    example_isolates %>% count_susceptible(AMC, GEN) # 1764   example_isolates %>% count_all(AMC, GEN) # 1936    # Get number of S+I vs. R immediately of selected columns   example_isolates %>%     select(AMX, CIP) %>%     count_df(translate = FALSE)    # It also supports grouping variables   example_isolates %>%     select(ward, AMX, CIP) %>%     group_by(ward) %>%     count_df(translate = FALSE) } #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> # A tibble: 12 × 4 #>    ward       antibiotic interpretation value #>    <chr>      <chr>      <ord>          <int> #>  1 Clinical   AMX        SI               357 #>  2 Clinical   AMX        R                487 #>  3 Clinical   CIP        SI               741 #>  4 Clinical   CIP        R                128 #>  5 ICU        AMX        SI               158 #>  6 ICU        AMX        R                270 #>  7 ICU        CIP        SI               362 #>  8 ICU        CIP        R                 85 #>  9 Outpatient AMX        SI                31 #> 10 Outpatient AMX        R                 47 #> 11 Outpatient CIP        SI                78 #> 12 Outpatient CIP        R                 15 # }"},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Custom EUCAST Rules — custom_eucast_rules","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"Define custom EUCAST rules organisation specific analysis use output function eucast_rules().","code":""},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"","code":"custom_eucast_rules(...)"},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"... Rules formula notation, see instructions, Examples.","code":""},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"list containing custom rules","code":""},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"organisations adoption EUCAST rules. function can used define custom EUCAST rules used eucast_rules() function.","code":""},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"basics","dir":"Reference","previous_headings":"","what":"Basics","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"familiar case_when() function dplyr package, recognise input method set rules. Rules must set using R considers 'formula notation'. rule written tilde (~) consequence rule written tilde:   two custom EUCAST rules: TZP (piperacillin/tazobactam) \"S\", aminopenicillins (ampicillin amoxicillin) must made \"S\", TZP \"R\", aminopenicillins must made \"R\". rules can also printed console, immediately clear work:   rules (part tilde, example TZP == \"S\" TZP == \"R\") must evaluable data set: able run filter data set without errors. means example column TZP must exist. create sample data set test rules set:","code":"x <- custom_eucast_rules(TZP == \"S\" ~ aminopenicillins == \"S\",                          TZP == \"R\" ~ aminopenicillins == \"R\") x #> A set of custom EUCAST rules: #> #>   1. If TZP is \"S\" then set to  S : #>      amoxicillin (AMX), ampicillin (AMP) #> #>   2. If TZP is \"R\" then set to  R : #>      amoxicillin (AMX), ampicillin (AMP) df <- data.frame(mo = c(\"Escherichia coli\", \"Klebsiella pneumoniae\"),                  TZP = as.sir(\"R\"),                  ampi = as.sir(\"S\"),                  cipro = as.sir(\"S\")) df #>                      mo TZP ampi cipro #> 1      Escherichia coli   R    S     S #> 2 Klebsiella pneumoniae   R    S     S  eucast_rules(df,              rules = \"custom\",              custom_rules = x,              info = FALSE,              overwrite = TRUE) #>                      mo TZP ampi cipro #> 1      Escherichia coli   R    R     S #> 2 Klebsiella pneumoniae   R    R     S"},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"using-taxonomic-properties-in-rules","dir":"Reference","previous_headings":"","what":"Using taxonomic properties in rules","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"one exception columns used rules: column names microorganisms data set can also used, exist data set. column names : \"mo\", \"fullname\", \"status\", \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\", \"subspecies\", \"rank\", \"ref\", \"oxygen_tolerance\", \"source\", \"lpsn\", \"lpsn_parent\", \"lpsn_renamed_to\", \"mycobank\", \"mycobank_parent\", \"mycobank_renamed_to\", \"gbif\", \"gbif_parent\", \"gbif_renamed_to\", \"prevalence\", \"snomed\". Thus, next example work well, despite fact df data set contain column genus:","code":"y <- custom_eucast_rules(   TZP == \"S\" & genus == \"Klebsiella\" ~ aminopenicillins == \"S\",   TZP == \"R\" & genus == \"Klebsiella\" ~ aminopenicillins == \"R\" )  eucast_rules(df,              rules = \"custom\",              custom_rules = y,              info = FALSE,              overwrite = TRUE) #>                      mo TZP ampi cipro #> 1      Escherichia coli   R    S     S #> 2 Klebsiella pneumoniae   R    R     S"},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"sharing-rules-among-multiple-users","dir":"Reference","previous_headings":"","what":"Sharing rules among multiple users","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"rules set (y object case) exported shared file location using saveRDS() collaborate multiple users. custom rules set imported using readRDS().","code":""},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"usage-of-multiple-antimicrobials-and-antimicrobial-group-names","dir":"Reference","previous_headings":"","what":"Usage of multiple antimicrobials and antimicrobial group names","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"can define antimicrobial groups instead single antimicrobials rule consequence, part tilde (~). examples , antimicrobial group aminopenicillins includes ampicillin amoxicillin. Rules can also applied multiple antimicrobials antimicrobial groups simultaneously. Use c() function combine multiple antimicrobials. instance, following example sets aminopenicillins ureidopenicillins \"R\" column TZP (piperacillin/tazobactam) \"R\":   35 antimicrobial groups allowed rules (case-insensitive) can used combination: aminoglycosides(amikacin, amikacin/fosfomycin, apramycin, arbekacin, astromicin, bekanamycin, dibekacin, framycetin, gentamicin, gentamicin-high, habekacin, hygromycin, isepamicin, kanamycin, kanamycin-high, kanamycin/cephalexin, micronomicin, neomycin, netilmicin, pentisomicin, plazomicin, propikacin, ribostamycin, sisomicin, streptoduocin, streptomycin, streptomycin-high, tobramycin, tobramycin-high) aminopenicillins(amoxicillin ampicillin) antifungals(amorolfine, amphotericin B, amphotericin B-high, anidulafungin, butoconazole, caspofungin, ciclopirox, clotrimazole, econazole, fluconazole, flucytosine, fosfluconazole, griseofulvin, hachimycin, ibrexafungerp, isavuconazole, isoconazole, itraconazole, ketoconazole, manogepix, micafungin, miconazole, nystatin, oteseconazole, pimaricin, posaconazole, rezafungin, ribociclib, sulconazole, terbinafine, terconazole, voriconazole) antimycobacterials(4-aminosalicylic acid, calcium aminosalicylate, capreomycin, clofazimine, delamanid, enviomycin, ethambutol, ethambutol/isoniazid, ethionamide, isoniazid, isoniazid/sulfamethoxazole/trimethoprim/pyridoxine, morinamide, p-aminosalicylic acid, pretomanid, protionamide, pyrazinamide, rifabutin, rifampicin, rifampicin/ethambutol/isoniazid, rifampicin/isoniazid, rifampicin/pyrazinamide/ethambutol/isoniazid, rifampicin/pyrazinamide/isoniazid, rifamycin, rifapentine, simvastatin/fenofibrate, sodium aminosalicylate, streptomycin/isoniazid, terizidone, thioacetazone, thioacetazone/isoniazid, tiocarlide, viomycin) betalactams(amoxicillin, amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin, ampicillin/sulbactam, apalcillin, aspoxicillin, azidocillin, azlocillin, aztreonam, aztreonam/avibactam, aztreonam/nacubactam, bacampicillin, benzathine benzylpenicillin, benzathine phenoxymethylpenicillin, benzylpenicillin, benzylpenicillin screening test, biapenem, carbenicillin, carindacillin, carumonam, cefacetrile, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefamandole, cefapirin, cefatrizine, cefazedone, cefazolin, cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetamet, cefetamet pivoxil, cefetecol, cefetrizole, cefiderocol, cefixime, cefmenoxime, cefmetazole, cefodizime, cefonicid, cefoperazone, cefoperazone/sulbactam, ceforanide, cefoselis, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotetan, cefotiam, cefotiam hexetil, cefovecin, cefoxitin, cefoxitin screening test, cefozopran, cefpimizole, cefpiramide, cefpirome, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefprozil, cefquinome, cefroxadine, cefsulodin, cefsumide, ceftaroline, ceftaroline/avibactam, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftezole, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, cefuroxime, cefuroxime axetil, cephradine, ciclacillin, clometocillin, cloxacillin, dicloxacillin, doripenem, epicillin, ertapenem, flucloxacillin, hetacillin, imipenem, imipenem/EDTA, imipenem/relebactam, latamoxef, lenampicillin, loracarbef, mecillinam, meropenem, meropenem/nacubactam, meropenem/vaborbactam, metampicillin, meticillin, mezlocillin, mezlocillin/sulbactam, nafcillin, oxacillin, oxacillin screening test, panipenem, penamecillin, penicillin/novobiocin, penicillin/sulbactam, pheneticillin, phenoxymethylpenicillin, piperacillin, piperacillin/sulbactam, piperacillin/tazobactam, piridicillin, pivampicillin, pivmecillinam, procaine benzylpenicillin, propicillin, razupenem, ritipenem, ritipenem acoxil, sarmoxicillin, sulbenicillin, sultamicillin, talampicillin, tebipenem, temocillin, ticarcillin, ticarcillin/clavulanic acid, tigemonam) betalactams_with_inhibitor(amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin/sulbactam, aztreonam/avibactam, aztreonam/nacubactam, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefoperazone/sulbactam, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefpodoxime/clavulanic acid, ceftaroline/avibactam, ceftazidime/avibactam, ceftazidime/clavulanic acid, ceftolozane/tazobactam, ceftriaxone/beta-lactamase inhibitor, imipenem/relebactam, meropenem/nacubactam, meropenem/vaborbactam, mezlocillin/sulbactam, penicillin/novobiocin, penicillin/sulbactam, piperacillin/sulbactam, piperacillin/tazobactam, ticarcillin/clavulanic acid) carbapenems(biapenem, doripenem, ertapenem, imipenem, imipenem/EDTA, imipenem/relebactam, meropenem, meropenem/nacubactam, meropenem/vaborbactam, panipenem, razupenem, ritipenem, ritipenem acoxil, tebipenem) cephalosporins(cefacetrile, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefamandole, cefapirin, cefatrizine, cefazedone, cefazolin, cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetamet, cefetamet pivoxil, cefetecol, cefetrizole, cefiderocol, cefixime, cefmenoxime, cefmetazole, cefodizime, cefonicid, cefoperazone, cefoperazone/sulbactam, ceforanide, cefoselis, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotetan, cefotiam, cefotiam hexetil, cefovecin, cefoxitin, cefoxitin screening test, cefozopran, cefpimizole, cefpiramide, cefpirome, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefprozil, cefquinome, cefroxadine, cefsulodin, cefsumide, ceftaroline, ceftaroline/avibactam, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftezole, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, cefuroxime, cefuroxime axetil, cephradine, latamoxef, loracarbef) cephalosporins_1st(cefacetrile, cefadroxil, cefalexin, cefaloridine, cefalotin, cefapirin, cefatrizine, cefazedone, cefazolin, cefroxadine, ceftezole, cephradine) cephalosporins_2nd(cefaclor, cefamandole, cefmetazole, cefonicid, ceforanide, cefotetan, cefotiam, cefoxitin, cefoxitin screening test, cefprozil, cefuroxime, cefuroxime axetil, loracarbef) cephalosporins_3rd(cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefetamet, cefetamet pivoxil, cefixime, cefmenoxime, cefodizime, cefoperazone, cefoperazone/sulbactam, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotiam hexetil, cefovecin, cefpimizole, cefpiramide, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefsulodin, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, latamoxef) cephalosporins_4th(cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetecol, cefoselis, cefozopran, cefpirome, cefquinome) cephalosporins_5th(ceftaroline, ceftaroline/avibactam, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam) cephalosporins_except_caz(cefacetrile, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefamandole, cefapirin, cefatrizine, cefazedone, cefazolin, cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetamet, cefetamet pivoxil, cefetecol, cefetrizole, cefiderocol, cefixime, cefmenoxime, cefmetazole, cefodizime, cefonicid, cefoperazone, cefoperazone/sulbactam, ceforanide, cefoselis, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotetan, cefotiam, cefotiam hexetil, cefovecin, cefoxitin, cefoxitin screening test, cefozopran, cefpimizole, cefpiramide, cefpirome, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefprozil, cefquinome, cefroxadine, cefsulodin, cefsumide, ceftaroline, ceftaroline/avibactam, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftezole, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, cefuroxime, cefuroxime axetil, cephradine, latamoxef, loracarbef) fluoroquinolones(besifloxacin, ciprofloxacin, ciprofloxacin/metronidazole, ciprofloxacin/ornidazole, ciprofloxacin/tinidazole, clinafloxacin, danofloxacin, delafloxacin, difloxacin, enoxacin, enrofloxacin, finafloxacin, fleroxacin, garenoxacin, gatifloxacin, gemifloxacin, grepafloxacin, lascufloxacin, levofloxacin, levofloxacin/ornidazole, levonadifloxacin, lomefloxacin, marbofloxacin, metioxate, miloxacin, moxifloxacin, nadifloxacin, nemonoxacin, nifuroquine, nitroxoline, norfloxacin, norfloxacin screening test, norfloxacin/metronidazole, norfloxacin/tinidazole, ofloxacin, ofloxacin/ornidazole, orbifloxacin, pazufloxacin, pefloxacin, pefloxacin screening test, pradofloxacin, premafloxacin, prulifloxacin, rufloxacin, sarafloxacin, sitafloxacin, sparfloxacin, temafloxacin, tilbroquinol, tioxacin, tosufloxacin, trovafloxacin) glycopeptides(avoparcin, bleomycin, dalbavancin, norvancomycin, oritavancin, ramoplanin, teicoplanin, teicoplanin-macromethod, telavancin, vancomycin, vancomycin-macromethod) glycopeptides_except_lipo(avoparcin, bleomycin, norvancomycin, ramoplanin, teicoplanin, teicoplanin-macromethod, vancomycin, vancomycin-macromethod) isoxazolylpenicillins(cloxacillin, dicloxacillin, flucloxacillin, meticillin, oxacillin, oxacillin screening test) lincosamides(clindamycin, lincomycin, pirlimycin) lipoglycopeptides(dalbavancin, oritavancin, telavancin) macrolides(acetylmidecamycin, acetylspiramycin, azithromycin, clarithromycin, dirithromycin, erythromycin, flurithromycin, gamithromycin, josamycin, kitasamycin, meleumycin, midecamycin, miocamycin, nafithromycin, oleandomycin, rokitamycin, roxithromycin, solithromycin, spiramycin, telithromycin, tildipirosin, tilmicosin, troleandomycin, tulathromycin, tylosin, tylvalosin) monobactams(aztreonam, aztreonam/avibactam, aztreonam/nacubactam, carumonam, tigemonam) nitrofurans(furazidin, furazolidone, nifurtoinol, nitrofurantoin, nitrofurazone) oxazolidinones(cadazolid, cycloserine, linezolid, tedizolid, thiacetazone) penicillins(amoxicillin, amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin, ampicillin/sulbactam, apalcillin, aspoxicillin, azidocillin, azlocillin, bacampicillin, benzathine benzylpenicillin, benzathine phenoxymethylpenicillin, benzylpenicillin, benzylpenicillin screening test, carbenicillin, carindacillin, ciclacillin, clometocillin, cloxacillin, dicloxacillin, epicillin, flucloxacillin, hetacillin, lenampicillin, mecillinam, metampicillin, meticillin, mezlocillin, mezlocillin/sulbactam, nafcillin, oxacillin, oxacillin screening test, penamecillin, penicillin/novobiocin, penicillin/sulbactam, pheneticillin, phenoxymethylpenicillin, piperacillin, piperacillin/sulbactam, piperacillin/tazobactam, piridicillin, pivampicillin, pivmecillinam, procaine benzylpenicillin, propicillin, sarmoxicillin, sulbenicillin, sultamicillin, talampicillin, temocillin, ticarcillin, ticarcillin/clavulanic acid) phenicols(chloramphenicol, florfenicol, thiamphenicol) polymyxins(colistin, polymyxin B, polymyxin B/polysorbate 80) quinolones(besifloxacin, cinoxacin, ciprofloxacin, ciprofloxacin/metronidazole, ciprofloxacin/ornidazole, ciprofloxacin/tinidazole, clinafloxacin, danofloxacin, delafloxacin, difloxacin, enoxacin, enrofloxacin, finafloxacin, fleroxacin, flumequine, garenoxacin, gatifloxacin, gemifloxacin, grepafloxacin, lascufloxacin, levofloxacin, levofloxacin/ornidazole, levonadifloxacin, lomefloxacin, marbofloxacin, metioxate, miloxacin, moxifloxacin, nadifloxacin, nalidixic acid, nalidixic acid screening test, nemonoxacin, nifuroquine, nitroxoline, norfloxacin, norfloxacin screening test, norfloxacin/metronidazole, norfloxacin/tinidazole, ofloxacin, ofloxacin/ornidazole, orbifloxacin, oxolinic acid, pazufloxacin, pefloxacin, pefloxacin screening test, pipemidic acid, piromidic acid, pradofloxacin, premafloxacin, prulifloxacin, rosoxacin, rufloxacin, sarafloxacin, sitafloxacin, sparfloxacin, temafloxacin, tilbroquinol, tioxacin, tosufloxacin, trovafloxacin) rifamycins(rifabutin, rifampicin, rifampicin/ethambutol/isoniazid, rifampicin/isoniazid, rifampicin/pyrazinamide/ethambutol/isoniazid, rifampicin/pyrazinamide/isoniazid, rifamycin, rifapentine) streptogramins(pristinamycin quinupristin/dalfopristin) sulfonamides(brodimoprim, sulfadiazine, sulfadiazine/tetroxoprim, sulfadimethoxine, sulfadimidine, sulfafurazole, sulfaisodimidine, sulfalene, sulfamazone, sulfamerazine, sulfamethizole, sulfamethoxazole, sulfamethoxypyridazine, sulfametomidine, sulfametoxydiazine, sulfamoxole, sulfanilamide, sulfaperin, sulfaphenazole, sulfapyridine, sulfathiazole, sulfathiourea) tetracyclines(cetocycline, chlortetracycline, clomocycline, demeclocycline, doxycycline, eravacycline, lymecycline, metacycline, minocycline, omadacycline, oxytetracycline, penimepicycline, rolitetracycline, sarecycline, tetracycline, tetracycline screening test, tigecycline) tetracyclines_except_tgc(cetocycline, chlortetracycline, clomocycline, demeclocycline, doxycycline, eravacycline, lymecycline, metacycline, minocycline, omadacycline, oxytetracycline, penimepicycline, rolitetracycline, sarecycline, tetracycline, tetracycline screening test) trimethoprims(brodimoprim, sulfadiazine, sulfadiazine/tetroxoprim, sulfadiazine/trimethoprim, sulfadimethoxine, sulfadimidine, sulfadimidine/trimethoprim, sulfafurazole, sulfaisodimidine, sulfalene, sulfamazone, sulfamerazine, sulfamerazine/trimethoprim, sulfamethizole, sulfamethoxazole, sulfamethoxypyridazine, sulfametomidine, sulfametoxydiazine, sulfametrole/trimethoprim, sulfamoxole, sulfamoxole/trimethoprim, sulfanilamide, sulfaperin, sulfaphenazole, sulfapyridine, sulfathiazole, sulfathiourea, trimethoprim, trimethoprim/sulfamethoxazole) ureidopenicillins(azlocillin, mezlocillin, piperacillin, piperacillin/tazobactam)","code":"x <- custom_eucast_rules(TZP == \"R\" ~ c(aminopenicillins, ureidopenicillins) == \"R\") x #> A set of custom EUCAST rules: #> #>   1. If TZP is \"R\" then set to \"R\": #>      amoxicillin (AMX), ampicillin (AMP), azlocillin (AZL), mezlocillin (MEZ), piperacillin (PIP), piperacillin/tazobactam (TZP)"},{"path":"https://amr-for-r.org/reference/custom_eucast_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Custom EUCAST Rules — custom_eucast_rules","text":"","code":"x <- custom_eucast_rules(   AMC == \"R\" & genus == \"Klebsiella\" ~ aminopenicillins == \"R\",   AMC == \"I\" & genus == \"Klebsiella\" ~ aminopenicillins == \"I\" ) x #> A set of custom EUCAST rules: #>  #>   1. If AMC is  R  and genus is \"Klebsiella\" then set to  R : #>      amoxicillin (AMX), ampicillin (AMP) #>  #>   2. If AMC is  I  and genus is \"Klebsiella\" then set to  I : #>      amoxicillin (AMX), ampicillin (AMP)  # run the custom rule set (verbose = TRUE will return a logbook instead of the data set): eucast_rules(example_isolates,   rules = \"custom\",   custom_rules = x,   info = FALSE,   overwrite = TRUE,   verbose = TRUE ) #> # A tibble: 8 × 9 #>     row col   mo_fullname     old   new   rule  rule_group rule_name rule_source #>   <int> <chr> <chr>           <ord> <chr> <chr> <chr>      <chr>     <chr>       #> 1    33 AMP   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 2    33 AMX   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 3    34 AMP   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 4    34 AMX   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 5   531 AMP   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 6   531 AMX   Klebsiella pne… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 7  1485 AMP   Klebsiella oxy… R     I     \"rep… Custom EU… Custom E… Object 'x'… #> 8  1485 AMX   Klebsiella oxy… R     I     \"rep… Custom EU… Custom E… Object 'x'…  # combine rule sets x2 <- c(   x,   custom_eucast_rules(TZP == \"R\" ~ carbapenems == \"R\") ) x2 #> A set of custom EUCAST rules: #>  #>   1. If AMC is  R  and genus is \"Klebsiella\" then set to  R : #>      amoxicillin (AMX), ampicillin (AMP) #>  #>   2. If AMC is  I  and genus is \"Klebsiella\" then set to  I : #>      amoxicillin (AMX), ampicillin (AMP) #>  #>   3. If TZP is  R  then set to  R : #>      biapenem (BIA), doripenem (DOR), ertapenem (ETP), imipenem (IPM), #>      imipenem/EDTA (IPE), imipenem/relebactam (IMR), meropenem (MEM), #>      meropenem/nacubactam (MNC), meropenem/vaborbactam (MEV), panipenem (PAN), #>      razupenem (RZM), ritipenem (RIT), ritipenem acoxil (RIA), tebipenem (TBP)"},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Custom MDRO Guideline — custom_mdro_guideline","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"Define custom MDRO guideline organisation specific analysis use output function mdro().","code":""},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"","code":"custom_mdro_guideline(..., as_factor = TRUE)  # S3 method for class 'custom_mdro_guideline' c(x, ..., as_factor = NULL)"},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"... Guideline rules formula notation, see instructions, Examples. as_factor logical indicate whether returned value ordered factor (TRUE, default), otherwise character vector. combining rules sets (using c()) value inherited first set default. x Existing custom MDRO rules","code":""},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"list containing custom rules","code":""},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"Using custom MDRO guideline importance custom rules determine MDROs hospital, e.g., rules dependent ward, state contact isolation variables data.","code":""},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"basics","dir":"Reference","previous_headings":"","what":"Basics","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"familiar case_when() function dplyr package, recognise input method set rules. Rules must set using R considers 'formula notation'. rule written tilde (~) consequence rule written tilde:   row/isolate matches first rule, value first ~ (case 'Elderly Type ') set MDRO value. Otherwise, second rule tried . number rules unlimited. can print rules set console overview. Colours help reading console supports colours.   outcome function can used guideline argument mdro() function:   Rules can also combined custom rules using c():","code":"custom <- custom_mdro_guideline(CIP == \"R\" & age > 60 ~ \"Elderly Type A\",                                 ERY == \"R\" & age > 60 ~ \"Elderly Type B\") custom #> A set of custom MDRO rules: #>   1. If CIP is R and age is higher than 60 then: Elderly Type A #>   2. If ERY is R and age is higher than 60 then: Elderly Type B #>   3. Otherwise: Negative  #> Unmatched rows will return NA. #> Results will be of class 'factor', with ordered levels: Negative < Elderly Type A < Elderly Type B x <- mdro(example_isolates, guideline = custom) #> Determining MDROs based on custom rules, resulting in factor levels: Negative < Elderly Type A < Elderly Type B. #> - Custom MDRO rule 1: CIP == \"R\" & age > 60 (198 rows matched) #> - Custom MDRO rule 2: ERY == \"R\" & age > 60 (732 rows matched) #> => Found 930 custom defined MDROs out of 2000 isolates (46.5%)  table(x) #> x #>       Negative  Elderly Type A  Elderly Type B #>           1070             198             732 x <- mdro(example_isolates,           guideline = c(custom,                         custom_mdro_guideline(ERY == \"R\" & age > 50 ~ \"Elderly Type C\"))) #> Determining MDROs based on custom rules, resulting in factor levels: Negative < Elderly Type A < Elderly Type B < Elderly Type C. #> - Custom MDRO rule 1: CIP == \"R\" & age > 60 (198 rows matched) #> - Custom MDRO rule 2: ERY == \"R\" & age > 60 (732 rows matched) #> - Custom MDRO rule 3: ERY == \"R\" & age > 50 (109 rows matched) #> => Found 1039 custom defined MDROs out of 2000 isolates (52.0%)  table(x) #> x #>       Negative  Elderly Type A  Elderly Type B  Elderly Type C #>            961             198             732             109"},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"sharing-rules-among-multiple-users","dir":"Reference","previous_headings":"","what":"Sharing rules among multiple users","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"rules set (custom object case) exported shared file location using saveRDS() collaborate multiple users. custom rules set imported using readRDS().","code":""},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"usage-of-multiple-antimicrobials-and-antimicrobial-group-names","dir":"Reference","previous_headings":"","what":"Usage of multiple antimicrobials and antimicrobial group names","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"can define antimicrobial groups instead single antimicrobials rule , part tilde (~). Use () () specify scope antimicrobial group:   35 antimicrobial selectors supported use rules: aminoglycosides() can select:  amikacin, amikacin/fosfomycin, apramycin, arbekacin, astromicin, bekanamycin, dibekacin, framycetin, gentamicin, gentamicin-high, habekacin, hygromycin, isepamicin, kanamycin, kanamycin-high, kanamycin/cephalexin, micronomicin, neomycin, netilmicin, pentisomicin, plazomicin, propikacin, ribostamycin, sisomicin, streptoduocin, streptomycin, streptomycin-high, tobramycin, tobramycin-high aminopenicillins() can select:  amoxicillin ampicillin antifungals() can select:  amorolfine, amphotericin B, amphotericin B-high, anidulafungin, butoconazole, caspofungin, ciclopirox, clotrimazole, econazole, fluconazole, flucytosine, fosfluconazole, griseofulvin, hachimycin, ibrexafungerp, isavuconazole, isoconazole, itraconazole, ketoconazole, manogepix, micafungin, miconazole, nystatin, oteseconazole, pimaricin, posaconazole, rezafungin, ribociclib, sulconazole, terbinafine, terconazole, voriconazole antimycobacterials() can select:  4-aminosalicylic acid, calcium aminosalicylate, capreomycin, clofazimine, delamanid, enviomycin, ethambutol, ethambutol/isoniazid, ethionamide, isoniazid, isoniazid/sulfamethoxazole/trimethoprim/pyridoxine, morinamide, p-aminosalicylic acid, pretomanid, protionamide, pyrazinamide, rifabutin, rifampicin, rifampicin/ethambutol/isoniazid, rifampicin/isoniazid, rifampicin/pyrazinamide/ethambutol/isoniazid, rifampicin/pyrazinamide/isoniazid, rifamycin, rifapentine, simvastatin/fenofibrate, sodium aminosalicylate, streptomycin/isoniazid, terizidone, thioacetazone, thioacetazone/isoniazid, tiocarlide, viomycin betalactams() can select:  amoxicillin, amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin, ampicillin/sulbactam, apalcillin, aspoxicillin, azidocillin, azlocillin, aztreonam, aztreonam/avibactam, aztreonam/nacubactam, bacampicillin, benzathine benzylpenicillin, benzathine phenoxymethylpenicillin, benzylpenicillin, benzylpenicillin screening test, biapenem, carbenicillin, carindacillin, carumonam, cefacetrile, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefamandole, cefapirin, cefatrizine, cefazedone, cefazolin, cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetamet, cefetamet pivoxil, cefetecol, cefetrizole, cefiderocol, cefixime, cefmenoxime, cefmetazole, cefodizime, cefonicid, cefoperazone, cefoperazone/sulbactam, ceforanide, cefoselis, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotetan, cefotiam, cefotiam hexetil, cefovecin, cefoxitin, cefoxitin screening test, cefozopran, cefpimizole, cefpiramide, cefpirome, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefprozil, cefquinome, cefroxadine, cefsulodin, cefsumide, ceftaroline, ceftaroline/avibactam, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftezole, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, cefuroxime, cefuroxime axetil, cephradine, ciclacillin, clometocillin, cloxacillin, dicloxacillin, doripenem, epicillin, ertapenem, flucloxacillin, hetacillin, imipenem, imipenem/EDTA, imipenem/relebactam, latamoxef, lenampicillin, loracarbef, mecillinam, meropenem, meropenem/nacubactam, meropenem/vaborbactam, metampicillin, meticillin, mezlocillin, mezlocillin/sulbactam, nafcillin, oxacillin, oxacillin screening test, panipenem, penamecillin, penicillin/novobiocin, penicillin/sulbactam, pheneticillin, phenoxymethylpenicillin, piperacillin, piperacillin/sulbactam, piperacillin/tazobactam, piridicillin, pivampicillin, pivmecillinam, procaine benzylpenicillin, propicillin, razupenem, ritipenem, ritipenem acoxil, sarmoxicillin, sulbenicillin, sultamicillin, talampicillin, tebipenem, temocillin, ticarcillin, ticarcillin/clavulanic acid, tigemonam betalactams_with_inhibitor() can select:  amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin/sulbactam, aztreonam/avibactam, aztreonam/nacubactam, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefoperazone/sulbactam, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefpodoxime/clavulanic acid, ceftaroline/avibactam, ceftazidime/avibactam, ceftazidime/clavulanic acid, ceftolozane/tazobactam, ceftriaxone/beta-lactamase inhibitor, imipenem/relebactam, meropenem/nacubactam, meropenem/vaborbactam, mezlocillin/sulbactam, penicillin/novobiocin, penicillin/sulbactam, piperacillin/sulbactam, piperacillin/tazobactam, ticarcillin/clavulanic acid carbapenems() can select:  biapenem, doripenem, ertapenem, imipenem, imipenem/EDTA, imipenem/relebactam, meropenem, meropenem/nacubactam, meropenem/vaborbactam, panipenem, razupenem, ritipenem, ritipenem acoxil, tebipenem cephalosporins() can select:  cefacetrile, cefaclor, cefadroxil, cefalexin, cefaloridine, cefalotin, cefamandole, cefapirin, cefatrizine, cefazedone, cefazolin, cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetamet, cefetamet pivoxil, cefetecol, cefetrizole, cefiderocol, cefixime, cefmenoxime, cefmetazole, cefodizime, cefonicid, cefoperazone, cefoperazone/sulbactam, ceforanide, cefoselis, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotetan, cefotiam, cefotiam hexetil, cefovecin, cefoxitin, cefoxitin screening test, cefozopran, cefpimizole, cefpiramide, cefpirome, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefprozil, cefquinome, cefroxadine, cefsulodin, cefsumide, ceftaroline, ceftaroline/avibactam, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftezole, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, cefuroxime, cefuroxime axetil, cephradine, latamoxef, loracarbef cephalosporins_1st() can select:  cefacetrile, cefadroxil, cefalexin, cefaloridine, cefalotin, cefapirin, cefatrizine, cefazedone, cefazolin, cefroxadine, ceftezole, cephradine cephalosporins_2nd() can select:  cefaclor, cefamandole, cefmetazole, cefonicid, ceforanide, cefotetan, cefotiam, cefoxitin, cefoxitin screening test, cefprozil, cefuroxime, cefuroxime axetil, loracarbef cephalosporins_3rd() can select:  cefcapene, cefcapene pivoxil, cefdinir, cefditoren, cefditoren pivoxil, cefetamet, cefetamet pivoxil, cefixime, cefmenoxime, cefodizime, cefoperazone, cefoperazone/sulbactam, cefotaxime, cefotaxime screening test, cefotaxime/clavulanic acid, cefotaxime/sulbactam, cefotiam hexetil, cefovecin, cefpimizole, cefpiramide, cefpodoxime, cefpodoxime proxetil, cefpodoxime/clavulanic acid, cefsulodin, ceftazidime, ceftazidime/avibactam, ceftazidime/clavulanic acid, cefteram, cefteram pivoxil, ceftibuten, ceftiofur, ceftizoxime, ceftizoxime alapivoxil, ceftriaxone, ceftriaxone/beta-lactamase inhibitor, latamoxef cephalosporins_4th() can select:  cefepime, cefepime/amikacin, cefepime/clavulanic acid, cefepime/enmetazobactam, cefepime/nacubactam, cefepime/tazobactam, cefepime/zidebactam, cefetecol, cefoselis, cefozopran, cefpirome, cefquinome cephalosporins_5th() can select:  ceftaroline, ceftaroline/avibactam, ceftobiprole, ceftobiprole medocaril, ceftolozane/tazobactam fluoroquinolones() can select:  besifloxacin, ciprofloxacin, ciprofloxacin/metronidazole, ciprofloxacin/ornidazole, ciprofloxacin/tinidazole, clinafloxacin, danofloxacin, delafloxacin, difloxacin, enoxacin, enrofloxacin, finafloxacin, fleroxacin, garenoxacin, gatifloxacin, gemifloxacin, grepafloxacin, lascufloxacin, levofloxacin, levofloxacin/ornidazole, levonadifloxacin, lomefloxacin, marbofloxacin, metioxate, miloxacin, moxifloxacin, nadifloxacin, nemonoxacin, nifuroquine, nitroxoline, norfloxacin, norfloxacin screening test, norfloxacin/metronidazole, norfloxacin/tinidazole, ofloxacin, ofloxacin/ornidazole, orbifloxacin, pazufloxacin, pefloxacin, pefloxacin screening test, pradofloxacin, premafloxacin, prulifloxacin, rufloxacin, sarafloxacin, sitafloxacin, sparfloxacin, temafloxacin, tilbroquinol, tioxacin, tosufloxacin, trovafloxacin glycopeptides() can select:  avoparcin, bleomycin, dalbavancin, norvancomycin, oritavancin, ramoplanin, teicoplanin, teicoplanin-macromethod, telavancin, vancomycin, vancomycin-macromethod isoxazolylpenicillins() can select:  cloxacillin, dicloxacillin, flucloxacillin, meticillin, oxacillin, oxacillin screening test lincosamides() can select:  clindamycin, lincomycin, pirlimycin lipoglycopeptides() can select:  dalbavancin, oritavancin, telavancin macrolides() can select:  acetylmidecamycin, acetylspiramycin, azithromycin, clarithromycin, dirithromycin, erythromycin, flurithromycin, gamithromycin, josamycin, kitasamycin, meleumycin, midecamycin, miocamycin, nafithromycin, oleandomycin, rokitamycin, roxithromycin, solithromycin, spiramycin, telithromycin, tildipirosin, tilmicosin, troleandomycin, tulathromycin, tylosin, tylvalosin monobactams() can select:  aztreonam, aztreonam/avibactam, aztreonam/nacubactam, carumonam, tigemonam nitrofurans() can select:  furazidin, furazolidone, nifurtoinol, nitrofurantoin, nitrofurazone oxazolidinones() can select:  cadazolid, cycloserine, linezolid, tedizolid, thiacetazone penicillins() can select:  amoxicillin, amoxicillin/clavulanic acid, amoxicillin/sulbactam, ampicillin, ampicillin/sulbactam, apalcillin, aspoxicillin, azidocillin, azlocillin, bacampicillin, benzathine benzylpenicillin, benzathine phenoxymethylpenicillin, benzylpenicillin, benzylpenicillin screening test, carbenicillin, carindacillin, ciclacillin, clometocillin, cloxacillin, dicloxacillin, epicillin, flucloxacillin, hetacillin, lenampicillin, mecillinam, metampicillin, meticillin, mezlocillin, mezlocillin/sulbactam, nafcillin, oxacillin, oxacillin screening test, penamecillin, penicillin/novobiocin, penicillin/sulbactam, pheneticillin, phenoxymethylpenicillin, piperacillin, piperacillin/sulbactam, piperacillin/tazobactam, piridicillin, pivampicillin, pivmecillinam, procaine benzylpenicillin, propicillin, sarmoxicillin, sulbenicillin, sultamicillin, talampicillin, temocillin, ticarcillin, ticarcillin/clavulanic acid phenicols() can select:  chloramphenicol, florfenicol, thiamphenicol polymyxins() can select:  colistin, polymyxin B, polymyxin B/polysorbate 80 quinolones() can select:  besifloxacin, cinoxacin, ciprofloxacin, ciprofloxacin/metronidazole, ciprofloxacin/ornidazole, ciprofloxacin/tinidazole, clinafloxacin, danofloxacin, delafloxacin, difloxacin, enoxacin, enrofloxacin, finafloxacin, fleroxacin, flumequine, garenoxacin, gatifloxacin, gemifloxacin, grepafloxacin, lascufloxacin, levofloxacin, levofloxacin/ornidazole, levonadifloxacin, lomefloxacin, marbofloxacin, metioxate, miloxacin, moxifloxacin, nadifloxacin, nalidixic acid, nalidixic acid screening test, nemonoxacin, nifuroquine, nitroxoline, norfloxacin, norfloxacin screening test, norfloxacin/metronidazole, norfloxacin/tinidazole, ofloxacin, ofloxacin/ornidazole, orbifloxacin, oxolinic acid, pazufloxacin, pefloxacin, pefloxacin screening test, pipemidic acid, piromidic acid, pradofloxacin, premafloxacin, prulifloxacin, rosoxacin, rufloxacin, sarafloxacin, sitafloxacin, sparfloxacin, temafloxacin, tilbroquinol, tioxacin, tosufloxacin, trovafloxacin rifamycins() can select:  rifabutin, rifampicin, rifampicin/ethambutol/isoniazid, rifampicin/isoniazid, rifampicin/pyrazinamide/ethambutol/isoniazid, rifampicin/pyrazinamide/isoniazid, rifamycin, rifapentine streptogramins() can select:  pristinamycin quinupristin/dalfopristin sulfonamides() can select:  brodimoprim, sulfadiazine, sulfadiazine/tetroxoprim, sulfadimethoxine, sulfadimidine, sulfafurazole, sulfaisodimidine, sulfalene, sulfamazone, sulfamerazine, sulfamethizole, sulfamethoxazole, sulfamethoxypyridazine, sulfametomidine, sulfametoxydiazine, sulfamoxole, sulfanilamide, sulfaperin, sulfaphenazole, sulfapyridine, sulfathiazole, sulfathiourea tetracyclines() can select:  cetocycline, chlortetracycline, clomocycline, demeclocycline, doxycycline, eravacycline, lymecycline, metacycline, minocycline, omadacycline, oxytetracycline, penimepicycline, rolitetracycline, sarecycline, tetracycline, tetracycline screening test, tigecycline trimethoprims() can select:  brodimoprim, sulfadiazine, sulfadiazine/tetroxoprim, sulfadiazine/trimethoprim, sulfadimethoxine, sulfadimidine, sulfadimidine/trimethoprim, sulfafurazole, sulfaisodimidine, sulfalene, sulfamazone, sulfamerazine, sulfamerazine/trimethoprim, sulfamethizole, sulfamethoxazole, sulfamethoxypyridazine, sulfametomidine, sulfametoxydiazine, sulfametrole/trimethoprim, sulfamoxole, sulfamoxole/trimethoprim, sulfanilamide, sulfaperin, sulfaphenazole, sulfapyridine, sulfathiazole, sulfathiourea, trimethoprim, trimethoprim/sulfamethoxazole ureidopenicillins() can select:  azlocillin, mezlocillin, piperacillin, piperacillin/tazobactam","code":"custom_mdro_guideline(   AMX == \"R\"                       ~ \"My MDRO #1\",   any(cephalosporins_2nd() == \"R\") ~ \"My MDRO #2\",   all(glycopeptides() == \"R\")      ~ \"My MDRO #3\" )"},{"path":"https://amr-for-r.org/reference/custom_mdro_guideline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Custom MDRO Guideline — custom_mdro_guideline","text":"","code":"x <- custom_mdro_guideline(   CIP == \"R\" & age > 60 ~ \"Elderly Type A\",   ERY == \"R\" & age > 60 ~ \"Elderly Type B\" ) x #> A set of custom MDRO rules: #>   1. If CIP is  R  and age is higher than 60 then: Elderly Type A #>   2. If ERY is  R  and age is higher than 60 then: Elderly Type B #>   3. Otherwise: Negative #>  #> Unmatched rows will return NA. #> Results will be of class 'factor', with ordered levels: Negative < Elderly Type A < Elderly Type B  # run the custom rule set (verbose = TRUE will return a logbook instead of the data set): out <- mdro(example_isolates, guideline = x) table(out) #> out #>       Negative Elderly Type A Elderly Type B  #>           1070            198            732   out <- mdro(example_isolates, guideline = x, verbose = TRUE) head(out) #>    row_number microorganism           MDRO #> V1          1          <NA> Elderly Type B #> V2          2          <NA> Elderly Type B #> V3          3          <NA>       Negative #> V4          4          <NA>       Negative #> V5          5          <NA>       Negative #> V6          6          <NA>       Negative #>                                   reason #> V1 matched rule 2: ERY == \"R\" & age > 60 #> V2 matched rule 2: ERY == \"R\" & age > 60 #> V3                      no rules matched #> V4                      no rules matched #> V5                      no rules matched #> V6                      no rules matched #>                               all_nonsusceptible_columns        guideline #> V1 PEN, TMP, SXT, LNZ, VAN, TEC, TCY, ERY, CLI, AZM, RIF Custom guideline #> V2 PEN, TMP, SXT, LNZ, VAN, TEC, TCY, ERY, CLI, AZM, RIF Custom guideline #> V3                     PEN, FLC, CXM, CAZ, ERY, AZM, COL Custom guideline #> V4                     PEN, FLC, CXM, CAZ, ERY, AZM, COL Custom guideline #> V5                PEN, FLC, CXM, CAZ, TMP, ERY, AZM, COL Custom guideline #> V6           PEN, FLC, CXM, CAZ, TMP, ERY, CLI, AZM, COL Custom guideline  # you can create custom guidelines using selectors (see ?antimicrobial_selectors) my_guideline <- custom_mdro_guideline(   AMX == \"R\" ~ \"Custom MDRO 1\",   all(cephalosporins_2nd() == \"R\") ~ \"Custom MDRO 2\" ) my_guideline #> A set of custom MDRO rules: #>   1. If AMX is  R  then: Custom MDRO 1 #>   2. If all of cephalosporins_2nd() is  R  then: Custom MDRO 2 #>   3. Otherwise: Negative #>  #> Unmatched rows will return NA. #> Results will be of class 'factor', with ordered levels: Negative < Custom MDRO 1 < Custom MDRO 2  out <- mdro(example_isolates, guideline = my_guideline) #> ℹ For cephalosporins_2nd() using columns 'CXM' (cefuroxime) and 'FOX' #>   (cefoxitin) #> ℹ Assuming a filter on all 2 cephalosporins_2nd. Wrap around all() or #>   any() to prevent this note. table(out) #> out #>      Negative Custom MDRO 1 Custom MDRO 2  #>          1144           804            52"},{"path":"https://amr-for-r.org/reference/dosage.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","title":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","text":"EUCAST breakpoints used package based dosages data set. can retrieved eucast_dosage().","code":""},{"path":"https://amr-for-r.org/reference/dosage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","text":"","code":"dosage"},{"path":"https://amr-for-r.org/reference/dosage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","text":"tibble 759 observations 9 variables: ab Antimicrobial ID used package (AMC), using official EARS-Net (European Antimicrobial Resistance Surveillance Network) codes available name Official name antimicrobial drug used WHONET/EARS-Net type Type dosage, either \"high_dosage\", \"standard_dosage\", \"uncomplicated_uti\" dose Dose, \"2 g\" \"25 mg/kg\" dose_times Number times dose must administered administration Route administration, either \"\", \"im\", \"iv\", \"oral\" notes Additional dosage notes original_txt Original text PDF file EUCAST eucast_version Version number EUCAST Clinical Breakpoints guideline dosages apply, either 15, 14, 13.1, 12, 11","code":""},{"path":"https://amr-for-r.org/reference/dosage.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/dosage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with Treatment Dosages as Defined by EUCAST — dosage","text":"","code":"dosage #> # A tibble: 759 × 9 #>    ab   name            type  dose  dose_times administration notes original_txt #>    <ab> <chr>           <chr> <chr>      <int> <chr>          <chr> <chr>        #>  1 AMK  Amikacin        stan… 25-3…          1 iv             \"\"    \"25-30 mg/k… #>  2 AMX  Amoxicillin     high… 2 g            6 iv             \"\"    \"2 g x 6 iv\" #>  3 AMX  Amoxicillin     stan… 1 g            3 iv             \"\"    \"1 g x 3-4 … #>  4 AMX  Amoxicillin     high… 0.75…          3 oral           \"\"    \"0.75-1 g x… #>  5 AMX  Amoxicillin     stan… 0.5 g          3 oral           \"\"    \"0.5 g x 3 … #>  6 AMX  Amoxicillin     unco… 0.5 g          3 oral           \"\"    \"0.5 g x 3 … #>  7 AMC  Amoxicillin/cl… high… 2 g …          3 iv             \"\"    \"(2 g amoxi… #>  8 AMC  Amoxicillin/cl… stan… 1 g …          3 iv             \"\"    \"(1 g amoxi… #>  9 AMC  Amoxicillin/cl… high… 0.87…          3 oral           \"\"    \"(0.875 g a… #> 10 AMC  Amoxicillin/cl… stan… 0.5 …          3 oral           \"\"    \"(0.5 g amo… #> # ℹ 749 more rows #> # ℹ 1 more variable: eucast_version <dbl>"},{"path":"https://amr-for-r.org/reference/esbl_isolates.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 500 ESBL Isolates — esbl_isolates","title":"Data Set with 500 ESBL Isolates — esbl_isolates","text":"data set containing 500 microbial isolates MIC values common antibiotics binary esbl column extended-spectrum beta-lactamase (ESBL) production. data set contains randomised fictitious data reflects reality can used practise AMR-related machine learning, e.g., classification modelling tidymodels.","code":""},{"path":"https://amr-for-r.org/reference/esbl_isolates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 500 ESBL Isolates — esbl_isolates","text":"","code":"esbl_isolates"},{"path":"https://amr-for-r.org/reference/esbl_isolates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 500 ESBL Isolates — esbl_isolates","text":"tibble 500 observations 19 variables: esbl Logical indicator isolate ESBL-producing genus Genus microorganism AMC:COL MIC values 17 antimicrobial agents, transformed class mic (see .mic())","code":""},{"path":"https://amr-for-r.org/reference/esbl_isolates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Set with 500 ESBL Isolates — esbl_isolates","text":"See tidymodels integration example using data set.","code":""},{"path":"https://amr-for-r.org/reference/esbl_isolates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 500 ESBL Isolates — esbl_isolates","text":"","code":"esbl_isolates #> # A tibble: 500 × 19 #>    esbl  genus   AMC   AMP   TZP   CXM   FOX   CTX   CAZ   GEN   TOB   TMP   SXT #>    <lgl> <chr> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> <mic> #>  1 FALSE Esch…    32    32     4    64    64  8.00  8.00     1     1  16.0    20 #>  2 FALSE Esch…    32    32     4    64    64  4.00  8.00     1     1  16.0   320 #>  3 FALSE Esch…     4     2    64     8     4  8.00  0.12    16    16   0.5    20 #>  4 FALSE Kleb…    32    32    16    64    64  8.00  8.00     1     1   0.5    20 #>  5 FALSE Esch…    32    32     4     4     4  0.25  2.00     1     1  16.0   320 #>  6 FALSE Citr…    32    32    16    64    64 64.00 32.00     1     1   0.5    20 #>  7 FALSE Morg…    32    32     4    64    64 16.00  2.00     1     1   0.5    20 #>  8 FALSE Prot…    16    32     4     1     4  8.00  0.12     1     1  16.0   320 #>  9 FALSE Ente…    32    32     8    64    64 32.00  4.00     1     1   0.5    20 #> 10 FALSE Citr…    32    32    32    64    64  8.00 64.00     1     1  16.0   320 #> # ℹ 490 more rows #> # ℹ 6 more variables: NIT <mic>, FOS <mic>, CIP <mic>, IPM <mic>, MEM <mic>, #> #   COL <mic>"},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply EUCAST Rules — eucast_rules","title":"Apply EUCAST Rules — eucast_rules","text":"Apply rules clinical breakpoints notes expected resistant phenotypes defined European Committee Antimicrobial Susceptibility Testing (EUCAST, https://www.eucast.org), see Source. Use eucast_dosage() get data.frame advised dosages certain bug-drug combination, based dosage data set. improve interpretation antibiogram EUCAST rules applied, non-EUCAST rules can applied default, see Details.","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply EUCAST Rules — eucast_rules","text":"","code":"eucast_rules(x, col_mo = NULL, info = interactive(),   rules = getOption(\"AMR_eucastrules\", default = c(\"breakpoints\",   \"expected_phenotypes\")), verbose = FALSE, version_breakpoints = 15,   version_expected_phenotypes = 1.2, version_expertrules = 3.3,   ampc_cephalosporin_resistance = NA, only_sir_columns = any(is.sir(x)),   custom_rules = NULL, overwrite = FALSE, ...)  eucast_dosage(ab, administration = \"iv\", version_breakpoints = 15)"},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Apply EUCAST Rules — eucast_rules","text":"EUCAST Expert Rules. Version 2.0, 2012. Leclercq et al. EUCAST expert rules antimicrobial susceptibility testing. Clin Microbiol Infect. 2013;19(2):141-60; doi:10.1111/j.1469-0691.2011.03703.x EUCAST Expert Rules, Intrinsic Resistance Exceptional Phenotypes Tables. Version 3.1, 2016. (link) EUCAST Intrinsic Resistance Unusual Phenotypes. Version 3.2, 2020. (link) EUCAST Intrinsic Resistance Unusual Phenotypes. Version 3.3, 2021. (link) EUCAST Breakpoint tables interpretation MICs zone diameters. Version 9.0, 2019. (link) EUCAST Breakpoint tables interpretation MICs zone diameters. Version 10.0, 2020. (link) EUCAST Breakpoint tables interpretation MICs zone diameters. Version 11.0, 2021. (link) EUCAST Breakpoint tables interpretation MICs zone diameters. Version 12.0, 2022. (link)","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply EUCAST Rules — eucast_rules","text":"x data set antimicrobials columns, amox, AMX AMC. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). info logical indicate whether progress printed console - default print interactive sessions. rules character vector specifies rules applied. Must one \"breakpoints\", \"expected_phenotypes\", \"expert\", \"\", \"custom\", \"\", defaults c(\"breakpoints\", \"expected_phenotypes\"). default value can set another value using package option AMR_eucastrules: options(AMR_eucastrules = \"\"). using \"custom\", sure fill argument custom_rules . Custom rules can created custom_eucast_rules(). verbose logical turn Verbose mode (default ). Verbose mode, function apply rules data, instead returns data set logbook form extensive info rows columns effected way. Using Verbose mode takes lot time. version_breakpoints version number use EUCAST Clinical Breakpoints guideline. Can \"15.0\", \"14.0\", \"13.1\", \"12.0\", \"11.0\", \"10.0\". version_expected_phenotypes version number use EUCAST Expected Phenotypes. Can \"1.2\". version_expertrules version number use EUCAST Expert Rules Intrinsic Resistance guideline. Can \"3.3\", \"3.2\", \"3.1\". ampc_cephalosporin_resistance (applies rules contains \"expert\" \"\") character value applied cefotaxime, ceftriaxone ceftazidime AmpC de-repressed cephalosporin-resistant mutants - default NA. Currently works version_expertrules 3.2 higher; versions 'EUCAST Expert Rules Enterobacterales' state results cefotaxime, ceftriaxone ceftazidime reported note, results suppressed (emptied) three drugs. value NA (default) argument remove results three drugs, e.g. value \"R\" make results drugs resistant. Use NULL FALSE alter results three drugs AmpC de-repressed cephalosporin-resistant mutants. Using TRUE equal using \"R\".  EUCAST Expert Rules v3.2, rule applies : Citrobacter braakii, Citrobacter freundii, Citrobacter gillenii, Citrobacter murliniae, Citrobacter rodenticum, Citrobacter sedlakii, Citrobacter werkmanii, Citrobacter youngae, Enterobacter, Hafnia alvei, Klebsiella aerogenes, Morganella morganii, Providencia, Serratia. only_sir_columns logical indicate whether antimicrobial columns must included transformed class sir beforehand. Defaults FALSE columns x class sir. custom_rules Custom rules apply, created custom_eucast_rules(). overwrite logical indicating whether overwrite existing SIR values (default: FALSE). FALSE, non-SIR values modified (.e., value already S, R). ensure compliance EUCAST guidelines, remain FALSE, EUCAST notes often state organism \"tested susceptibility individual agents reported resistant\". ... Column names antimicrobials. automatically detect antimicrobial column names, provide named arguments; guess_ab_col() used detection. manually specify column, provide name (case-insensitive) argument, e.g. AMX = \"amoxicillin\". skip specific antimicrobial, set NULL, e.g. TIC = NULL exclude ticarcillin. manually defined column exist data, skipped warning. ab (vector ) text can coerced valid antimicrobial drug code .ab(). administration Route administration, either \"\", \"im\", \"iv\", \"oral\".","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply EUCAST Rules — eucast_rules","text":"input x, possibly edited values antimicrobials. , verbose = TRUE, data.frame original new values affected bug-drug combinations.","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply EUCAST Rules — eucast_rules","text":"Note: function translate MIC values SIR values. Use .sir() . Note: ampicillin (AMP, J01CA01) available amoxicillin (AMX, J01CA04) , latter used rules dependency ampicillin. drugs interchangeable comes expression antimicrobial resistance. file containing EUCAST rules located : https://github.com/msberends/AMR/blob/main/data-raw/eucast_rules.tsv.  Note: Old taxonomic names replaced current taxonomy applicable. example, Ochrobactrum anthropi renamed Brucella anthropi 2020; original EUCAST rules v3.1 v3.2 yet contain new taxonomic name. AMR package contains full microbial taxonomy updated June 24th, 2024, see microorganisms.","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"custom-rules","dir":"Reference","previous_headings":"","what":"Custom Rules","title":"Apply EUCAST Rules — eucast_rules","text":"Custom rules can created using custom_eucast_rules(), e.g.:","code":"x <- custom_eucast_rules(AMC == \"R\" & genus == \"Klebsiella\" ~ aminopenicillins == \"R\",                          AMC == \"I\" & genus == \"Klebsiella\" ~ aminopenicillins == \"I\")  eucast_rules(example_isolates, rules = \"custom\", custom_rules = x)"},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"-other-rules","dir":"Reference","previous_headings":"","what":"'Other' Rules","title":"Apply EUCAST Rules — eucast_rules","text":"processing, two non-EUCAST rules drug combinations can applied improve efficacy EUCAST rules, reliability data (analysis). rules : drug enzyme inhibitor set S drug without enzyme inhibitor S drug without enzyme inhibitor set R drug enzyme inhibitor R Important examples include amoxicillin amoxicillin/clavulanic acid, trimethoprim trimethoprim/sulfamethoxazole. Needless say, rules work, drugs must available data set. Since rules officially approved EUCAST, applied default. use rules, include \"\" rules argument, use eucast_rules(..., rules = \"\"). can also set package option AMR_eucastrules, .e. run options(AMR_eucastrules = \"\").","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Apply EUCAST Rules — eucast_rules","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/eucast_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply EUCAST Rules — eucast_rules","text":"","code":"# \\donttest{ a <- data.frame(   mo = c(     \"Staphylococcus aureus\",     \"Enterococcus faecalis\",     \"Escherichia coli\",     \"Klebsiella pneumoniae\",     \"Pseudomonas aeruginosa\"   ),   VAN = \"-\", # Vancomycin   AMX = \"-\", # Amoxicillin   COL = \"-\", # Colistin   CAZ = \"-\", # Ceftazidime   CXM = \"-\", # Cefuroxime   PEN = \"S\", # Benzylpenicillin   FOX = \"S\", # Cefoxitin   stringsAsFactors = FALSE )  head(a) #>                       mo VAN AMX COL CAZ CXM PEN FOX #> 1  Staphylococcus aureus   -   -   -   -   -   S   S #> 2  Enterococcus faecalis   -   -   -   -   -   S   S #> 3       Escherichia coli   -   -   -   -   -   S   S #> 4  Klebsiella pneumoniae   -   -   -   -   -   S   S #> 5 Pseudomonas aeruginosa   -   -   -   -   -   S   S   # apply EUCAST rules: some results wil be changed b <- eucast_rules(a, overwrite = TRUE) #> Warning: in eucast_rules(): not all columns with antimicrobial results are of #> class 'sir'. Transform them on beforehand, with e.g.: #>   - a %>% as.sir(CXM:AMX) #>   - a %>% mutate_if(is_sir_eligible, as.sir) #>   - a %>% mutate(across(where(is_sir_eligible), as.sir))  head(b) #>                       mo VAN AMX COL CAZ CXM PEN FOX #> 1  Staphylococcus aureus   -   S   R   R   S   S   S #> 2  Enterococcus faecalis   -   -   R   R   R   S   R #> 3       Escherichia coli   R   -   -   -   -   R   S #> 4  Klebsiella pneumoniae   R   R   -   -   -   R   S #> 5 Pseudomonas aeruginosa   R   R   -   -   R   R   R   # do not apply EUCAST rules, but rather get a data.frame # containing all details about the transformations: c <- eucast_rules(a, overwrite = TRUE, verbose = TRUE) #> Warning: in eucast_rules(): not all columns with antimicrobial results are of #> class 'sir'. Transform them on beforehand, with e.g.: #>   - a %>% as.sir(CXM:AMX) #>   - a %>% mutate_if(is_sir_eligible, as.sir) #>   - a %>% mutate(across(where(is_sir_eligible), as.sir)) head(c) #>   row col           mo_fullname old new rule          rule_group #> 1   1 AMX Staphylococcus aureus   -   S              Breakpoints #> 2   1 CXM Staphylococcus aureus   -   S              Breakpoints #> 3   1 CAZ Staphylococcus aureus   -   R      Expected phenotypes #> 4   1 COL Staphylococcus aureus   -   R      Expected phenotypes #> 5   2 CAZ Enterococcus faecalis   -   R      Expected phenotypes #> 6   2 COL Enterococcus faecalis   -   R      Expected phenotypes #>                                                         rule_name #> 1                                                  Staphylococcus #> 2                                                  Staphylococcus #> 3 Table 4: Expected resistant phenotype in gram-positive bacteria #> 4 Table 4: Expected resistant phenotype in gram-positive bacteria #> 5 Table 4: Expected resistant phenotype in gram-positive bacteria #> 6 Table 4: Expected resistant phenotype in gram-positive bacteria #>                                         rule_source #> 1   'EUCAST Clinical Breakpoint Tables' v15.0, 2025 #> 2   'EUCAST Clinical Breakpoint Tables' v15.0, 2025 #> 3 'EUCAST Expected Resistant Phenotypes' v1.2, 2023 #> 4 'EUCAST Expected Resistant Phenotypes' v1.2, 2023 #> 5 'EUCAST Expected Resistant Phenotypes' v1.2, 2023 #> 6 'EUCAST Expected Resistant Phenotypes' v1.2, 2023 # }  # Dosage guidelines:  eucast_dosage(c(\"tobra\", \"genta\", \"cipro\"), \"iv\") #> ℹ Dosages for antimicrobial drugs, as meant for 'EUCAST Clinical Breakpoint #>   Tables' v15.0 (2025). This note will be shown once per session. #> # A tibble: 3 × 5 #>   ab   name          standard_dosage  high_dosage  eucast_version #>   <ab> <chr>         <chr>            <chr>                 <dbl> #> 1 TOB  Tobramycin    6-7 mg/kg x 1 iv NA                       15 #> 2 GEN  Gentamicin    6-7 mg/kg x 1 iv NA                       15 #> 3 CIP  Ciprofloxacin 0.4 g x 2 iv     0.4 g x 3 iv             15  eucast_dosage(c(\"tobra\", \"genta\", \"cipro\"), \"iv\", version_breakpoints = 10) #> # A tibble: 3 × 5 #>   ab   name          standard_dosage high_dosage eucast_version #>   <ab> <chr>         <chr>           <chr>                <dbl> #> 1 TOB  Tobramycin    NA              NA                      NA #> 2 GEN  Gentamicin    NA              NA                      NA #> 3 CIP  Ciprofloxacin NA              NA                      NA"},{"path":"https://amr-for-r.org/reference/example_isolates.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 2 000 Example Isolates — example_isolates","title":"Data Set with 2 000 Example Isolates — example_isolates","text":"data set containing 2 000 microbial isolates full antibiograms. data set contains randomised fictitious data, reflects reality can used practise AMR data analysis. examples, please read tutorial website.","code":""},{"path":"https://amr-for-r.org/reference/example_isolates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 2 000 Example Isolates — example_isolates","text":"","code":"example_isolates"},{"path":"https://amr-for-r.org/reference/example_isolates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 2 000 Example Isolates — example_isolates","text":"tibble 2 000 observations 46 variables: date Date receipt laboratory patient ID patient age Age patient gender Gender patient, either \"F\" \"M\" ward Ward type patient admitted, either \"Clinical\", \"ICU\", \"Outpatient\" mo ID microorganism created .mo(), see also microorganisms data set PEN:RIF 40 different antimicrobials class sir (see .sir()); column names occur antimicrobials data set can translated set_ab_names() ab_name()","code":""},{"path":"https://amr-for-r.org/reference/example_isolates.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with 2 000 Example Isolates — example_isolates","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/example_isolates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 2 000 Example Isolates — example_isolates","text":"","code":"example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …"},{"path":"https://amr-for-r.org/reference/example_isolates_unclean.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with Unclean Data — example_isolates_unclean","title":"Data Set with Unclean Data — example_isolates_unclean","text":"data set containing 3 000 microbial isolates cleaned consequently ready AMR data analysis. data set can used practice.","code":""},{"path":"https://amr-for-r.org/reference/example_isolates_unclean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with Unclean Data — example_isolates_unclean","text":"","code":"example_isolates_unclean"},{"path":"https://amr-for-r.org/reference/example_isolates_unclean.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with Unclean Data — example_isolates_unclean","text":"tibble 3 000 observations 8 variables: patient_id ID patient date date receipt laboratory hospital ID hospital, C bacteria info microorganism can transformed .mo(), see also microorganisms AMX:GEN 4 different antimicrobials transformed .sir()","code":""},{"path":"https://amr-for-r.org/reference/example_isolates_unclean.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with Unclean Data — example_isolates_unclean","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/example_isolates_unclean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with Unclean Data — example_isolates_unclean","text":"","code":"example_isolates_unclean #> # A tibble: 3,000 × 8 #>    patient_id hospital date       bacteria      AMX   AMC   CIP   GEN   #>    <chr>      <chr>    <date>     <chr>         <chr> <chr> <chr> <chr> #>  1 J3         A        2012-11-21 E. coli       R     I     S     S     #>  2 R7         A        2018-04-03 K. pneumoniae R     I     S     S     #>  3 P3         A        2014-09-19 E. coli       R     S     S     S     #>  4 P10        A        2015-12-10 E. coli       S     I     S     S     #>  5 B7         A        2015-03-02 E. coli       S     S     S     S     #>  6 W3         A        2018-03-31 S. aureus     R     S     R     S     #>  7 J8         A        2016-06-14 E. coli       R     S     S     S     #>  8 M3         A        2015-10-25 E. coli       R     S     S     S     #>  9 J3         A        2019-06-19 E. coli       S     S     S     S     #> 10 G6         A        2015-04-27 S. aureus     S     S     S     S     #> # ℹ 2,990 more rows"},{"path":"https://amr-for-r.org/reference/export_ncbi_biosample.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Data Set as NCBI BioSample Antibiogram — export_ncbi_biosample","title":"Export Data Set as NCBI BioSample Antibiogram — export_ncbi_biosample","text":"Export Data Set NCBI BioSample Antibiogram","code":""},{"path":"https://amr-for-r.org/reference/export_ncbi_biosample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Data Set as NCBI BioSample Antibiogram — export_ncbi_biosample","text":"","code":"export_ncbi_biosample(x, filename = paste0(\"biosample_\", format(Sys.time(),   \"%Y-%m-%d-%H%M%S\"), \".xlsx\"), type = \"pathogen MIC\",   columns = where(is.mic), save_as_xlsx = TRUE)"},{"path":"https://amr-for-r.org/reference/export_ncbi_biosample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Data Set as NCBI BioSample Antibiogram — export_ncbi_biosample","text":"x data set. filename character string specifying file name. type character string specifying type data set, either \"pathogen MIC\" \"beta-lactamase MIC\", see https://www.ncbi.nlm.nih.gov/biosample/docs/.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine First Isolates — first_isolate","title":"Determine First Isolates — first_isolate","text":"Determine first isolates microorganisms every patient per episode (needed) per specimen type. functions support four methods summarised Hindler et al. 2007 (doi:10.1086/511864 ). determine patient episodes necessarily based microorganisms, use is_new_episode() also supports grouping dplyr package.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine First Isolates — first_isolate","text":"","code":"first_isolate(x = NULL, col_date = NULL, col_patient_id = NULL,   col_mo = NULL, col_testcode = NULL, col_specimen = NULL,   col_icu = NULL, col_keyantimicrobials = NULL, episode_days = 365,   testcodes_exclude = NULL, icu_exclude = FALSE, specimen_group = NULL,   type = \"points\", method = c(\"phenotype-based\", \"episode-based\",   \"patient-based\", \"isolate-based\"), ignore_I = TRUE, points_threshold = 2,   info = interactive(), include_unknown = FALSE,   include_untested_sir = TRUE, ...)  filter_first_isolate(x = NULL, col_date = NULL, col_patient_id = NULL,   col_mo = NULL, episode_days = 365, method = c(\"phenotype-based\",   \"episode-based\", \"patient-based\", \"isolate-based\"), ...)"},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine First Isolates — first_isolate","text":"Methodology functions strictly based : M39 Analysis Presentation Cumulative Antimicrobial Susceptibility Test Data, 5th Edition, 2022, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/microbiology/documents/m39/. Hindler JF Stelling J (2007). Analysis Presentation Cumulative Antibiograms: New Consensus Guideline Clinical Laboratory Standards Institute. Clinical Infectious Diseases, 44(6), 867-873. doi:10.1086/511864","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine First Isolates — first_isolate","text":"x data.frame containing isolates. Can left blank automatic determination, see Examples. col_date Column name result date (date received lab) - default first column date class. col_patient_id Column name unique IDs patients - default first column starts 'patient' 'patid' (case insensitive). col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). col_testcode Column name test codes. Use col_testcode = NULL exclude certain test codes (test codes screening). case testcodes_exclude ignored. col_specimen Column name specimen type group. col_icu Column name logicals (TRUE/FALSE) whether ward department Intensive Care Unit (ICU). can also logical vector length rows x. col_keyantimicrobials (useful method = \"phenotype-based\") column name key antimicrobials determine first isolates, see key_antimicrobials(). default first column starts 'key' followed 'ab' 'antibiotics' 'antimicrobials' (case insensitive). Use col_keyantimicrobials = FALSE prevent . Can also output key_antimicrobials(). episode_days Episode days genus/species combination determined 'first isolate' . default 365 days based guideline CLSI, see Source. testcodes_exclude character vector test codes excluded (case-insensitive). icu_exclude logical indicate whether ICU isolates excluded (rows value TRUE column set col_icu). specimen_group Value column set col_specimen filter . type Type determine weighed isolates; can \"keyantimicrobials\" \"points\", see Details. method method apply, either \"phenotype-based\", \"episode-based\", \"patient-based\" \"isolate-based\" (can abbreviated), see Details. default \"phenotype-based\" antimicrobial test results present data, \"episode-based\" otherwise. ignore_I logical indicate whether antibiotic interpretations \"\" ignored type = \"keyantimicrobials\", see Details. points_threshold Minimum number points require differences antibiogram lead inclusion isolate type = \"points\", see Details. info logical indicate info printed - default TRUE interactive mode. include_unknown logical indicate whether 'unknown' microorganisms included , .e. microbial code \"UNKNOWN\", defaults FALSE. WHONET users, means records organism code \"con\" (contamination) excluded default. Isolates microbial ID NA always excluded first isolate. include_untested_sir logical indicate whether also rows without antibiotic results still eligible becoming first isolate. Use include_untested_sir = FALSE always return FALSE rows. checks data set columns class sir consequently requires transforming columns antibiotic results using .sir() first. ... Arguments passed first_isolate() using filter_first_isolate(), otherwise arguments passed key_antimicrobials() (universal, gram_negative, gram_positive).","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine First Isolates — first_isolate","text":"logical vector","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine First Isolates — first_isolate","text":"methodology implemented functions strictly based recommendations outlined CLSI Guideline M39 research overview Hindler et al. (2007, doi:10.1086/511864 ). conduct epidemiological analyses antimicrobial resistance data, -called first isolates included prevent overestimation underestimation antimicrobial resistance. Different methods can used , see . functions context-aware. means x argument can left blank used inside data.frame call, see Examples. first_isolate() function wrapper around is_new_episode() function, efficient data sets containing microorganism codes names. isolates microbial ID NA excluded first isolate.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"different-methods","dir":"Reference","previous_headings":"","what":"Different methods","title":"Determine First Isolates — first_isolate","text":"According previously-mentioned sources, different methods (algorithms) select first isolates increasing reliability: isolate-based, patient-based, episode-based phenotype-based. methods select combination taxonomic genus species (subspecies). mentioned methods covered first_isolate() function:","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"isolate-based","dir":"Reference","previous_headings":"","what":"Isolate-based","title":"Determine First Isolates — first_isolate","text":"method require selection, isolates included. , however, respect arguments set first_isolate() function. example, default setting include_unknown (FALSE) omit selection rows without microbial ID.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"patient-based","dir":"Reference","previous_headings":"","what":"Patient-based","title":"Determine First Isolates — first_isolate","text":"include every genus-species combination per patient , set episode_days Inf. method makes sure duplicate isolates selected patient. method preferred e.g. identify first MRSA finding patient determine incidence. Conversely, large longitudinal data set, mean isolates excluded found years initial isolate.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"episode-based","dir":"Reference","previous_headings":"","what":"Episode-based","title":"Determine First Isolates — first_isolate","text":"include every genus-species combination per patient episode , set episode_days sensible number days. Depending type analysis, 14, 30, 60 365. Short episodes common analysing specific hospital ward data ICU cases, long episodes common analysing regional national data. common method correct duplicate isolates. Patients categorised episodes based ID dates (e.g., date specimen receipt laboratory result). common method, take account antimicrobial test results. means e.g. methicillin-resistant Staphylococcus aureus (MRSA) isolate differentiated wildtype Staphylococcus aureus isolate.","code":""},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"phenotype-based","dir":"Reference","previous_headings":"","what":"Phenotype-based","title":"Determine First Isolates — first_isolate","text":"reliable method, since also weighs antibiogram (antimicrobial test results) yielding -called 'first weighted isolates'. two different methods weigh antibiogram: Using type = \"points\" argument points_threshold (default) method weighs antimicrobial drugs available data set. difference S R (vice versa) counts 0.5 points, difference S R (vice versa) counts 1 point. sum points exceeds points_threshold, defaults 2, isolate selected first weighted isolate. antimicrobials internally selected using all_antimicrobials() function. output function need passed first_isolate() function. Using type = \"keyantimicrobials\" argument ignore_I method weighs specific antimicrobial drugs, called key antimicrobials. difference S R (vice versa) key antimicrobials select isolate first weighted isolate. ignore_I = FALSE, also differences S R (vice versa) lead . Key antimicrobials internally selected using key_antimicrobials() function, can also added manually variable data set col_keyantimicrobials argument. Another option pass output key_antimicrobials() function directly col_keyantimicrobials argument. default method phenotype-based (using type = \"points\") episode-based (using episode_days = 365). makes sure every genus-species combination selected per patient per year, taking account antimicrobial test results. antimicrobial test results available data set, episode-based method applied default.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/first_isolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine First Isolates — first_isolate","text":"","code":"# `example_isolates` is a data set available in the AMR package. # See ?example_isolates.  example_isolates[first_isolate(info = TRUE), ] #> ℹ Determining first isolates using an episode length of 365 days #> ℹ Using column 'date' as input for col_date. #> ℹ Using column 'patient' as input for col_patient_id. #> ℹ Basing inclusion on all antimicrobial results, using a points threshold #>   of 2 #> ℹ Excluding 16 isolates with a microbial ID 'UNKNOWN' (in column 'mo') #> => Found 1,387 'phenotype-based' first isolates (69.4% of total where a #>    microbial ID was available) #> # A tibble: 1,387 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  3 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  4 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #>  6 2002-01-17 495616     67 M      Clinical B_STPHY_EPDR   R     NA    S     NA  #>  7 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  8 2002-01-21 462081     75 F      Clinical B_CTRBC_FRND   R     NA    NA    R   #>  9 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #> 10 2002-02-03 481442     76 M      ICU      B_STPHY_CONS   R     NA    S     NA  #> # ℹ 1,377 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … # \\donttest{ # get all first Gram-negatives example_isolates[which(first_isolate(info = FALSE) & mo_is_gram_negative()), ] #> ℹ Using column 'mo' as input for mo_is_gram_negative() #> # A tibble: 441 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-21 462081     75 F      Clinical B_CTRBC_FRND   R     NA    NA    R   #>  4 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #>  5 2002-02-05 067927     45 F      ICU      B_SERRT_MRCS   R     NA    NA    R   #>  6 2002-02-27 066895     85 F      Clinical B_KLBSL_PNMN   R     NA    NA    R   #>  7 2002-03-08 4FC193     69 M      Clinical B_ESCHR_COLI   R     NA    NA    R   #>  8 2002-03-16 4FC193     69 M      Clinical B_PSDMN_AERG   R     NA    NA    R   #>  9 2002-04-01 496896     46 F      ICU      B_ESCHR_COLI   R     NA    NA    NA  #> 10 2002-04-23 EE2510     69 F      ICU      B_ESCHR_COLI   R     NA    NA    NA  #> # ℹ 431 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  if (require(\"dplyr\")) {   # filter on first isolates using dplyr:   example_isolates %>%     filter(first_isolate(info = TRUE)) } #> ℹ Determining first isolates using an episode length of 365 days #> ℹ Basing inclusion on all antimicrobial results, using a points threshold #>   of 2 #> ℹ Excluding 16 isolates with a microbial ID 'UNKNOWN' (in column 'mo') #> => Found 1,387 'phenotype-based' first isolates (69.4% of total where a #>    microbial ID was available) #> # A tibble: 1,387 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  3 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  4 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #>  6 2002-01-17 495616     67 M      Clinical B_STPHY_EPDR   R     NA    S     NA  #>  7 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  8 2002-01-21 462081     75 F      Clinical B_CTRBC_FRND   R     NA    NA    R   #>  9 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #> 10 2002-02-03 481442     76 M      ICU      B_STPHY_CONS   R     NA    S     NA  #> # ℹ 1,377 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … if (require(\"dplyr\")) {   # short-hand version:   example_isolates %>%     filter_first_isolate(info = FALSE) } #> # A tibble: 1,387 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  3 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  4 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #>  6 2002-01-17 495616     67 M      Clinical B_STPHY_EPDR   R     NA    S     NA  #>  7 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  8 2002-01-21 462081     75 F      Clinical B_CTRBC_FRND   R     NA    NA    R   #>  9 2002-01-22 F35553     50 M      ICU      B_PROTS_MRBL   R     NA    NA    NA  #> 10 2002-02-03 481442     76 M      ICU      B_STPHY_CONS   R     NA    S     NA  #> # ℹ 1,377 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … if (require(\"dplyr\")) {   # flag the first isolates per group:   example_isolates %>%     group_by(ward) %>%     mutate(first = first_isolate(info = TRUE)) %>%     select(ward, date, patient, mo, first) } #> ℹ Determining first isolates using an episode length of 365 days #> ℹ Basing inclusion on all antimicrobial results, using a points threshold #>   of 2 #>  #> Group: ward = \"Clinical\" #> ℹ Excluding 9 isolates with a microbial ID 'UNKNOWN' (in column 'mo') #> => Found 865 'phenotype-based' first isolates (70.1% of total where a #>    microbial ID was available) #>  #> Group: ward = \"ICU\" #> ℹ Excluding 6 isolates with a microbial ID 'UNKNOWN' (in column 'mo') #> => Found 452 'phenotype-based' first isolates (70.0% of total where a #>    microbial ID was available) #>  #> Group: ward = \"Outpatient\" #> ℹ Excluding 1 isolates with a microbial ID 'UNKNOWN' (in column 'mo') #> => Found 99 'phenotype-based' first isolates (82.5% of total where a #>    microbial ID was available) #> # A tibble: 2,000 × 5 #> # Groups:   ward [3] #>    ward     date       patient mo           first #>    <chr>    <date>     <chr>   <mo>         <lgl> #>  1 Clinical 2002-01-02 A77334  B_ESCHR_COLI TRUE  #>  2 Clinical 2002-01-03 A77334  B_ESCHR_COLI FALSE #>  3 ICU      2002-01-07 067927  B_STPHY_EPDR TRUE  #>  4 ICU      2002-01-07 067927  B_STPHY_EPDR FALSE #>  5 ICU      2002-01-13 067927  B_STPHY_EPDR FALSE #>  6 ICU      2002-01-13 067927  B_STPHY_EPDR FALSE #>  7 Clinical 2002-01-14 462729  B_STPHY_AURS TRUE  #>  8 Clinical 2002-01-14 462729  B_STPHY_AURS FALSE #>  9 ICU      2002-01-16 067927  B_STPHY_EPDR TRUE  #> 10 ICU      2002-01-17 858515  B_STPHY_EPDR TRUE  #> # ℹ 1,990 more rows # }"},{"path":"https://amr-for-r.org/reference/g.test.html","id":null,"dir":"Reference","previous_headings":"","what":"G-test for Count Data — g.test","title":"G-test for Count Data — g.test","text":"g.test() performs chi-squared contingency table tests goodness--fit tests, just like chisq.test() reliable (1). G-test can used see whether number observations category fits theoretical expectation (called G-test goodness--fit), see whether proportions one variable different different values variable (called G-test independence).","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G-test for Count Data — g.test","text":"","code":"g.test(x, y = NULL, p = rep(1/length(x), length(x)), rescale.p = FALSE)"},{"path":"https://amr-for-r.org/reference/g.test.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"G-test for Count Data — g.test","text":"code function identical chisq.test(), except : calculation statistic changed \\(2 * sum(x * log(x / E))\\) Yates' continuity correction removed apply G-test possibility simulate p values simulate.p.value removed","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"G-test for Count Data — g.test","text":"x numeric vector matrix. x y can also     factors. y numeric vector; ignored x matrix.      x factor, y factor length. p vector probabilities length x.     error given entry p negative. rescale.p logical scalar; TRUE p rescaled     (necessary) sum 1.  rescale.p FALSE,     p sum 1, error given.","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"G-test for Count Data — g.test","text":"list class \"htest\" containing following   components: statistic value chi-squared test statistic. parameter degrees freedom approximate     chi-squared distribution test statistic, NA     p-value computed Monte Carlo simulation. p.value p-value test. method character string indicating type test     performed, whether Monte Carlo simulation continuity     correction used. data.name character string giving name(s) data. observed observed counts. expected expected counts null hypothesis. residuals Pearson residuals,     (observed - expected) / sqrt(expected). stdres standardized residuals,     (observed - expected) / sqrt(V), V     residual cell variance (Agresti, 2007, section 2.4.5     case x matrix, n * p * (1 - p) otherwise).","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"G-test for Count Data — g.test","text":"x matrix one row column, x vector y given, goodness--fit test performed (x treated one-dimensional contingency table). entries x must non-negative integers. case, hypothesis tested whether population probabilities equal p, equal p given. x matrix least two rows columns, taken two-dimensional contingency table: entries x must non-negative integers.  Otherwise, x y must vectors factors length; cases missing values removed, objects coerced factors, contingency table computed .  Pearson's chi-squared test performed null hypothesis joint distribution cell counts 2-dimensional contingency table product row column marginals. p-value computed asymptotic chi-squared distribution test statistic. contingency table case simulation done random sampling set contingency tables given marginals, works marginals strictly positive. Note usual sampling situation assumed chi-squared test (G-test) rather Fisher's exact test. goodness--fit case simulation done random sampling discrete distribution specified p, sample size n = sum(x). simulation done R may slow.","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"g-test-of-goodness-of-fit-likelihood-ratio-test-","dir":"Reference","previous_headings":"","what":"G-test Of Goodness-of-Fit (Likelihood Ratio Test)","title":"G-test for Count Data — g.test","text":"Use G-test goodness--fit one nominal variable two values (male female, red, pink white flowers). compare observed counts numbers observations category expected counts, calculate using kind theoretical expectation (1:1 sex ratio 1:2:1 ratio genetic cross). expected number observations category small, G-test may give inaccurate results, use exact test instead (fisher.test()). G-test goodness--fit alternative chi-square test goodness--fit (chisq.test()); tests advantages disadvantages, results two tests usually similar.","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"g-test-of-independence","dir":"Reference","previous_headings":"","what":"G-test of Independence","title":"G-test for Count Data — g.test","text":"Use G-test independence two nominal variables, two possible values. want know whether proportions one variable different among values variable. also possible G-test independence two nominal variables. example, Jackson et al. (2013) also data children 3, analysis old vs. young, thigh vs. arm, reaction vs. reaction, analyzed together. Fisher's exact test (fisher.test()) exact test, G-test still approximation. 2x2 table, Fisher's Exact test may slower still run seconds, even sum observations multiple millions. G-test independence alternative chi-square test independence (chisq.test()), give approximately results.","code":""},{"path":"https://amr-for-r.org/reference/g.test.html","id":"how-the-test-works","dir":"Reference","previous_headings":"","what":"How the Test Works","title":"G-test for Count Data — g.test","text":"Unlike exact test goodness--fit (fisher.test()), G-test directly calculate probability obtaining observed results something extreme. Instead, like almost statistical tests, G-test intermediate step; uses data calculate test statistic measures far observed data null expectation. use mathematical relationship, case chi-square distribution, estimate probability obtaining value test statistic. G-test uses log ratio two likelihoods test statistic, also called likelihood ratio test log-likelihood ratio test. formula calculate G-statistic : \\(G = 2 * sum(x * log(x / E))\\) E expected values. Since chi-square distributed, p value can calculated R :   df degrees freedom. two categories want find ones significantly different null expectation, can use method testing category vs. sum categories, Bonferroni correction. use G-tests category, course.","code":"p <- stats::pchisq(G, df, lower.tail = FALSE)"},{"path":"https://amr-for-r.org/reference/g.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"G-test for Count Data — g.test","text":"McDonald, J.H. 2014. Handbook Biological Statistics (3rd ed.). Sparky House Publishing, Baltimore, Maryland.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/g.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"G-test for Count Data — g.test","text":"","code":"# = EXAMPLE 1 = # Shivrain et al. (2006) crossed clearfield rice (which are resistant # to the herbicide imazethapyr) with red rice (which are susceptible to # imazethapyr). They then crossed the hybrid offspring and examined the # F2 generation, where they found 772 resistant plants, 1611 moderately # resistant plants, and 737 susceptible plants. If resistance is controlled # by a single gene with two co-dominant alleles, you would expect a 1:2:1 # ratio.  x <- c(772, 1611, 737) g.test(x, p = c(1, 2, 1) / 4) #>  #> \tG-test of goodness-of-fit (likelihood ratio test) #>  #> data:  x #> X-squared = 4.1471, p-value = 0.1257 #>   # There is no significant difference from a 1:2:1 ratio. # Meaning: resistance controlled by a single gene with two co-dominant # alleles, is plausible.   # = EXAMPLE 2 = # Red crossbills (Loxia curvirostra) have the tip of the upper bill either # right or left of the lower bill, which helps them extract seeds from pine # cones. Some have hypothesized that frequency-dependent selection would # keep the number of right and left-billed birds at a 1:1 ratio. Groth (1992) # observed 1752 right-billed and 1895 left-billed crossbills.  x <- c(1752, 1895) g.test(x) #>  #> \tG-test of goodness-of-fit (likelihood ratio test) #>  #> data:  x #> X-squared = 5.6085, p-value = 0.01787 #>   # There is a significant difference from a 1:1 ratio. # Meaning: there are significantly more left-billed birds."},{"path":"https://amr-for-r.org/reference/get_episode.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Clinical or Epidemic Episodes — get_episode","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"functions determine items vector can considered (start ) new episode. can used determine clinical episodes epidemiological analysis. get_episode() function returns index number episode per group, is_new_episode() function returns TRUE every new get_episode() index. absolute relative episode determination supported.","code":""},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"","code":"get_episode(x, episode_days = NULL, case_free_days = NULL, ...)  is_new_episode(x, episode_days = NULL, case_free_days = NULL, ...)"},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"x Vector dates (class Date POSIXt), sorted internally determine episodes. episode_days Episode length days specify time period new episode begins, can also less day Inf, see Details. case_free_days (inter-epidemic) interval length days new episode start, can also less day Inf, see Details. ... Ignored, place allow future extensions.","code":""},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"get_episode(): integer vector is_new_episode(): logical vector","code":""},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"Episodes can determined two ways: absolute relative. Absolute method uses episode_days define episode length days, new episode start. common use case AMR data analysis microbial epidemiology: episodes S. aureus bacteraemia ICU patients example. episode length 30 days, new S. aureus isolates ICU episode 30 days considered different (new) episode. Thus, method counts since start previous episode. Relative method uses case_free_days quantify duration case-free days (inter-epidemic interval), new episode start. common use case infectious disease epidemiology: episodes norovirus outbreaks hospital example. case-free period 14 days, new norovirus cases time considered different (new) episode. Thus, methods counts since last case previous episode. table: ** marks start new episode, 8 January 2023 7 days since start previous episode (1 January 2023).  *** marks start new episode, 21 January 2023 7 days since last case previous episode (8 January 2023). Either episode_days case_free_days must provided function.","code":""},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"difference-between-get-episode-and-is-new-episode-","dir":"Reference","previous_headings":"","what":"Difference between get_episode() and is_new_episode()","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"get_episode() function returns index number episode, cases/patients/isolates first episode number 1, cases/patients/isolates second episode number 2, etc. is_new_episode() function hand, returns TRUE every new get_episode() index. specify, setting episode_days = 365 (using method 1 explained ), two functions differ:","code":""},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"other","dir":"Reference","previous_headings":"","what":"Other","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"first_isolate() function wrapper around is_new_episode() function, efficient data sets containing microorganism codes names allows different isolate selection methods. dplyr package required functions work, episode functions support variable grouping work conveniently inside dplyr verbs filter(), mutate() summarise().","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/get_episode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Clinical or Epidemic Episodes — get_episode","text":"","code":"# difference between absolute and relative determination of episodes: x <- data.frame(dates = as.Date(c(   \"2021-01-01\",   \"2021-01-02\",   \"2021-01-05\",   \"2021-01-08\",   \"2021-02-21\",   \"2021-02-22\",   \"2021-02-23\",   \"2021-02-24\",   \"2021-03-01\",   \"2021-03-01\" ))) x$absolute <- get_episode(x$dates, episode_days = 7) x$relative <- get_episode(x$dates, case_free_days = 7) x #>         dates absolute relative #> 1  2021-01-01        1        1 #> 2  2021-01-02        1        1 #> 3  2021-01-05        1        1 #> 4  2021-01-08        2        1 #> 5  2021-02-21        3        2 #> 6  2021-02-22        3        2 #> 7  2021-02-23        3        2 #> 8  2021-02-24        3        2 #> 9  2021-03-01        4        2 #> 10 2021-03-01        4        2   # `example_isolates` is a data set available in the AMR package. # See ?example_isolates df <- example_isolates[sample(seq_len(2000), size = 100), ]  get_episode(df$date, episode_days = 60) # indices #>   [1] 43  9  7 14 28 40 49 29 19 27 10 44 18 22 42 12  8 36 13  3 46  5  4 35 38 #>  [26] 16 22 23 16 10 42 13  2 45 18 19 39 32 22 36 40 45 39 40 11 23 25 39 26 23 #>  [51] 25 12 17 23 30 30 34 16 21 37 40 26 11  7  4 16 43 22 47 37 39 31 25 41  1 #>  [76] 45 39 23 32 45 20 22 15 14 13 43  9 38 29  6 48 24 21 23 44 19 31  1  3 33 is_new_episode(df$date, episode_days = 60) # TRUE/FALSE #>   [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [25]  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE #>  [37]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE #>  [49]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE #>  [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE #>  [73] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE #>  [85] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #>  [97] FALSE FALSE FALSE  TRUE  # filter on results from the third 60-day episode only, using base R df[which(get_episode(df$date, 60) == 3), ] #> # A tibble: 2 × 46 #>   date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>   <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #> 1 2002-11-04 304347     62 M      Clinical B_STRPT_PNMN   S     NA    NA    S   #> 2 2002-10-18 E55128     57 F      ICU      B_STPHY_AURS   R     NA    S     R   #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, RIF <sir>  # the functions also work for less than a day, e.g. to include one per hour: get_episode(   c(     Sys.time(),     Sys.time() + 60 * 60   ),   episode_days = 1 / 24 ) #> [1] 1 2  # \\donttest{ if (require(\"dplyr\")) {   # is_new_episode() can also be used in dplyr verbs to determine patient   # episodes based on any (combination of) grouping variables:   df %>%     mutate(condition = sample(       x = c(\"A\", \"B\", \"C\"),       size = 100,       replace = TRUE     )) %>%     group_by(patient, condition) %>%     mutate(new_episode = is_new_episode(date, 365)) %>%     select(patient, date, condition, new_episode) %>%     arrange(patient, condition, date) } #> # A tibble: 100 × 4 #> # Groups:   patient, condition [96] #>    patient date       condition new_episode #>    <chr>   <date>     <chr>     <lgl>       #>  1 022060  2004-05-04 A         TRUE        #>  2 060287  2007-03-11 A         TRUE        #>  3 0E2483  2007-04-06 C         TRUE        #>  4 101305  2006-12-13 A         TRUE        #>  5 141061  2014-10-22 A         TRUE        #>  6 146F70  2009-08-14 A         TRUE        #>  7 15D386  2004-08-01 B         TRUE        #>  8 187841  2008-04-22 C         TRUE        #>  9 195736  2008-08-29 C         TRUE        #> 10 195736  2008-08-29 C         FALSE       #> # ℹ 90 more rows  if (require(\"dplyr\")) {   df %>%     group_by(ward, patient) %>%     transmute(date,       patient,       new_index = get_episode(date, 60),       new_logical = is_new_episode(date, 60)     ) %>%     arrange(patient, ward, date) } #> # A tibble: 100 × 5 #> # Groups:   ward, patient [91] #>    ward     date       patient new_index new_logical #>    <chr>    <date>     <chr>       <int> <lgl>       #>  1 ICU      2004-05-04 022060          1 TRUE        #>  2 Clinical 2007-03-11 060287          1 TRUE        #>  3 Clinical 2007-04-06 0E2483          1 TRUE        #>  4 Clinical 2006-12-13 101305          1 TRUE        #>  5 Clinical 2014-10-22 141061          1 TRUE        #>  6 Clinical 2009-08-14 146F70          1 TRUE        #>  7 ICU      2004-08-01 15D386          1 TRUE        #>  8 Clinical 2008-04-22 187841          1 TRUE        #>  9 Clinical 2008-08-29 195736          1 TRUE        #> 10 Clinical 2008-08-29 195736          1 FALSE       #> # ℹ 90 more rows  if (require(\"dplyr\")) {   df %>%     group_by(ward) %>%     summarise(       n_patients = n_distinct(patient),       n_episodes_365 = sum(is_new_episode(date, episode_days = 365)),       n_episodes_60 = sum(is_new_episode(date, episode_days = 60)),       n_episodes_30 = sum(is_new_episode(date, episode_days = 30))     ) } #> # A tibble: 3 × 5 #>   ward       n_patients n_episodes_365 n_episodes_60 n_episodes_30 #>   <chr>           <int>          <int>         <int>         <int> #> 1 Clinical           58             14            38            44 #> 2 ICU                26              7            20            23 #> 3 Outpatient          7              4             6             7  # grouping on patients and microorganisms leads to the same # results as first_isolate() when using 'episode-based': if (require(\"dplyr\")) {   x <- df %>%     filter_first_isolate(       include_unknown = TRUE,       method = \"episode-based\"     )    y <- df %>%     group_by(patient, mo) %>%     filter(is_new_episode(date, 365)) %>%     ungroup()    identical(x, y) } #> [1] FALSE  # but is_new_episode() has a lot more flexibility than first_isolate(), # since you can now group on anything that seems relevant: if (require(\"dplyr\")) {   df %>%     group_by(patient, mo, ward) %>%     mutate(flag_episode = is_new_episode(date, 365)) %>%     select(group_vars(.), flag_episode) } #> # A tibble: 100 × 4 #> # Groups:   patient, mo, ward [96] #>    patient mo            ward     flag_episode #>    <chr>   <mo>          <chr>    <lgl>        #>  1 917895  B_STPHY_CPTS  ICU      TRUE         #>  2 022060  B_ENTRBC_CLOC ICU      TRUE         #>  3 C36883  B_ESCHR_COLI  Clinical TRUE         #>  4 5DF436  B_STPHY_AURS  ICU      TRUE         #>  5 971739  B_STPHY_CONS  Clinical TRUE         #>  6 488175  B_ESCHR_COLI  Clinical TRUE         #>  7 5DB1C8  B_STPHY_CPTS  Clinical TRUE         #>  8 BC9909  B_ENTRBC_CLOC Clinical TRUE         #>  9 5B78D5  B_STPHY_AURS  Clinical TRUE         #> 10 284FFF  B_STPHY_EPDR  Clinical TRUE         #> # ℹ 90 more rows # }"},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA Biplot with ggplot2 — ggplot_pca","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"Produces ggplot2 variant -called biplot PCA (principal component analysis), flexible appealing base R biplot() function.","code":""},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"","code":"ggplot_pca(x, choices = 1:2, scale = 1, pc.biplot = TRUE,   labels = NULL, labels_textsize = 3, labels_text_placement = 1.5,   groups = NULL, ellipse = TRUE, ellipse_prob = 0.68,   ellipse_size = 0.5, ellipse_alpha = 0.5, points_size = 2,   points_alpha = 0.25, arrows = TRUE, arrows_colour = \"darkblue\",   arrows_size = 0.5, arrows_textsize = 3, arrows_textangled = TRUE,   arrows_alpha = 0.75, base_textsize = 10, ...)"},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"ggplot_pca() function based ggbiplot() function ggbiplot package Vince Vu, found GitHub: https://github.com/vqv/ggbiplot (retrieved: 2 March 2020, latest commit: 7325e88; 12 February 2015). per GPL-2 licence demands documentation code changes, changes made based source code : Rewritten code remove dependency packages plyr, scales grid Parametrised options, like arrow ellipse settings Hardened input possibilities defining exact type user input every argument Added total amount explained variance caption plot Cleaned syntax based lintr package, fixed grammatical errors added integrity checks Updated documentation","code":""},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"x object returned pca(), prcomp() princomp(). choices length 2 vector specifying components plot. default     biplot strict sense. scale variables scaled lambda ^ scale     observations scaled lambda ^ (1-scale)     lambda singular values computed     princomp. Normally 0 <= scale <= 1, warning     issued specified scale outside range. pc.biplot true, use Gabriel (1971) refers \"principal component     biplot\", lambda = 1 observations scaled sqrt(n)     variables scaled sqrt(n).  inner products     variables approximate covariances distances observations     approximate Mahalanobis distance. labels optional vector labels observations. set, labels placed respective points. using pca() function input x, determined automatically based attribute non_numeric_cols, see pca(). labels_textsize size text used labels. labels_text_placement Adjustment factor placement variable names (>=1 means away arrow head). groups optional vector groups labels, length labels. set, points labels coloured according groups. using pca() function input x, determined automatically based attribute non_numeric_cols, see pca(). ellipse logical indicate whether normal data ellipse drawn group (set groups). ellipse_prob Statistical size ellipse normal probability. ellipse_size size ellipse line. ellipse_alpha alpha (transparency) ellipse line. points_size size points. points_alpha alpha (transparency) points. arrows logical indicate whether arrows drawn. arrows_colour colour arrow text. arrows_size size (thickness) arrow lines. arrows_textsize size text end arrows. arrows_textangled logical whether text end arrows angled. arrows_alpha alpha (transparency) arrows text. base_textsize text size plot elements except labels arrows. ... Arguments passed functions.","code":""},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"colours labels points can changed adding another scale layer colour, scale_colour_viridis_d() scale_colour_brewer().","code":""},{"path":"https://amr-for-r.org/reference/ggplot_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA Biplot with ggplot2 — ggplot_pca","text":"","code":"# `example_isolates` is a data set available in the AMR package. # See ?example_isolates.  # \\donttest{ if (require(\"dplyr\")) {   # calculate the resistance per group first   resistance_data <- example_isolates %>%     group_by(       order = mo_order(mo), # group on anything, like order       genus = mo_genus(mo)     ) %>% #   and genus as we do here;     filter(n() >= 30) %>% # filter on only 30 results per group     summarise_if(is.sir, resistance) # then get resistance of all drugs    # now conduct PCA for certain antimicrobial drugs   pca_result <- resistance_data %>%     pca(AMC, CXM, CTX, CAZ, GEN, TOB, TMP, SXT)    summary(pca_result)    # old base R plotting method:   biplot(pca_result, main = \"Base R biplot\")    # new ggplot2 plotting method using this package:   if (require(\"ggplot2\")) {     ggplot_pca(pca_result) +       labs(title = \"ggplot2 biplot\")   }   if (require(\"ggplot2\")) {     # still extendible with any ggplot2 function     ggplot_pca(pca_result) +       scale_colour_viridis_d() +       labs(title = \"ggplot2 biplot\")   } } #> Warning: There were 73 warnings in `summarise()`. #> The first warning was: #> ℹ In argument: `PEN = (function (..., minimum = 30, as_percent = FALSE, #>   only_all_tested = FALSE) ...`. #> ℹ In group 5: `order = \"Lactobacillales\"` `genus = \"Enterococcus\"`. #> Caused by warning: #> ! Introducing NA: only 14 results available for PEN in group: order = #> \"Lactobacillales\", genus = \"Enterococcus\" (minimum = 30). #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 72 remaining warnings. #> ℹ Columns selected for PCA: \"AMC\", \"CAZ\", \"CTX\", \"CXM\", \"GEN\", \"SXT\", #>   \"TMP\", and \"TOB\". Total observations available: 7. #> Groups (n=4, named as 'order'): #> [1] \"Caryophanales\"    \"Enterobacterales\" \"Lactobacillales\"  \"Pseudomonadales\"  #>    # }"},{"path":"https://amr-for-r.org/reference/ggplot_sir.html","id":null,"dir":"Reference","previous_headings":"","what":"AMR Plots with ggplot2 — ggplot_sir","title":"AMR Plots with ggplot2 — ggplot_sir","text":"Use functions create bar plots AMR data analysis. functions rely ggplot2 functions.","code":""},{"path":"https://amr-for-r.org/reference/ggplot_sir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AMR Plots with ggplot2 — ggplot_sir","text":"","code":"ggplot_sir(data, position = NULL, x = \"antibiotic\",   fill = \"interpretation\", facet = NULL, breaks = seq(0, 1, 0.1),   limits = NULL, translate_ab = \"name\", combine_SI = TRUE,   minimum = 30, language = get_AMR_locale(), nrow = NULL, colours = c(S   = \"#3CAEA3\", SI = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", IR = \"#ED553B\",   R = \"#ED553B\"), datalabels = TRUE, datalabels.size = 2.5,   datalabels.colour = \"grey15\", title = NULL, subtitle = NULL,   caption = NULL, x.title = \"Antimicrobial\", y.title = \"Proportion\", ...)  geom_sir(position = NULL, x = c(\"antibiotic\", \"interpretation\"),   fill = \"interpretation\", translate_ab = \"name\", minimum = 30,   language = get_AMR_locale(), combine_SI = TRUE, ...)"},{"path":"https://amr-for-r.org/reference/ggplot_sir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AMR Plots with ggplot2 — ggplot_sir","text":"data data.frame column(s) class sir (see .sir()). position Position adjustment bars, either \"fill\", \"stack\" \"dodge\". x Variable show x axis, either \"antibiotic\" (default) \"interpretation\" grouping variable. fill Variable categorise using plots legend, either \"antibiotic\" (default) \"interpretation\" grouping variable. facet Variable split plots , either \"interpretation\" (default) \"antibiotic\" grouping variable. breaks numeric vector positions. limits numeric vector length two providing limits scale, use NA refer existing minimum maximum. translate_ab column name antimicrobials data set translate antibiotic abbreviations , using ab_property(). combine_SI logical indicate whether values S, SDD, must merged one, output consists S+SDD+vs. R (susceptible vs. resistant) - default TRUE. minimum minimum allowed number available (tested) isolates. isolate count lower minimum return NA warning. default number 30 isolates advised Clinical Laboratory Standards Institute (CLSI) best practice, see Source. language Language returned text - default current system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. nrow (using facet) number rows. colours named vactor colour used filling. default colours colour-blind friendly. datalabels Show datalabels using labels_sir_count(). datalabels.size Size datalabels. datalabels.colour Colour datalabels. title Text show title plot. subtitle Text show subtitle plot. caption Text show caption plot. x.title Text show x axis description. y.title Text show y axis description. ... arguments passed geom_sir() , case scale_sir_colours(), named values set colours. default colours colour-blind friendly, maintaining convention e.g. 'susceptible' green 'resistant' red. See Examples.","code":""},{"path":"https://amr-for-r.org/reference/ggplot_sir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AMR Plots with ggplot2 — ggplot_sir","text":"default, names antimicrobials shown plots using ab_name(). can set translate_ab argument. See count_df(). geom_sir() take variable data sir class (created .sir()) using sir_df() plot bars percentage S, , R. default behaviour bars stacked different antimicrobials x axis. Additional functions include: facet_sir() creates 2d plots (default based S//R) using ggplot2::facet_wrap(). scale_y_percent() transforms y axis 0 100% range using ggplot2::scale_y_continuous(). scale_sir_colours() sets colours bars (green S, yellow , red R). multilingual support. default colours colour-blind friendly, maintaining convention e.g. 'susceptible' green 'resistant' red. theme_sir() ggplot2 theme minimal distraction. labels_sir_count() print datalabels bars percentage amount isolates using ggplot2::geom_text(). ggplot_sir() wrapper around functions uses data first input. makes possible use function pipe (%>%). See Examples.","code":""},{"path":"https://amr-for-r.org/reference/ggplot_sir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AMR Plots with ggplot2 — ggplot_sir","text":"","code":"# \\donttest{ if (require(\"ggplot2\") && require(\"dplyr\")) {   # get antimicrobial results for drugs against a UTI:   ggplot(example_isolates %>% select(AMX, NIT, FOS, TMP, CIP)) +     geom_sir() }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # prettify the plot using some additional functions:   df <- example_isolates %>% select(AMX, NIT, FOS, TMP, CIP)   ggplot(df) +     geom_sir() +     scale_y_percent() +     scale_sir_colours(aesthetics = \"fill\") +     labels_sir_count() +     theme_sir() }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # or better yet, simplify this using the wrapper function - a single command:   example_isolates %>%     select(AMX, NIT, FOS, TMP, CIP) %>%     ggplot_sir() }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # get only proportions and no counts:   example_isolates %>%     select(AMX, NIT, FOS, TMP, CIP) %>%     ggplot_sir(datalabels = FALSE) }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # add other ggplot2 arguments as you like:   example_isolates %>%     select(AMX, NIT, FOS, TMP, CIP) %>%     ggplot_sir(       width = 0.5,       colour = \"black\",       size = 1,       linetype = 2,       alpha = 0.25     ) }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # you can alter the colours with colour names:   example_isolates %>%     select(AMX) %>%     ggplot_sir(colours = c(SI = \"yellow\")) }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # but you can also use the built-in colour-blind friendly colours for   # your plots, where \"S\" is green, \"I\" is yellow and \"R\" is red:   data.frame(     x = c(\"Value1\", \"Value2\", \"Value3\"),     y = c(1, 2, 3),     z = c(\"Value4\", \"Value5\", \"Value6\")   ) %>%     ggplot() +     geom_col(aes(x = x, y = y, fill = z)) +     scale_sir_colours(       aesthetics = \"fill\",       Value4 = \"S\", Value5 = \"I\", Value6 = \"R\"     ) }  if (require(\"ggplot2\") && require(\"dplyr\")) {   # resistance of ciprofloxacine per age group   example_isolates %>%     mutate(first_isolate = first_isolate()) %>%     filter(       first_isolate == TRUE,       mo == as.mo(\"Escherichia coli\")     ) %>%     # age_groups() is also a function in this AMR package:     group_by(age_group = age_groups(age)) %>%     select(age_group, CIP) %>%     ggplot_sir(x = \"age_group\") } #> Warning: Removed 6 rows containing missing values or values outside the scale range #> (`geom_col()`). #> Warning: Removed 6 rows containing missing values or values outside the scale range #> (`geom_text()`).  if (require(\"ggplot2\") && require(\"dplyr\")) {   # a shorter version which also adjusts data label colours:   example_isolates %>%     select(AMX, NIT, FOS, TMP, CIP) %>%     ggplot_sir(colours = FALSE) } #> Error in ggplot2::geom_col(data = function(x) {    sir_df(data = x, translate_ab = translate_ab, language = language,         minimum = minimum, combine_SI = combine_SI)}, mapping = utils::modifyList(ggplot2::aes(), list(x = str2lang(x),     y = str2lang(y), fill = str2lang(fill))), position = position,     ...): Problem while converting geom to grob. #> ℹ Error occurred in the 1st layer. #> Caused by error: #> ! Unknown colour name: FALSE if (require(\"ggplot2\") && require(\"dplyr\")) {   # it also supports groups (don't forget to use the group var on `x` or `facet`):   example_isolates %>%     filter(mo_is_gram_negative(), ward != \"Outpatient\") %>%     # select only UTI-specific drugs     select(ward, AMX, NIT, FOS, TMP, CIP) %>%     group_by(ward) %>%     ggplot_sir(       x = \"ward\",       facet = \"antibiotic\",       nrow = 1,       title = \"AMR of Anti-UTI Drugs Per Ward\",       x.title = \"Ward\",       datalabels = FALSE     ) } #> ℹ Using column 'mo' as input for mo_is_gram_negative()  # }"},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess Antibiotic Column — guess_ab_col","title":"Guess Antibiotic Column — guess_ab_col","text":"tries find column name data set based information antimicrobials data set. Also supports WHONET abbreviations.","code":""},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess Antibiotic Column — guess_ab_col","text":"","code":"guess_ab_col(x = NULL, search_string = NULL, verbose = FALSE,   only_sir_columns = FALSE)"},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess Antibiotic Column — guess_ab_col","text":"x data.frame. search_string text search x , checked .ab() value column x. verbose logical indicate whether additional info printed. only_sir_columns logical indicate whether antimicrobial columns must included transformed class sir beforehand. Defaults FALSE columns x class sir.","code":""},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess Antibiotic Column — guess_ab_col","text":"column name x, NULL result found.","code":""},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess Antibiotic Column — guess_ab_col","text":"can look antibiotic (trade) name abbreviation search x antimicrobials data set column containing name code antibiotic.","code":""},{"path":"https://amr-for-r.org/reference/guess_ab_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess Antibiotic Column — guess_ab_col","text":"","code":"df <- data.frame(   amox = \"S\",   tetr = \"R\" )  guess_ab_col(df, \"amoxicillin\") #> [1] \"amox\" guess_ab_col(df, \"J01AA07\") # ATC code of tetracycline #> [1] \"tetr\"  guess_ab_col(df, \"J01AA07\", verbose = TRUE) #> Auto-guessing columns suitable for analysis #> ... #>  OK. #> ℹ Using column 'amox' as input for AMX (amoxicillin). #> ℹ Using column 'tetr' as input for TCY (tetracycline). #> ℹ Using column 'tetr' as input for J01AA07 (tetracycline). #> [1] \"tetr\"  # WHONET codes df <- data.frame(   AMP_ND10 = \"R\",   AMC_ED20 = \"S\" ) guess_ab_col(df, \"ampicillin\") #> [1] \"AMP_ND10\" guess_ab_col(df, \"J01CR02\") #> [1] \"AMC_ED20\" guess_ab_col(df, \"augmentin\") #> [1] \"AMC_ED20\""},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"Data set containing 'EUCAST Expected Resistant Phenotypes' bug-drug combinations microorganisms antimicrobials data sets.","code":""},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"","code":"intrinsic_resistant"},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"tibble 271 905 observations 2 variables: mo Microorganism ID occurs microorganisms$mo. Names can retrieved using mo_name(). ab Antimicrobial ID occurs antimicrobials$ab. Names can retrieved using ab_name().","code":""},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"data set currently based 'EUCAST Expected Resistant Phenotypes' v1.2 (2023). data set internally used : not_intrinsic_resistant() (antimicrobial selector) mo_is_intrinsic_resistant()","code":""},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/intrinsic_resistant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set Denoting Bacterial Intrinsic Resistance — intrinsic_resistant","text":"","code":"intrinsic_resistant #> # A tibble: 271,905 × 2 #>    mo          ab   #>    <mo>        <ab> #>  1 B_GRAMP     ATM  #>  2 B_GRAMP     COL  #>  3 B_GRAMP     NAL  #>  4 B_GRAMP     PLB  #>  5 B_GRAMP     TEM  #>  6 B_ANAER-POS ATM  #>  7 B_ANAER-POS COL  #>  8 B_ANAER-POS NAL  #>  9 B_ANAER-POS PLB  #> 10 B_ANAER-POS TEM  #> # ℹ 271,895 more rows"},{"path":"https://amr-for-r.org/reference/italicise_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","title":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","text":"According binomial nomenclature, lowest four taxonomic levels (family, genus, species, subspecies) printed italics. function finds taxonomic names within strings makes italic.","code":""},{"path":"https://amr-for-r.org/reference/italicise_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","text":"","code":"italicise_taxonomy(string, type = c(\"markdown\", \"ansi\", \"html\"))  italicize_taxonomy(string, type = c(\"markdown\", \"ansi\", \"html\"))"},{"path":"https://amr-for-r.org/reference/italicise_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","text":"string character (vector). type Type conversion taxonomic names, either \"markdown\", \"html\" \"ansi\", see Details.","code":""},{"path":"https://amr-for-r.org/reference/italicise_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","text":"function finds taxonomic names makes italic based microorganisms data set. taxonomic names can italicised using markdown (default) adding * taxonomic names, <> <\/> using html. using 'ansi', ANSI colours added using \\033[3m \\033[23m taxonomic names. multiple ANSI colours available, conversion occur. function also supports abbreviation genus followed species, \"E. coli\" \"K. pneumoniae ozaenae\".","code":""},{"path":"https://amr-for-r.org/reference/italicise_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Italicise Taxonomic Families, Genera, Species, Subspecies — italicise_taxonomy","text":"","code":"italicise_taxonomy(\"An overview of Staphylococcus aureus isolates\") #> [1] \"An overview of *Staphylococcus aureus* isolates\" italicise_taxonomy(\"An overview of S. aureus isolates\") #> [1] \"An overview of *S. aureus* isolates\"  cat(italicise_taxonomy(\"An overview of S. aureus isolates\", type = \"ansi\")) #> An overview of S. aureus isolates"},{"path":"https://amr-for-r.org/reference/join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join microorganisms to a Data Set — join","title":"Join microorganisms to a Data Set — join","text":"Join data set microorganisms easily existing data set character vector.","code":""},{"path":"https://amr-for-r.org/reference/join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join microorganisms to a Data Set — join","text":"","code":"inner_join_microorganisms(x, by = NULL, suffix = c(\"2\", \"\"), ...)  left_join_microorganisms(x, by = NULL, suffix = c(\"2\", \"\"), ...)  right_join_microorganisms(x, by = NULL, suffix = c(\"2\", \"\"), ...)  full_join_microorganisms(x, by = NULL, suffix = c(\"2\", \"\"), ...)  semi_join_microorganisms(x, by = NULL, ...)  anti_join_microorganisms(x, by = NULL, ...)"},{"path":"https://amr-for-r.org/reference/join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join microorganisms to a Data Set — join","text":"x Existing data set join, character vector. case character vector, resulting data.frame contain column 'x' values. variable join - left empty search column class mo (created .mo()) \"mo\" column name exists x, otherwise column name x values exist microorganisms$mo (= \"bacteria_id\"), another column microorganisms (named, like = c(\"bacteria_id\" = \"fullname\")). suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... Ignored, place allow future extensions.","code":""},{"path":"https://amr-for-r.org/reference/join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join microorganisms to a Data Set — join","text":"data.frame","code":""},{"path":"https://amr-for-r.org/reference/join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join microorganisms to a Data Set — join","text":"Note: opposed join() functions dplyr, character vectors supported default existing columns get suffix \"2\" newly joined columns get suffix. dplyr package installed, join functions used. Otherwise, much slower merge() interaction() functions base R used.","code":""},{"path":"https://amr-for-r.org/reference/join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join microorganisms to a Data Set — join","text":"","code":"left_join_microorganisms(as.mo(\"K. pneumoniae\")) #> # A tibble: 1 × 26 #>   mo           fullname   status kingdom phylum class order family genus species #>   <mo>         <chr>      <chr>  <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>   #> 1 B_KLBSL_PNMN Klebsiell… accep… Bacter… Pseud… Gamm… Ente… Enter… Kleb… pneumo… #> # ℹ 16 more variables: subspecies <chr>, rank <chr>, ref <chr>, #> #   oxygen_tolerance <chr>, source <chr>, lpsn <chr>, lpsn_parent <chr>, #> #   lpsn_renamed_to <chr>, mycobank <chr>, mycobank_parent <chr>, #> #   mycobank_renamed_to <chr>, gbif <chr>, gbif_parent <chr>, #> #   gbif_renamed_to <chr>, prevalence <dbl>, snomed <list> left_join_microorganisms(\"B_KLBSL_PNMN\") #> # A tibble: 1 × 26 #>   mo           fullname   status kingdom phylum class order family genus species #>   <mo>         <chr>      <chr>  <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>   #> 1 B_KLBSL_PNMN Klebsiell… accep… Bacter… Pseud… Gamm… Ente… Enter… Kleb… pneumo… #> # ℹ 16 more variables: subspecies <chr>, rank <chr>, ref <chr>, #> #   oxygen_tolerance <chr>, source <chr>, lpsn <chr>, lpsn_parent <chr>, #> #   lpsn_renamed_to <chr>, mycobank <chr>, mycobank_parent <chr>, #> #   mycobank_renamed_to <chr>, gbif <chr>, gbif_parent <chr>, #> #   gbif_renamed_to <chr>, prevalence <dbl>, snomed <list>  df <- data.frame(   date = seq(     from = as.Date(\"2018-01-01\"),     to = as.Date(\"2018-01-07\"),     by = 1   ),   bacteria = as.mo(c(     \"S. aureus\", \"MRSA\", \"MSSA\", \"STAAUR\",     \"E. coli\", \"E. coli\", \"E. coli\"   )),   stringsAsFactors = FALSE ) colnames(df) #> [1] \"date\"     \"bacteria\"  df_joined <- left_join_microorganisms(df, \"bacteria\") colnames(df_joined) #>  [1] \"date\"                \"bacteria\"            \"fullname\"            #>  [4] \"status\"              \"kingdom\"             \"phylum\"              #>  [7] \"class\"               \"order\"               \"family\"              #> [10] \"genus\"               \"species\"             \"subspecies\"          #> [13] \"rank\"                \"ref\"                 \"oxygen_tolerance\"    #> [16] \"source\"              \"lpsn\"                \"lpsn_parent\"         #> [19] \"lpsn_renamed_to\"     \"mycobank\"            \"mycobank_parent\"     #> [22] \"mycobank_renamed_to\" \"gbif\"                \"gbif_parent\"         #> [25] \"gbif_renamed_to\"     \"prevalence\"          \"snomed\"               # \\donttest{ if (require(\"dplyr\")) {   example_isolates %>%     left_join_microorganisms() %>%     colnames() } #> Joining, by = \"mo\" #>  [1] \"date\"                \"patient\"             \"age\"                 #>  [4] \"gender\"              \"ward\"                \"mo\"                  #>  [7] \"PEN\"                 \"OXA\"                 \"FLC\"                 #> [10] \"AMX\"                 \"AMC\"                 \"AMP\"                 #> [13] \"TZP\"                 \"CZO\"                 \"FEP\"                 #> [16] \"CXM\"                 \"FOX\"                 \"CTX\"                 #> [19] \"CAZ\"                 \"CRO\"                 \"GEN\"                 #> [22] \"TOB\"                 \"AMK\"                 \"KAN\"                 #> [25] \"TMP\"                 \"SXT\"                 \"NIT\"                 #> [28] \"FOS\"                 \"LNZ\"                 \"CIP\"                 #> [31] \"MFX\"                 \"VAN\"                 \"TEC\"                 #> [34] \"TCY\"                 \"TGC\"                 \"DOX\"                 #> [37] \"ERY\"                 \"CLI\"                 \"AZM\"                 #> [40] \"IPM\"                 \"MEM\"                 \"MTR\"                 #> [43] \"CHL\"                 \"COL\"                 \"MUP\"                 #> [46] \"RIF\"                 \"fullname\"            \"status\"              #> [49] \"kingdom\"             \"phylum\"              \"class\"               #> [52] \"order\"               \"family\"              \"genus\"               #> [55] \"species\"             \"subspecies\"          \"rank\"                #> [58] \"ref\"                 \"oxygen_tolerance\"    \"source\"              #> [61] \"lpsn\"                \"lpsn_parent\"         \"lpsn_renamed_to\"     #> [64] \"mycobank\"            \"mycobank_parent\"     \"mycobank_renamed_to\" #> [67] \"gbif\"                \"gbif_parent\"         \"gbif_renamed_to\"     #> [70] \"prevalence\"          \"snomed\"              # }"},{"path":"https://amr-for-r.org/reference/key_antimicrobials.html","id":null,"dir":"Reference","previous_headings":"","what":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","title":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","text":"functions can used determine first weighted isolates considering phenotype isolate selection (see first_isolate()). Using phenotype-based method determine first isolates reliable methods disregard phenotypes.","code":""},{"path":"https://amr-for-r.org/reference/key_antimicrobials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","text":"","code":"key_antimicrobials(x = NULL, col_mo = NULL, universal = c(\"ampicillin\",   \"amoxicillin/clavulanic acid\", \"cefuroxime\", \"piperacillin/tazobactam\",   \"ciprofloxacin\", \"trimethoprim/sulfamethoxazole\"),   gram_negative = c(\"gentamicin\", \"tobramycin\", \"colistin\", \"cefotaxime\",   \"ceftazidime\", \"meropenem\"), gram_positive = c(\"vancomycin\", \"teicoplanin\",   \"tetracycline\", \"erythromycin\", \"oxacillin\", \"rifampin\"),   antifungal = c(\"anidulafungin\", \"caspofungin\", \"fluconazole\", \"miconazole\",   \"nystatin\", \"voriconazole\"), only_sir_columns = any(is.sir(x)), ...)  all_antimicrobials(x = NULL, only_sir_columns = any(is.sir(x)), ...)  antimicrobials_equal(y, z, type = c(\"points\", \"keyantimicrobials\"),   ignore_I = TRUE, points_threshold = 2, ...)"},{"path":"https://amr-for-r.org/reference/key_antimicrobials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","text":"x data.frame antimicrobials columns, like AMX amox. Can left blank determine automatically. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). universal Names broad-spectrum antimicrobial drugs, case-insensitive. Set NULL ignore. See Details default antimicrobial drugs. gram_negative Names antibiotic drugs Gram-positives, case-insensitive. Set NULL ignore. See Details default antibiotic drugs. gram_positive Names antibiotic drugs Gram-negatives, case-insensitive. Set NULL ignore. See Details default antibiotic drugs. antifungal Names antifungal drugs fungi, case-insensitive. Set NULL ignore. See Details default antifungal drugs. only_sir_columns logical indicate whether antimicrobial columns must included transformed class sir beforehand. Defaults FALSE columns x class sir. ... Ignored, place allow future extensions. y, z character vectors compare. type Type determine weighed isolates; can \"keyantimicrobials\" \"points\", see Details. ignore_I logical indicate whether antibiotic interpretations \"\" ignored type = \"keyantimicrobials\", see Details. points_threshold Minimum number points require differences antibiogram lead inclusion isolate type = \"points\", see Details.","code":""},{"path":"https://amr-for-r.org/reference/key_antimicrobials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","text":"key_antimicrobials() all_antimicrobials() functions context-aware. means x argument can left blank used inside data.frame call, see Examples. function key_antimicrobials() returns character vector 12 antimicrobial results every isolate. function all_antimicrobials() returns character vector antimicrobial drug results every isolate. vectors can compared using antimicrobials_equal(), check two isolates generally antibiogram. Missing invalid values replaced dot (\".\") key_antimicrobials() ignored antimicrobials_equal(). Please see first_isolate() function important functions enable 'phenotype-based' method determination first isolates. default antimicrobial drugs used rows (set universal) : Ampicillin Amoxicillin/clavulanic acid Cefuroxime Ciprofloxacin Piperacillin/tazobactam Trimethoprim/sulfamethoxazole default antimicrobial drugs used Gram-negative bacteria (set gram_negative) : Cefotaxime Ceftazidime Colistin Gentamicin Meropenem Tobramycin default antimicrobial drugs used Gram-positive bacteria (set gram_positive) : Erythromycin Oxacillin Rifampin Teicoplanin Tetracycline Vancomycin default antimicrobial drugs used fungi (set antifungal) : Anidulafungin Caspofungin Fluconazole Miconazole Nystatin Voriconazole","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/key_antimicrobials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Key) Antimicrobials for First Weighted Isolates — key_antimicrobials","text":"","code":"# `example_isolates` is a data set available in the AMR package. # See ?example_isolates.  # output of the `key_antimicrobials()` function could be like this: strainA <- \"SSSRR.S.R..S\" strainB <- \"SSSIRSSSRSSS\"  # those strings can be compared with: antimicrobials_equal(strainA, strainB, type = \"keyantimicrobials\") #> [1] TRUE # TRUE, because I is ignored (as well as missing values)  antimicrobials_equal(strainA, strainB, type = \"keyantimicrobials\", ignore_I = FALSE) #> [1] FALSE # FALSE, because I is not ignored and so the 4th [character] differs  # \\donttest{ if (require(\"dplyr\")) {   # set key antimicrobials to a new variable   my_patients <- example_isolates %>%     mutate(keyab = key_antimicrobials(antifungal = NULL)) %>% # no need to define `x`     mutate(       # now calculate first isolates       first_regular = first_isolate(col_keyantimicrobials = FALSE),       # and first WEIGHTED isolates       first_weighted = first_isolate(col_keyantimicrobials = \"keyab\")     )    # Check the difference in this data set, 'weighted' results in more isolates:   sum(my_patients$first_regular, na.rm = TRUE)   sum(my_patients$first_weighted, na.rm = TRUE) } #> [1] 1383 # }"},{"path":"https://amr-for-r.org/reference/kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Kurtosis of the Sample — kurtosis","title":"Kurtosis of the Sample — kurtosis","text":"Kurtosis measure \"tailedness\" probability distribution real-valued random variable. normal distribution kurtosis 3 excess kurtosis 0.","code":""},{"path":"https://amr-for-r.org/reference/kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kurtosis of the Sample — kurtosis","text":"","code":"kurtosis(x, na.rm = FALSE, excess = FALSE)  # Default S3 method kurtosis(x, na.rm = FALSE, excess = FALSE)  # S3 method for class 'matrix' kurtosis(x, na.rm = FALSE, excess = FALSE)  # S3 method for class 'data.frame' kurtosis(x, na.rm = FALSE, excess = FALSE)"},{"path":"https://amr-for-r.org/reference/kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kurtosis of the Sample — kurtosis","text":"x vector values, matrix data.frame. na.rm logical indicate whether NA values stripped computation proceeds. excess logical indicate whether excess kurtosis returned, defined kurtosis minus 3.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/kurtosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kurtosis of the Sample — kurtosis","text":"","code":"kurtosis(rnorm(10000)) #> [1] 3.069947 kurtosis(rnorm(10000), excess = TRUE) #> [1] -0.02599697"},{"path":"https://amr-for-r.org/reference/like.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised Pattern Matching with Keyboard Shortcut — like","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"Convenient wrapper around grepl() match pattern: x %like% pattern. always returns logical vector always case-insensitive (use x %like_case% pattern case-sensitive matching). Also, pattern can long x compare items index vectors, can length iterate cases.","code":""},{"path":"https://amr-for-r.org/reference/like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"","code":"like(x, pattern, ignore.case = TRUE)  x %like% pattern  x %unlike% pattern  x %like_case% pattern  x %unlike_case% pattern"},{"path":"https://amr-for-r.org/reference/like.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"Idea like function data.table package, although altered explained Details.","code":""},{"path":"https://amr-for-r.org/reference/like.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"x character vector matches sought, object can coerced .character() character vector. pattern character vector containing regular expressions (character string fixed = TRUE) matched given character vector. Coerced .character() character string possible. ignore.case FALSE, pattern matching case sensitive TRUE, case ignored matching.","code":""},{"path":"https://amr-for-r.org/reference/like.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"logical vector","code":""},{"path":"https://amr-for-r.org/reference/like.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"like() %like%/%unlike% functions: case-insensitive (use %like_case%/%unlike_case% case-sensitive matching) Support multiple patterns Check pattern valid regular expression sets fixed = TRUE , greatly improve speed (vectorised pattern) Always use compatibility Perl unless fixed = TRUE, greatly improve speed Using RStudio? %like%/%unlike% functions can also directly inserted code Addins menu can keyboard shortcut like Shift+Ctrl+L Shift+Cmd+L (see menu Tools > Modify Keyboard Shortcuts...). keep pressing shortcut, inserted text iterated %like% -> %unlike% -> %like_case% -> %unlike_case%.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/like.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised Pattern Matching with Keyboard Shortcut — like","text":"","code":"# data.table has a more limited version of %like%, so unload it: try(detach(\"package:data.table\", unload = TRUE), silent = TRUE) #> Warning: ‘data.table’ namespace cannot be unloaded: #>   namespace ‘data.table’ is imported by ‘prodlim’ so cannot be unloaded  a <- \"This is a test\" b <- \"TEST\" a %like% b #> [1] TRUE b %like% a #> [1] FALSE  # also supports multiple patterns a <- c(\"Test case\", \"Something different\", \"Yet another thing\") b <- c(\"case\", \"diff\", \"yet\") a %like% b #> [1] TRUE TRUE TRUE a %unlike% b #> [1] FALSE FALSE FALSE  a[1] %like% b #> [1]  TRUE FALSE FALSE a %like% b[1] #> [1]  TRUE FALSE FALSE  # \\donttest{ # get isolates whose name start with 'Entero' (case-insensitive) example_isolates[which(mo_name() %like% \"^entero\"), ] #> ℹ Using column 'mo' as input for mo_name() #> # A tibble: 106 × 46 #>    date       patient   age gender ward    mo            PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>   <mo>          <sir> <sir> <sir> <sir> #>  1 2002-02-21 4FC193     69 M      Clinic… B_ENTRC_FACM    NA    NA    NA    NA  #>  2 2002-04-08 130252     78 M      ICU     B_ENTRC_FCLS    NA    NA    NA    NA  #>  3 2002-06-23 798871     82 M      Clinic… B_ENTRC_FCLS    NA    NA    NA    NA  #>  4 2002-06-23 798871     82 M      Clinic… B_ENTRC_FCLS    NA    NA    NA    NA  #>  5 2003-04-20 6BC362     62 M      ICU     B_ENTRC         NA    NA    NA    NA  #>  6 2003-04-21 6BC362     62 M      ICU     B_ENTRC         NA    NA    NA    NA  #>  7 2003-08-13 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #>  8 2003-08-13 F35553     52 M      ICU     B_ENTRC_FCLS    NA    NA    NA    NA  #>  9 2003-09-05 F35553     52 M      ICU     B_ENTRC         NA    NA    NA    NA  #> 10 2003-09-05 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #> # ℹ 96 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  if (require(\"dplyr\")) {   example_isolates %>%     filter(mo_name() %like% \"^ent\") } #> ℹ Using column 'mo' as input for mo_name() #> # A tibble: 106 × 46 #>    date       patient   age gender ward    mo            PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>   <mo>          <sir> <sir> <sir> <sir> #>  1 2002-02-21 4FC193     69 M      Clinic… B_ENTRC_FACM    NA    NA    NA    NA  #>  2 2002-04-08 130252     78 M      ICU     B_ENTRC_FCLS    NA    NA    NA    NA  #>  3 2002-06-23 798871     82 M      Clinic… B_ENTRC_FCLS    NA    NA    NA    NA  #>  4 2002-06-23 798871     82 M      Clinic… B_ENTRC_FCLS    NA    NA    NA    NA  #>  5 2003-04-20 6BC362     62 M      ICU     B_ENTRC         NA    NA    NA    NA  #>  6 2003-04-21 6BC362     62 M      ICU     B_ENTRC         NA    NA    NA    NA  #>  7 2003-08-13 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #>  8 2003-08-13 F35553     52 M      ICU     B_ENTRC_FCLS    NA    NA    NA    NA  #>  9 2003-09-05 F35553     52 M      ICU     B_ENTRC         NA    NA    NA    NA  #> 10 2003-09-05 F35553     52 M      ICU     B_ENTRBC_CLOC   R     NA    NA    R   #> # ℹ 96 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, … # }"},{"path":"https://amr-for-r.org/reference/mdro.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"Determine isolates multidrug-resistant organisms (MDRO) according international, national, custom guidelines.","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"","code":"mdro(x = NULL, guideline = \"CMI 2012\", col_mo = NULL, esbl = NA,   carbapenemase = NA, mecA = NA, mecC = NA, vanA = NA, vanB = NA,   info = interactive(), pct_required_classes = 0.5, combine_SI = TRUE,   verbose = FALSE, only_sir_columns = any(is.sir(x)), ...)  brmo(x = NULL, only_sir_columns = any(is.sir(x)), ...)  mrgn(x = NULL, only_sir_columns = any(is.sir(x)), verbose = FALSE, ...)  mdr_tb(x = NULL, only_sir_columns = any(is.sir(x)), verbose = FALSE, ...)  mdr_cmi2012(x = NULL, only_sir_columns = any(is.sir(x)), verbose = FALSE,   ...)  eucast_exceptional_phenotypes(x = NULL, only_sir_columns = any(is.sir(x)),   verbose = FALSE, ...)"},{"path":"https://amr-for-r.org/reference/mdro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"x data.frame antimicrobials columns, like AMX amox. Can left blank automatic determination. guideline specific guideline follow, see sections Supported international / national guidelines Using Custom Guidelines . left empty, publication Magiorakos et al. (see ) followed. col_mo Column name names codes microorganisms (see .mo()) - default first column class mo. Values coerced using .mo(). esbl logical values, column name containing logical values, indicating presence ESBL gene (production proteins). carbapenemase logical values, column name containing logical values, indicating presence carbapenemase gene (production proteins). mecA logical values, column name containing logical values, indicating presence mecA gene (production proteins). mecC logical values, column name containing logical values, indicating presence mecC gene (production proteins). vanA logical values, column name containing logical values, indicating presence vanA gene (production proteins). vanB logical values, column name containing logical values, indicating presence vanB gene (production proteins). info logical indicate whether progress printed console - default print interactive sessions. pct_required_classes Minimal required percentage antimicrobial classes must available per isolate, rounded . example, default guideline, 17 antimicrobial classes must available S. aureus. Setting pct_required_classes argument 0.5 (default) means every S. aureus isolate least 8 different classes must available. lower number available classes return NA isolate. combine_SI logical indicate whether values S must merged one, resistance considered isolates R, . default behaviour mdro() function, follows redefinition EUCAST interpretation (increased exposure) 2019, see section 'Interpretation S, R' . using combine_SI = FALSE, resistance considered isolates R . verbose logical turn Verbose mode (default ). Verbose mode, function return MDRO results, instead returns data set logbook form extensive info isolates MDRO-positive, . only_sir_columns logical indicate whether antimicrobial columns must included transformed class sir beforehand. Defaults FALSE columns x class sir. ... Column names antimicrobials. automatically detect antimicrobial column names, provide named arguments; guess_ab_col() used detection. manually specify column, provide name (case-insensitive) argument, e.g. AMX = \"amoxicillin\". skip specific antimicrobial, set NULL, e.g. TIC = NULL exclude ticarcillin. manually defined column exist data, skipped warning.","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"verbose set TRUE: data.frame containing columns row_number, microorganism, MDRO, reason, all_nonsusceptible_columns, guideline CMI 2012 paper - function mdr_cmi2012() mdro(): Ordered factor levels Negative < Multi-drug-resistant (MDR) < Extensively drug-resistant (XDR) < Pandrug-resistant (PDR) TB guideline - function mdr_tb() mdro(..., guideline = \"TB\"): Ordered factor levels Negative < Mono-resistant < Poly-resistant < Multi-drug-resistant < Extensively drug-resistant German guideline - function mrgn() mdro(..., guideline = \"MRGN\"): Ordered factor levels Negative < 3MRGN < 4MRGN Everything else, except custom guidelines: Ordered factor levels Negative < Positive, unconfirmed < Positive. value \"Positive, unconfirmed\" means , according guideline, entirely sure isolate multi-drug resistant confirmed additional (e.g. genotypic) tests","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"functions context-aware. means x argument can left blank used inside data.frame call, see Examples. pct_required_classes argument, values 1 divided 100. support fractions (0.75 3/4) percentages (75). Note: Every test involves Enterobacteriaceae family, internally performed using newly named order Enterobacterales, since Enterobacteriaceae family taxonomically reclassified Adeolu et al. 2016. , Enterobacteriaceae family Enterobacteriales () order. species old Enterobacteriaceae family still new Enterobacterales (without ) order, divided multiple families. way tests performed now mdro() function makes sure results 2016 2016 identical.","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"supported-international-national-guidelines","dir":"Reference","previous_headings":"","what":"Supported International / National Guidelines","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"Please suggest implement guidelines letting us know. Currently supported guidelines (case-insensitive): guideline = \"CMI 2012\" (default) Magiorakos AP, Srinivasan et al. \"Multidrug-resistant, extensively drug-resistant pandrug-resistant bacteria: international expert proposal interim standard definitions acquired resistance.\" Clinical Microbiology Infection (2012) (doi:10.1111/j.1469-0691.2011.03570.x ) guideline = \"EUCAST 3.3\" (simply guideline = \"EUCAST\") European international guideline - EUCAST Expert Rules Version 3.3 \"Intrinsic Resistance Unusual Phenotypes\" (link) Also: guideline = \"EUCAST 3.2\" former European international guideline - EUCAST Expert Rules Version 3.2 \"Intrinsic Resistance Unusual Phenotypes\" (link) guideline = \"EUCAST 3.1\" former European international guideline - EUCAST Expert Rules Version 3.1 \"Intrinsic Resistance Exceptional Phenotypes Tables\" (link) guideline = \"TB\" international guideline multi-drug resistant tuberculosis - World Health Organization \"Companion handbook guidelines programmatic management drug-resistant tuberculosis\" (link) guideline = \"MRGN\" German national guideline - Mueller et al. (2015) Antimicrobial Resistance Infection Control 4:7; doi:10.1186/s13756-015-0047-6 guideline = \"BRMO 2024\" (simply guideline = \"BRMO\") Dutch national guideline - Samenwerkingverband Richtlijnen Infectiepreventie (SRI) (2024) \"Bijzonder Resistente Micro-Organismen (BRMO)\" (link) Also: guideline = \"BRMO 2017\" former Dutch national guideline - Werkgroep Infectiepreventie (WIP), RIVM, last revision 2017: \"Bijzonder Resistente Micro-Organismen (BRMO)\"","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"using-custom-guidelines","dir":"Reference","previous_headings":"","what":"Using Custom Guidelines","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"Using custom MDRO guideline importance custom rules determine MDROs hospital, e.g., rules dependent ward, state contact isolation variables data. Custom guidelines can set custom_mdro_guideline() function.","code":""},{"path":"https://amr-for-r.org/reference/mdro.html","id":"interpretation-of-sir","dir":"Reference","previous_headings":"","what":"Interpretation of SIR","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"2019, European Committee Antimicrobial Susceptibility Testing (EUCAST) decided change definitions susceptibility testing categories S, , R (https://www.eucast.org/newsiandr). AMR package follows insight; use susceptibility() (equal proportion_SI()) determine antimicrobial susceptibility count_susceptible() (equal count_SI()) count susceptible isolates.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/mdro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Multidrug-Resistant Organisms (MDRO) — mdro","text":"","code":"out <- mdro(example_isolates) #> Warning: in mdro(): NA introduced for isolates where the available percentage of #> antimicrobial classes was below 50% (set with pct_required_classes) str(out) #>  Ord.factor w/ 4 levels \"Negative\"<\"Multi-drug-resistant (MDR)\"<..: NA NA 1 1 1 1 NA NA 1 1 ... table(out) #> out #>                         Negative       Multi-drug-resistant (MDR)  #>                             1617                              128  #> Extensively drug-resistant (XDR)          Pandrug-resistant (PDR)  #>                                0                                0   out <- mdro(example_isolates, guideline = \"EUCAST 3.3\") table(out) #> out #>              Negative Positive, unconfirmed              Positive  #>                  1994                     0                     6   # \\donttest{ if (require(\"dplyr\")) {   # no need to define `x` when used inside dplyr verbs:   example_isolates %>%     mutate(MDRO = mdro()) %>%     count(MDRO) } #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `MDRO = mdro()`. #> Caused by warning: #> ! in mdro(): NA introduced for isolates where the available percentage of #> antimicrobial classes was below 50% (set with pct_required_classes) #> # A tibble: 3 × 2 #>   MDRO                           n #>   <ord>                      <int> #> 1 Negative                    1617 #> 2 Multi-drug-resistant (MDR)   128 #> 3 NA                           255 # }"},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Mean AMR Distance — mean_amr_distance","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"Calculates normalised mean antimicrobial resistance multiple observations, help identify similar isolates without comparing antibiograms hand.","code":""},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"","code":"mean_amr_distance(x, ...)  # S3 method for class 'sir' mean_amr_distance(x, ..., combine_SI = TRUE)  # S3 method for class 'data.frame' mean_amr_distance(x, ..., combine_SI = TRUE)  amr_distance_from_row(amr_distance, row)"},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"x vector class sir, mic disk, data.frame containing columns classes. ... Variables select. Supports tidyselect language (.mic), starts_with(...), column1:column4, can thus also antimicrobial selectors. combine_SI logical indicate whether values S, SDD, must merged one, input consists S+vs. R (susceptible vs. resistant) - default TRUE. amr_distance outcome mean_amr_distance(). row index, row number.","code":""},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"mean AMR distance effectively Z-score; normalised numeric value compare AMR test results can help identify similar isolates, without comparing antibiograms hand. MIC values (see .mic()) transformed log2() first; distance thus calculated (log2(x) - mean(log2(x))) / sd(log2(x)). SIR values (see .sir()) transformed using \"S\" = 1, \"\" = 2, \"R\" = 3. combine_SI TRUE (default), \"\" considered 1. data sets, mean AMR distance calculated per column, mean per row returned, see Examples. Use amr_distance_from_row() subtract distances distance one row, see Examples.","code":""},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"Isolates distances less 0.01 difference considered similar. Differences lower 0.025 considered suspicious.","code":""},{"path":"https://amr-for-r.org/reference/mean_amr_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Mean AMR Distance — mean_amr_distance","text":"","code":"sir <- random_sir(10) sir #> Class 'sir' #>  [1] R R I R I I S R S I mean_amr_distance(sir) #>  [1]  1.1618950  1.1618950 -0.7745967  1.1618950 -0.7745967 -0.7745967 #>  [7] -0.7745967  1.1618950 -0.7745967 -0.7745967  mic <- random_mic(10) mic #> Class 'mic' #>  [1] 0.032 0.5   1     >=8   4     0.016 >=8   1     0.004 0.008 mean_amr_distance(mic) #>  [1] -0.7311752  0.2104422  0.4478776  1.1601837  0.9227483 -0.9686106 #>  [7]  1.1601837  0.4478776 -1.4434813 -1.2060459 # equal to the Z-score of their log2: (log2(mic) - mean(log2(mic))) / sd(log2(mic)) #>  [1] -0.7311752  0.2104422  0.4478776  1.1601837  0.9227483 -0.9686106 #>  [7]  1.1601837  0.4478776 -1.4434813 -1.2060459  disk <- random_disk(10) disk #> Class 'disk' #>  [1] 50 49 38 33 31 17 42 43 46 37 mean_amr_distance(disk) #>  [1]  1.15131286  1.05032051 -0.06059541 -0.56555720 -0.76754191 -2.18143490 #>  [7]  0.34337401  0.44436637  0.74734344 -0.16158777  y <- data.frame(   id = LETTERS[1:10],   amox = random_sir(10, ab = \"amox\", mo = \"Escherichia coli\"),   cipr = random_disk(10, ab = \"cipr\", mo = \"Escherichia coli\"),   gent = random_mic(10, ab = \"gent\", mo = \"Escherichia coli\"),   tobr = random_mic(10, ab = \"tobr\", mo = \"Escherichia coli\") ) y #>    id amox cipr gent tobr #> 1   A    I   27  >=2    8 #> 2   B    S   28    1    8 #> 3   C    R   33    1    8 #> 4   D    R   32    1   16 #> 5   E    I   25  0.5   16 #> 6   F    I   19  0.5    8 #> 7   G    S   23  0.5   16 #> 8   H    R   27  0.5    8 #> 9   I    S   29    1    8 #> 10  J    R   32  0.5   16 mean_amr_distance(y) #> ℹ Calculating mean AMR distance based on columns \"amox\", \"cipr\", \"gent\", #>   and \"tobr\" #>  [1]  0.08471751 -0.21572693  0.55391610  0.98093500 -0.26046456 -1.08721162 #>  [7] -0.37467261 -0.14625651 -0.15862291  0.62338653 y$amr_distance <- mean_amr_distance(y, is.mic(y)) #> ℹ Calculating mean AMR distance based on columns \"gent\" and \"tobr\" y[order(y$amr_distance), ] #>    id amox cipr gent tobr amr_distance #> 6   F    I   19  0.5    8   -0.8163565 #> 8   H    R   27  0.5    8   -0.8163565 #> 2   B    S   28    1    8   -0.1012596 #> 3   C    R   33    1    8   -0.1012596 #> 9   I    S   29    1    8   -0.1012596 #> 5   E    I   25  0.5   16    0.1518893 #> 7   G    S   23  0.5   16    0.1518893 #> 10  J    R   32  0.5   16    0.1518893 #> 1   A    I   27  >=2    8    0.6138374 #> 4   D    R   32    1   16    0.8669863  if (require(\"dplyr\")) {   y %>%     mutate(       amr_distance = mean_amr_distance(y),       check_id_C = amr_distance_from_row(amr_distance, id == \"C\")     ) %>%     arrange(check_id_C) } #> ℹ Calculating mean AMR distance based on columns \"amox\", \"cipr\", \"gent\", #>   and \"tobr\" #>    id amox cipr gent tobr amr_distance check_id_C #> 1   C    R   33    1    8   0.55391610 0.00000000 #> 2   J    R   32  0.5   16   0.62338653 0.06947042 #> 3   D    R   32    1   16   0.98093500 0.42701889 #> 4   A    I   27  >=2    8   0.08471751 0.46919859 #> 5   H    R   27  0.5    8  -0.14625651 0.70017262 #> 6   I    S   29    1    8  -0.15862291 0.71253901 #> 7   B    S   28    1    8  -0.21572693 0.76964304 #> 8   E    I   25  0.5   16  -0.26046456 0.81438066 #> 9   G    S   23  0.5   16  -0.37467261 0.92858871 #> 10  F    I   19  0.5    8  -1.08721162 1.64112773 if (require(\"dplyr\")) {   # support for groups   example_isolates %>%     filter(mo_genus() == \"Enterococcus\" & mo_species() != \"\") %>%     select(mo, TCY, carbapenems()) %>%     group_by(mo) %>%     mutate(dist = mean_amr_distance(.)) %>%     arrange(mo, dist) } #> ℹ Using column 'mo' as input for mo_genus() #> ℹ Using column 'mo' as input for mo_species() #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> ℹ Calculating mean AMR distance based on columns \"TCY\", \"IPM\", and \"MEM\" #> # A tibble: 63 × 5 #> # Groups:   mo [4] #>    mo           TCY   IPM   MEM     dist #>    <mo>         <sir> <sir> <sir>  <dbl> #>  1 B_ENTRC_AVIM   S     S     NA   0     #>  2 B_ENTRC_AVIM   S     S     NA   0     #>  3 B_ENTRC_CSSL   NA    S     NA  NA     #>  4 B_ENTRC_FACM   S     S     NA  -2.66  #>  5 B_ENTRC_FACM   S     R     R   -0.423 #>  6 B_ENTRC_FACM   S     R     R   -0.423 #>  7 B_ENTRC_FACM   NA    R     R    0.224 #>  8 B_ENTRC_FACM   NA    R     R    0.224 #>  9 B_ENTRC_FACM   NA    R     R    0.224 #> 10 B_ENTRC_FACM   NA    R     R    0.224 #> # ℹ 53 more rows"},{"path":"https://amr-for-r.org/reference/microorganisms.codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","title":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","text":"data set containing commonly used codes microorganisms, laboratory systems WHONET. Define set_mo_source(). searched using .mo() consequently mo_* functions.","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","text":"","code":"microorganisms.codes"},{"path":"https://amr-for-r.org/reference/microorganisms.codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","text":"tibble 6 036 observations 2 variables: code Commonly used code microorganism. unique identifier. mo ID microorganism microorganisms data set","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.codes.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/microorganisms.codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 6 036 Common Microorganism Codes — microorganisms.codes","text":"","code":"microorganisms.codes #> # A tibble: 6,036 × 2 #>    code  mo                #>    <chr> <mo>              #>  1 1011  B_GRAMP           #>  2 1012  B_GRAMP           #>  3 1013  B_GRAMN           #>  4 1014  B_GRAMN           #>  5 1015  F_YEAST           #>  6 103   B_ESCHR_COLI      #>  7 104   B_SLMNL_ENTR_ENTR #>  8 1100  B_STRPT           #>  9 1101  B_STRPT_VIRI      #> 10 1102  B_STRPT_HAEM      #> # ℹ 6,026 more rows  # 'ECO' or 'eco' is the WHONET code for E. coli: microorganisms.codes[microorganisms.codes$code == \"ECO\", ] #> # A tibble: 1 × 2 #>   code  mo           #>   <chr> <mo>         #> 1 ECO   B_ESCHR_COLI  # and therefore, 'eco' will be understood as E. coli in this package: mo_info(\"eco\") #> $mo #> [1] \"B_ESCHR_COLI\" #>  #> $rank #> [1] \"species\" #>  #> $kingdom #> [1] \"Bacteria\" #>  #> $phylum #> [1] \"Pseudomonadota\" #>  #> $class #> [1] \"Gammaproteobacteria\" #>  #> $order #> [1] \"Enterobacterales\" #>  #> $family #> [1] \"Enterobacteriaceae\" #>  #> $genus #> [1] \"Escherichia\" #>  #> $species #> [1] \"coli\" #>  #> $subspecies #> [1] \"\" #>  #> $status #> [1] \"accepted\" #>  #> $synonyms #> NULL #>  #> $gramstain #> [1] \"Gram-negative\" #>  #> $oxygen_tolerance #> [1] \"facultative anaerobe\" #>  #> $url #> [1] \"https://lpsn.dsmz.de/species/escherichia-coli\" #>  #> $ref #> [1] \"Castellani et al., 1919\" #>  #> $snomed #>  [1] \"1095001000112106\" \"715307006\"        \"737528008\"        \"416989002\"        #>  [5] \"116397003\"        \"414097009\"        \"414098004\"        \"414099007\"        #>  [9] \"414100004\"        \"116395006\"        \"735270003\"        \"116396007\"        #> [13] \"83285000\"         \"116394005\"        \"112283007\"        \"710886005\"        #> [17] \"710887001\"        \"710888006\"        \"710889003\"        \"414132004\"        #> [21] \"721892009\"        \"416812001\"        \"416740004\"        \"417216001\"        #> [25] \"457541006\"        \"710253004\"        \"416530004\"        \"417189006\"        #> [29] \"409800005\"        \"713925008\"        \"444771000124108\"  \"838549008\"        #>  #> $lpsn #> [1] \"776057\" #>  #> $mycobank #> [1] NA #>  #> $gbif #> [1] \"11286021\" #>  #> $group_members #> character(0) #>   # works for all AMR functions: mo_is_intrinsic_resistant(\"eco\", ab = \"vancomycin\") #> [1] TRUE"},{"path":"https://amr-for-r.org/reference/microorganisms.groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","title":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","text":"data set containing species groups microbiological complexes, used clinical breakpoints table.","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","text":"","code":"microorganisms.groups"},{"path":"https://amr-for-r.org/reference/microorganisms.groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","text":"tibble 534 observations 4 variables: mo_group ID species group / microbiological complex mo ID microorganism belonging species group / microbiological complex mo_group_name Name species group / microbiological complex, retrieved mo_name() mo_name Name microorganism belonging species group / microbiological complex, retrieved mo_name()","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.groups.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/microorganisms.groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 534 Microorganisms In Species Groups — microorganisms.groups","text":"","code":"microorganisms.groups #> # A tibble: 534 × 4 #>    mo_group       mo           mo_group_name                   mo_name           #>    <mo>           <mo>         <chr>                           <chr>             #>  1 B_ACNTB_BMNN-C B_ACNTB_BMNN Acinetobacter baumannii complex Acinetobacter ba… #>  2 B_ACNTB_BMNN-C B_ACNTB_CLCC Acinetobacter baumannii complex Acinetobacter ca… #>  3 B_ACNTB_BMNN-C B_ACNTB_LCTC Acinetobacter baumannii complex Acinetobacter di… #>  4 B_ACNTB_BMNN-C B_ACNTB_NSCM Acinetobacter baumannii complex Acinetobacter no… #>  5 B_ACNTB_BMNN-C B_ACNTB_PITT Acinetobacter baumannii complex Acinetobacter pi… #>  6 B_ACNTB_BMNN-C B_ACNTB_SFRT Acinetobacter baumannii complex Acinetobacter se… #>  7 B_BCTRD_FRGL-C B_BCTRD_FRGL Bacteroides fragilis complex    Bacteroides frag… #>  8 B_BCTRD_FRGL-C B_BCTRD_OVTS Bacteroides fragilis complex    Bacteroides ovat… #>  9 B_BCTRD_FRGL-C B_BCTRD_THTT Bacteroides fragilis complex    Bacteroides thet… #> 10 B_BCTRD_FRGL-C B_PHCCL_VLGT Bacteroides fragilis complex    Bacteroides vulg… #> # ℹ 524 more rows  # these are all species in the Bacteroides fragilis group, as per WHONET: microorganisms.groups[microorganisms.groups$mo_group == \"B_BCTRD_FRGL-C\", ] #> # A tibble: 5 × 4 #>   mo_group       mo           mo_group_name                mo_name               #>   <mo>           <mo>         <chr>                        <chr>                 #> 1 B_BCTRD_FRGL-C B_BCTRD_FRGL Bacteroides fragilis complex Bacteroides fragilis  #> 2 B_BCTRD_FRGL-C B_BCTRD_OVTS Bacteroides fragilis complex Bacteroides ovatus    #> 3 B_BCTRD_FRGL-C B_BCTRD_THTT Bacteroides fragilis complex Bacteroides thetaiot… #> 4 B_BCTRD_FRGL-C B_PHCCL_VLGT Bacteroides fragilis complex Bacteroides vulgatus  #> 5 B_BCTRD_FRGL-C B_PRBCT_DSTS Bacteroides fragilis complex Parabacteroides dist…"},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"data set containing full microbial taxonomy (last updated: June 24th, 2024) six kingdoms. data set backbone AMR package. MO codes can looked using .mo() microorganism properties can looked using mo_* functions. data set carefully crafted, yet made 100% reproducible public authoritative taxonomic sources (using script), namely: List Prokaryotic names Standing Nomenclature (LPSN) bacteria, MycoBank fungi, Global Biodiversity Information Facility (GBIF) others taxons.","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"","code":"microorganisms"},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"tibble 78 679 observations 26 variables: mo ID microorganism used package. unique identifier. fullname Full name, like \"Escherichia coli\". taxonomic ranks genus, species subspecies, 'pasted' text genus, species, subspecies. taxonomic ranks higher genus, name taxon. unique identifier. status  Status taxon, either \"accepted\", \"validly published\", \"synonym\", \"unknown\" kingdom, phylum, class, order, family, genus, species, subspecies Taxonomic rank microorganism. Note fungi, phylum equal taxonomic division. Also, fungi, subkingdom subdivision left since occur bacterial taxonomy. rank Text taxonomic rank microorganism, \"species\" \"genus\" ref Author(s) year related scientific publication. contains first surname year latest authors, e.g. \"Wallis et al. 2006 emend. Smith Jones 2018\" becomes \"Smith et al., 2018\". field directly retrieved source specified column source. Moreover, accents removed comply CRAN allows ASCII characters. oxygen_tolerance  Oxygen tolerance, either \"aerobe\", \"anaerobe\", \"anaerobe/microaerophile\", \"facultative anaerobe\", \"likely facultative anaerobe\", \"microaerophile\". data retrieved BacDive (see Source). Items contain \"likely\" missing BacDive extrapolated species within genus guess oxygen tolerance. Currently 68.3% ~39 000 bacteria data set contain oxygen tolerance. source Either \"GBIF\", \"LPSN\", \"Manually added\", \"MycoBank\", \"manually added\" (see Source) lpsn Identifier ('Record number') List Prokaryotic names Standing Nomenclature (LPSN). first/highest LPSN identifier keep one identifier per row. example, Acetobacter ascendens LPSN Record number 7864 11011. first available microorganisms data set. unique identifier, though available ~33 000 records. lpsn_parent LPSN identifier parent taxon lpsn_renamed_to LPSN identifier currently valid taxon mycobank Identifier ('MycoBank #') MycoBank. unique identifier, though available ~18 000 records. mycobank_parent MycoBank identifier parent taxon mycobank_renamed_to MycoBank identifier currently valid taxon gbif Identifier ('taxonID') Global Biodiversity Information Facility (GBIF). unique identifier, though available ~49 000 records. gbif_parent GBIF identifier parent taxon gbif_renamed_to GBIF identifier currently valid taxon prevalence Prevalence microorganism based Bartlett et al. (2022, doi:10.1099/mic.0.001269 ), see mo_matching_score() full explanation snomed Systematized Nomenclature Medicine (SNOMED) code microorganism, version July 16th, 2024 (see Source). Use mo_snomed() retrieve quickly, see mo_property().","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"Taxonomic entries imported order importance: List Prokaryotic names Standing Nomenclature (LPSN): Parte, AC et al. (2020). List Prokaryotic names Standing Nomenclature (LPSN) moves DSMZ. International Journal Systematic Evolutionary Microbiology, 70, 5607-5612; doi:10.1099/ijsem.0.004332 . Accessed https://lpsn.dsmz.de June 24th, 2024. MycoBank: Vincent, R et al (2013). MycoBank gearing new horizons. IMA Fungus, 4(2), 371-9; doi:10.5598/imafungus.2013.04.02.16 . Accessed https://www.mycobank.org June 24th, 2024. Global Biodiversity Information Facility (GBIF): GBIF Secretariat (2023). GBIF Backbone Taxonomy. Checklist dataset doi:10.15468/39omei . Accessed https://www.gbif.org June 24th, 2024. Furthermore, sources used additional details: BacDive: Reimer, LC et al. (2022). BacDive 2022: knowledge base standardized bacterial archaeal data. Nucleic Acids Res., 50(D1):D741-D74; doi:10.1093/nar/gkab961 . Accessed https://bacdive.dsmz.de July 16th, 2024. Systematized Nomenclature Medicine - Clinical Terms (SNOMED-CT): Public Health Information Network Vocabulary Access Distribution System (PHIN VADS). US Edition SNOMED CT 1 September 2020. Value Set Name 'Microorganism', OID 2.16.840.1.114222.4.11.1009 (v12). Accessed https://www.cdc.gov/phin/php/phinvads/ July 16th, 2024. Grimont et al. (2007). Antigenic Formulae Salmonella Serovars, 9th Edition. Collaborating Centre Reference Research Salmonella (WHOCC-SALM). Bartlett et al. (2022). comprehensive list bacterial pathogens infecting humans Microbiology 168:001269; doi:10.1099/mic.0.001269","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"Please note entries based LPSN, MycoBank, GBIF (see ). Since sources incorporate entries based (recent) publications International Journal Systematic Evolutionary Microbiology (IJSEM), can happen year publication sometimes later one might expect. example, Staphylococcus pettenkoferi described first time Diagnostic Microbiology Infectious Disease 2002 (doi:10.1016/s0732-8893(02)00399-1 ), 2007 publication IJSEM followed (doi:10.1099/ijs.0.64381-0 ). Consequently, AMR package returns 2007 mo_year(\"S. pettenkoferi\").","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"included-taxa","dir":"Reference","previous_headings":"","what":"Included Taxa","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"Included taxonomic data LPSN, MycoBank, GBIF : ~39 000 (sub)species kingdoms Archaea Bacteria ~28 000 species kingdom Fungi. kingdom Fungi large taxon almost 300,000 different (sub)species, microbial (rather macroscopic, like mushrooms). , fungi fit scope package. relevant fungi covered (species Aspergillus, Candida, Cryptococcus, Histoplasma, Pneumocystis, Saccharomyces Trichophyton). ~8 100 (sub)species kingdom Protozoa ~1 600 (sub)species 39 relevant genera kingdom Animalia (Strongyloides Taenia) ~22 000 previously accepted names included (sub)species (taxonomically renamed) complete taxonomic tree included (sub)species: kingdom subspecies identifier parent taxons year first author related scientific publication","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"manual-additions","dir":"Reference","previous_headings":"","what":"Manual additions","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"convenience, entries added manually: ~1 500 entries Salmonella, city-like serovars groups H 37 species groups (beta-haemolytic Streptococcus groups K, coagulase-negative Staphylococcus (CoNS), Mycobacterium tuberculosis complex, etc.), group compositions stored microorganisms.groups data set 1 entry Blastocystis (B.  hominis), although officially exist (Noel et al. 2005, PMID 15634993) 1 entry Moraxella (M. catarrhalis), formally named Branhamella catarrhalis (Catlin, 1970) though change never accepted within field clinical microbiology 8 'undefined' entries (unknown, unknown Gram-negatives, unknown Gram-positives, unknown yeast, unknown fungus, unknown anaerobic Gram-pos/Gram-neg bacteria) syntax used transform original data cleansed R format, can found .","code":""},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/microorganisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set with 78 679 Taxonomic Records of Microorganisms — microorganisms","text":"","code":"microorganisms #> # A tibble: 78,679 × 26 #>    mo          fullname   status kingdom phylum class order family genus species #>    <mo>        <chr>      <chr>  <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>   #>  1 B_GRAMN     (unknown … unkno… Bacter… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  2 B_GRAMP     (unknown … unkno… Bacter… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  3 B_ANAER-NEG (unknown … unkno… Bacter… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  4 B_ANAER-POS (unknown … unkno… Bacter… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  5 B_ANAER     (unknown … unkno… Bacter… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  6 F_FUNGUS    (unknown … unkno… Fungi   (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  7   UNKNOWN   (unknown … unkno… (unkno… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  8 P_PROTOZOAN (unknown … unkno… Protoz… (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #>  9 F_YEAST     (unknown … unkno… Fungi   (unkn… (unk… (unk… \"(unk… (unk… \"(unkn… #> 10 F_AABRN     Aabaarnia  unkno… Fungi   Ascom… Leca… Ostr… \"\"     Aaba… \"\"      #> # ℹ 78,669 more rows #> # ℹ 16 more variables: subspecies <chr>, rank <chr>, ref <chr>, #> #   oxygen_tolerance <chr>, source <chr>, lpsn <chr>, lpsn_parent <chr>, #> #   lpsn_renamed_to <chr>, mycobank <chr>, mycobank_parent <chr>, #> #   mycobank_renamed_to <chr>, gbif <chr>, gbif_parent <chr>, #> #   gbif_renamed_to <chr>, prevalence <dbl>, snomed <list>"},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Matching Score for Microorganisms — mo_matching_score","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"algorithm used .mo() mo_* functions determine probable match taxonomic records based user input.","code":""},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"","code":"mo_matching_score(x, n)"},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"x user input value(s). n full taxonomic name, exists microorganisms$fullname.","code":""},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"algorithm originally developed 2018 subsequently described : Berends MS et al. (2022). AMR: R Package Working Antimicrobial Resistance Data. Journal Statistical Software, 104(3), 1-31; doi:10.18637/jss.v104.i03 . Later, work Bartlett et al. bacterial pathogens infecting humans (2022, doi:10.1099/mic.0.001269 ) incorporated, optimalisations algorithm made.","code":""},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"matching-score-for-microorganisms","dir":"Reference","previous_headings":"","what":"Matching Score for Microorganisms","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"ambiguous user input .mo() mo_* functions, returned results chosen based matching score using mo_matching_score(). matching score \\(m\\), calculated : $$m_{(x, n)} = \\frac{l_{n} - 0.5 \\cdot \\min \\begin{cases}l_{n} \\\\ \\textrm{lev}(x, n)\\end{cases}}{l_{n} \\cdot p_{n} \\cdot k_{n}}$$ : \\(x\\) user input; \\(n\\) taxonomic name (genus, species, subspecies); \\(l_n\\) length \\(n\\); \\(lev\\) Levenshtein distance function (counting insertion 1, deletion substitution 2) needed change \\(x\\) \\(n\\); \\(p_n\\) human pathogenic prevalence group \\(n\\), described ; \\(k_n\\) taxonomic kingdom \\(n\\), set Bacteria = 1, Fungi = 1.25, Protozoa = 1.5, Chromista = 1.75, Archaea = 2, others = 3. grouping human pathogenic prevalence \\(p\\) based recent work Bartlett et al. (2022, doi:10.1099/mic.0.001269 ) extensively studied medical-scientific literature categorise bacterial species groups: Established, taxonomic species infected least three persons three references. records prevalence = 1.15 microorganisms data set; Putative, taxonomic species fewer three known cases. records prevalence = 1.25 microorganisms data set. Furthermore, Genera World Health Organization's () Priority Pathogen List prevalence = 1.0 microorganisms data set; genus present established list also prevalence = 1.15 microorganisms data set; genus present putative list prevalence = 1.25 microorganisms data set; species subspecies genus present two aforementioned groups, prevalence = 1.5 microorganisms data set; non-bacterial genus, species subspecies genus present following list, prevalence = 1.25 microorganisms data set: Absidia, Acanthamoeba, Acremonium, Actinomucor, Aedes, Alternaria, Amoeba, Ancylostoma, Angiostrongylus, Anisakis, Anopheles, Apophysomyces, Arthroderma, Aspergillus, Aureobasidium, Basidiobolus, Beauveria, Bipolaris, Blastobotrys, Blastocystis, Blastomyces, Candida, Capillaria, Chaetomium, Chilomastix, Chrysonilia, Chrysosporium, Cladophialophora, Cladosporium, Clavispora, Coccidioides, Cokeromyces, Conidiobolus, Coniochaeta, Contracaecum, Cordylobia, Cryptococcus, Cryptosporidium, Cunninghamella, Curvularia, Cyberlindnera, Debaryozyma, Demodex, Dermatobia, Dientamoeba, Diphyllobothrium, Dirofilaria, Echinostoma, Entamoeba, Enterobius, Epidermophyton, Exidia, Exophiala, Exserohilum, Fasciola, Fonsecaea, Fusarium, Geotrichum, Giardia, Graphium, Haloarcula, Halobacterium, Halococcus, Hansenula, Hendersonula, Heterophyes, Histomonas, Histoplasma, Hortaea, Hymenolepis, Hypomyces, Hysterothylacium, Kloeckera, Kluyveromyces, Kodamaea, Lacazia, Leishmania, Lichtheimia, Lodderomyces, Lomentospora, Madurella, Malassezia, Malbranchea, Metagonimus, Meyerozyma, Microsporidium, Microsporum, Millerozyma, Mortierella, Mucor, Mycocentrospora, Nannizzia, Necator, Nectria, Ochroconis, Oesophagostomum, Oidiodendron, Opisthorchis, Paecilomyces, Paracoccidioides, Pediculus, Penicillium, Phaeoacremonium, Phaeomoniella, Phialophora, Phlebotomus, Phoma, Pichia, Piedraia, Pithomyces, Pityrosporum, Pneumocystis, Pseudallescheria, Pseudoscopulariopsis, Pseudoterranova, Pulex, Purpureocillium, Quambalaria, Rhinocladiella, Rhizomucor, Rhizopus, Rhodotorula, Saccharomyces, Saksenaea, Saprochaete, Sarcoptes, Scedosporium, Schistosoma, Schizosaccharomyces, Scolecobasidium, Scopulariopsis, Scytalidium, Spirometra, Sporobolomyces, Sporopachydermia, Sporothrix, Sporotrichum, Stachybotrys, Strongyloides, Syncephalastrum, Syngamus, Taenia, Talaromyces, Teleomorph, Toxocara, Trichinella, Trichobilharzia, Trichoderma, Trichomonas, Trichophyton, Trichosporon, Trichostrongylus, Trichuris, Tritirachium, Trombicula, Trypanosoma, Tunga, Ulocladium, Ustilago, Verticillium, Wallemia, Wangiella, Wickerhamomyces, Wuchereria, Yarrowia, Zygosaccharomyces; records prevalence = 2.0 microorganisms data set. calculating matching score, characters \\(x\\) \\(n\\) ignored -Z, -z, 0-9, spaces parentheses. matches sorted descending matching score user input values, top match returned. lead effect e.g., \"E. coli\" return microbial ID Escherichia coli (\\(m = 0.688\\), highly prevalent microorganism found humans) Entamoeba coli (\\(m = 0.381\\), less prevalent microorganism humans), although latter alphabetically come first.","code":""},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":"https://amr-for-r.org/reference/mo_matching_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Matching Score for Microorganisms — mo_matching_score","text":"","code":"mo_reset_session() #> ℹ Reset 17 previously matched input values.  as.mo(\"E. coli\") #> Class 'mo' #> [1] B_ESCHR_COLI mo_uncertainties() #> Matching scores are based on the resemblance between the input and the full #> taxonomic name, and the pathogenicity in humans. See ?mo_matching_score. #> Colour keys:  0.000-0.549  0.550-0.649  0.650-0.749  0.750-1.000  #>  #> -------------------------------------------------------------------------------- #> \"E. coli\" -> Escherichia coli (B_ESCHR_COLI, 0.688) #> Also matched: Enterococcus crotali (0.650), Escherichia coli coli #>               (0.643), Escherichia coli expressing (0.611), Enterobacter cowanii #>               (0.600), Enterococcus columbae (0.595), Enterococcus camelliae (0.591), #>               Enterococcus casseliflavus (0.577), Enterobacter cloacae cloacae #>               (0.571), Enterobacter cloacae complex (0.571), and Enterobacter cloacae #>               dissolvens (0.565) #>  #> Only the first 10 other matches of each record are shown. Run #> print(mo_uncertainties(), n = ...) to view more entries, or save #> mo_uncertainties() to an object.  mo_matching_score(   x = \"E. coli\",   n = c(\"Escherichia coli\", \"Entamoeba coli\") ) #> [1] 0.6875000 0.3809524"},{"path":"https://amr-for-r.org/reference/mo_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Properties of a Microorganism — mo_property","title":"Get Properties of a Microorganism — mo_property","text":"Use functions return specific property microorganism based latest accepted taxonomy. input values evaluated internally .mo(), makes possible use microbial abbreviations, codes names input. See Examples.","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Properties of a Microorganism — mo_property","text":"","code":"mo_name(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_fullname(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_shortname(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_subspecies(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_species(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_genus(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_family(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_order(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_class(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_phylum(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_kingdom(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_domain(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_type(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_status(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_pathogenicity(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_gramstain(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_is_gram_negative(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_is_gram_positive(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_is_yeast(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_is_intrinsic_resistant(x, ab, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_oxygen_tolerance(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_is_anaerobic(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_snomed(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_ref(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_authors(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_year(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_lpsn(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_mycobank(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_gbif(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_rank(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_taxonomy(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_synonyms(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_current(x, language = get_AMR_locale(), ...)  mo_group_members(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_info(x, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_url(x, open = FALSE, language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)  mo_property(x, property = \"fullname\", language = get_AMR_locale(),   keep_synonyms = getOption(\"AMR_keep_synonyms\", FALSE), ...)"},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Properties of a Microorganism — mo_property","text":"x character (vector) can coerced valid microorganism code .mo(). Can left blank auto-guessing column containing microorganism codes used data set, see Examples. language Language translate text like \"growth\", defaults system language (see get_AMR_locale()). keep_synonyms logical indicate old, previously valid taxonomic names must preserved corrected currently accepted names. default FALSE, return note old taxonomic names processed. default can set package option AMR_keep_synonyms, .e. options(AMR_keep_synonyms = TRUE) options(AMR_keep_synonyms = FALSE). ... arguments passed .mo(), 'minimum_matching_score', 'ignore_pattern', 'remove_from_input'. ab (vector ) text can coerced valid antibiotic drug code .ab(). open Browse URL using browseURL(). property One column names microorganisms data set: \"mo\", \"fullname\", \"status\", \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\", \"subspecies\", \"rank\", \"ref\", \"oxygen_tolerance\", \"source\", \"lpsn\", \"lpsn_parent\", \"lpsn_renamed_to\", \"mycobank\", \"mycobank_parent\", \"mycobank_renamed_to\", \"gbif\", \"gbif_parent\", \"gbif_renamed_to\", \"prevalence\", \"snomed\", must \"shortname\".","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Properties of a Microorganism — mo_property","text":"integer case mo_year() ordered factor case mo_pathogenicity() list case mo_taxonomy(), mo_synonyms(), mo_snomed(), mo_info() logical case mo_is_anaerobic(), mo_is_gram_negative(), mo_is_gram_positive(), mo_is_intrinsic_resistant(), mo_is_yeast() named character case mo_synonyms() mo_url() character cases","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Properties of a Microorganism — mo_property","text":"functions , default, keep old taxonomic properties, synonyms automatically replaced current taxonomy. Take example Enterobacter aerogenes, initially named 1960 renamed Klebsiella aerogenes 2017: mo_genus(\"Enterobacter aerogenes\") return \"Klebsiella\" (note renaming) mo_genus(\"Enterobacter aerogenes\", keep_synonyms = TRUE) return \"Enterobacter\" (-per-session warning name outdated) mo_ref(\"Enterobacter aerogenes\") return \"Tindall et al., 2017\" (note renaming) mo_ref(\"Enterobacter aerogenes\", keep_synonyms = TRUE) return \"Hormaeche et al., 1960\" (-per-session warning name outdated) short name (mo_shortname()) returns first character genus full species, \"E. coli\", species subspecies. Exceptions abbreviations staphylococci (\"CoNS\", Coagulase-Negative Staphylococci) beta-haemolytic streptococci (\"GBS\", Group B Streptococci). Please bear mind e.g. E. coli mean Escherichia coli (kingdom Bacteria) well Entamoeba coli (kingdom Protozoa). Returning full name done using .mo() internally, giving priority bacteria human pathogens, .e. \"E. coli\" considered Escherichia coli. result, mo_fullname(mo_shortname(\"Entamoeba coli\")) returns \"Escherichia coli\". Since top-level taxonomy sometimes referred 'kingdom' sometimes 'domain', functions mo_kingdom() mo_domain() return exact results. Determination human pathogenicity (mo_pathogenicity()) strongly based Bartlett et al. (2022, doi:10.1099/mic.0.001269 ). function returns factor levels Pathogenic, Potentially pathogenic, Non-pathogenic, Unknown. Determination Gram stain (mo_gramstain()) based taxonomic kingdom phylum. Originally, Cavalier-Smith defined -called subkingdoms Negibacteria Posibacteria (2002, PMID 11837318), considered phyla Posibacteria: Actinobacteria, Chloroflexi, Firmicutes, Tenericutes. phyla later renamed Actinomycetota, Chloroflexota, Bacillota, Mycoplasmatota (2021, PMID 34694987). Bacteria phyla considered Gram-positive AMR package, except members class Negativicutes (within phylum Bacillota) Gram-negative. bacteria considered Gram-negative. Species outside kingdom Bacteria return value NA. Functions mo_is_gram_negative() mo_is_gram_positive() always return TRUE FALSE (NA input NA MO code UNKNOWN), thus always return FALSE species outside taxonomic kingdom Bacteria. Determination yeasts (mo_is_yeast()) based taxonomic kingdom class. Budding yeasts yeasts reproduce asexually process called budding, new cell develops small protrusion parent cell. Taxonomically, members phylum Ascomycota, class Saccharomycetes (also called Hemiascomycetes) Pichiomycetes. True yeasts quite specifically refers yeasts underlying order Saccharomycetales (Saccharomyces cerevisiae). Thus, microorganisms member taxonomic class Saccharomycetes Pichiomycetes, function return TRUE. returns FALSE otherwise (NA input NA MO code UNKNOWN). Determination intrinsic resistance (mo_is_intrinsic_resistant()) based intrinsic_resistant data set, based 'EUCAST Expected Resistant Phenotypes' v1.2 (2023). mo_is_intrinsic_resistant() function can vectorised argument x (input microorganisms) ab (input antimicrobials). Determination bacterial oxygen tolerance (mo_oxygen_tolerance()) based BacDive, see Source. function mo_is_anaerobic() returns TRUE oxygen tolerance \"anaerobe\", indicting obligate anaerobic species genus. always returns FALSE species outside taxonomic kingdom Bacteria. function mo_url() return direct URL online database entry, also shows scientific reference concerned species. MycoBank URL used fungi wherever available , LPSN URL bacteria wherever available, GBIF link otherwise. SNOMED codes (mo_snomed()) last updated July 16th, 2024. See Source microorganisms data set info. Old taxonomic names (-called 'synonyms') can retrieved mo_synonyms() (scientific reference name), current taxonomic name can retrieved mo_current(). functions return full names. output translated possible.","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"matching-score-for-microorganisms","dir":"Reference","previous_headings":"","what":"Matching Score for Microorganisms","title":"Get Properties of a Microorganism — mo_property","text":"function uses .mo() internally, uses advanced algorithm translate arbitrary user input valid taxonomy using -called matching score. can read public algorithm MO matching score page.","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get Properties of a Microorganism — mo_property","text":"Berends MS et al. (2022). AMR: R Package Working Antimicrobial Resistance Data. Journal Statistical Software, 104(3), 1-31; doi:10.18637/jss.v104.i03 Parte, AC et al. (2020). List Prokaryotic names Standing Nomenclature (LPSN) moves DSMZ. International Journal Systematic Evolutionary Microbiology, 70, 5607-5612; doi:10.1099/ijsem.0.004332 . Accessed https://lpsn.dsmz.de June 24th, 2024. Vincent, R et al (2013). MycoBank gearing new horizons. IMA Fungus, 4(2), 371-9; doi:10.5598/imafungus.2013.04.02.16 . Accessed https://www.mycobank.org June 24th, 2024. GBIF Secretariat (2023). GBIF Backbone Taxonomy. Checklist dataset doi:10.15468/39omei . Accessed https://www.gbif.org June 24th, 2024. Reimer, LC et al. (2022). BacDive 2022: knowledge base standardized bacterial archaeal data. Nucleic Acids Res., 50(D1):D741-D74; doi:10.1093/nar/gkab961 . Accessed https://bacdive.dsmz.de July 16th, 2024. Public Health Information Network Vocabulary Access Distribution System (PHIN VADS). US Edition SNOMED CT 1 September 2020. Value Set Name 'Microorganism', OID 2.16.840.1.114222.4.11.1009 (v12). URL: https://www.cdc.gov/phin/php/phinvads/ Bartlett et al. (2022). comprehensive list bacterial pathogens infecting humans Microbiology 168:001269; doi:10.1099/mic.0.001269","code":""},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"download-our-reference-data","dir":"Reference","previous_headings":"","what":"Download Our Reference Data","title":"Get Properties of a Microorganism — mo_property","text":"reference data sets AMR package - including information microorganisms, antimicrobials, clinical breakpoints - freely available download multiple formats: R, MS Excel, Apache Feather, Apache Parquet, SPSS, Stata. maximum compatibility, also provide machine-readable, tab-separated plain text files suitable use software, including laboratory information systems. Visit website direct download links, explore actual files GitHub repository.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/mo_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Properties of a Microorganism — mo_property","text":"","code":"# taxonomic tree -----------------------------------------------------------  mo_kingdom(\"Klebsiella pneumoniae\") #> [1] \"Bacteria\" mo_phylum(\"Klebsiella pneumoniae\") #> [1] \"Pseudomonadota\" mo_class(\"Klebsiella pneumoniae\") #> [1] \"Gammaproteobacteria\" mo_order(\"Klebsiella pneumoniae\") #> [1] \"Enterobacterales\" mo_family(\"Klebsiella pneumoniae\") #> [1] \"Enterobacteriaceae\" mo_genus(\"Klebsiella pneumoniae\") #> [1] \"Klebsiella\" mo_species(\"Klebsiella pneumoniae\") #> [1] \"pneumoniae\" mo_subspecies(\"Klebsiella pneumoniae\") #> [1] \"\"   # full names and short names -----------------------------------------------  mo_name(\"Klebsiella pneumoniae\") #> [1] \"Klebsiella pneumoniae\" mo_fullname(\"Klebsiella pneumoniae\") #> [1] \"Klebsiella pneumoniae\" mo_shortname(\"Klebsiella pneumoniae\") #> [1] \"K. pneumoniae\"   # other properties ---------------------------------------------------------  mo_pathogenicity(\"Klebsiella pneumoniae\") #> [1] Pathogenic #> Levels: Pathogenic < Potentially pathogenic < Non-pathogenic < Unknown mo_gramstain(\"Klebsiella pneumoniae\") #> [1] \"Gram-negative\" mo_snomed(\"Klebsiella pneumoniae\") #> [[1]] #> [1] \"1098101000112102\" \"446870005\"        \"1098201000112108\" \"409801009\"        #> [5] \"56415008\"         \"714315002\"        \"713926009\"        #>  mo_type(\"Klebsiella pneumoniae\") #> [1] \"Bacteria\" mo_rank(\"Klebsiella pneumoniae\") #> [1] \"species\" mo_url(\"Klebsiella pneumoniae\") #>                                Klebsiella pneumoniae  #> \"https://lpsn.dsmz.de/species/klebsiella-pneumoniae\"  mo_is_yeast(c(\"Candida\", \"Trichophyton\", \"Klebsiella\")) #> [1]  TRUE FALSE FALSE  mo_group_members(c(   \"Streptococcus group A\",   \"Streptococcus group C\",   \"Streptococcus group G\",   \"Streptococcus group L\" )) #> $`Streptococcus Group A` #> [1] \"Streptococcus pyogenes\" #>  #> $`Streptococcus Group C` #> [1] \"Streptococcus dysgalactiae\"              #> [2] \"Streptococcus dysgalactiae dysgalactiae\" #> [3] \"Streptococcus dysgalactiae equisimilis\"  #> [4] \"Streptococcus equi\"                      #> [5] \"Streptococcus equi equi\"                 #> [6] \"Streptococcus equi ruminatorum\"          #> [7] \"Streptococcus equi zooepidemicus\"        #>  #> $`Streptococcus Group G` #> [1] \"Streptococcus canis\"                     #> [2] \"Streptococcus dysgalactiae\"              #> [3] \"Streptococcus dysgalactiae dysgalactiae\" #> [4] \"Streptococcus dysgalactiae equisimilis\"  #>  #> $`Streptococcus Group L` #> [1] \"Streptococcus dysgalactiae\"              #> [2] \"Streptococcus dysgalactiae dysgalactiae\" #> [3] \"Streptococcus dysgalactiae equisimilis\"  #>    # scientific reference -----------------------------------------------------  mo_ref(\"Klebsiella aerogenes\") #> [1] \"Tindall et al., 2017\" mo_authors(\"Klebsiella aerogenes\") #> [1] \"Tindall et al.\" mo_year(\"Klebsiella aerogenes\") #> [1] 2017 mo_synonyms(\"Klebsiella aerogenes\") #>   Hormaeche et al., 1960     Bascomb et al., 1971  #> \"Enterobacter aerogenes\"     \"Klebsiella mobilis\"  mo_lpsn(\"Klebsiella aerogenes\") #> [1] \"777146\" mo_gbif(\"Klebsiella aerogenes\") #> [1] \"9281703\" mo_mycobank(\"Candida albicans\") #> [1] \"256187\" mo_mycobank(\"Candida krusei\") #> [1] \"337013\" mo_mycobank(\"Candida krusei\", keep_synonyms = TRUE) #> Warning: Function as.mo() returned one old taxonomic name. Use as.mo(..., #> keep_synonyms = FALSE) to clean the input to currently accepted taxonomic #> names, or set the R option AMR_keep_synonyms to FALSE. This warning #> will be shown once per session. #> [1] \"268707\"   # abbreviations known in the field -----------------------------------------  mo_genus(\"MRSA\") #> [1] \"Staphylococcus\" mo_species(\"MRSA\") #> [1] \"aureus\" mo_shortname(\"VISA\") #> [1] \"S. aureus\" mo_gramstain(\"VISA\") #> [1] \"Gram-positive\"  mo_genus(\"EHEC\") #> [1] \"Escherichia\" mo_species(\"EIEC\") #> [1] \"coli\" mo_name(\"UPEC\") #> [1] \"Escherichia coli\"   # known subspecies ---------------------------------------------------------  mo_fullname(\"K. pneu rh\") #> [1] \"Klebsiella pneumoniae rhinoscleromatis\" mo_shortname(\"K. pneu rh\") #> [1] \"K. pneumoniae\"  # \\donttest{ # Becker classification, see ?as.mo ----------------------------------------  mo_fullname(\"Staph epidermidis\") #> [1] \"Staphylococcus epidermidis\" mo_fullname(\"Staph epidermidis\", Becker = TRUE) #> [1] \"Coagulase-negative Staphylococcus (CoNS)\" mo_shortname(\"Staph epidermidis\") #> [1] \"S. epidermidis\" mo_shortname(\"Staph epidermidis\", Becker = TRUE) #> [1] \"CoNS\"   # Lancefield classification, see ?as.mo ------------------------------------  mo_fullname(\"Strep agalactiae\") #> [1] \"Streptococcus agalactiae\" mo_fullname(\"Strep agalactiae\", Lancefield = TRUE) #> [1] \"Streptococcus Group B\" mo_shortname(\"Strep agalactiae\") #> [1] \"S. agalactiae\" mo_shortname(\"Strep agalactiae\", Lancefield = TRUE) #> [1] \"GBS\"   # language support  --------------------------------------------------------  mo_gramstain(\"Klebsiella pneumoniae\", language = \"de\") # German #> [1] \"Gramnegativ\" mo_gramstain(\"Klebsiella pneumoniae\", language = \"nl\") # Dutch #> [1] \"Gram-negatief\" mo_gramstain(\"Klebsiella pneumoniae\", language = \"es\") # Spanish #> [1] \"Gram negativo\" mo_gramstain(\"Klebsiella pneumoniae\", language = \"el\") # Greek #> [1] \"Αρνητικό κατά Gram\" mo_gramstain(\"Klebsiella pneumoniae\", language = \"uk\") # Ukrainian #> [1] \"Грамнегативні\"  # mo_type is equal to mo_kingdom, but mo_kingdom will remain untranslated mo_kingdom(\"Klebsiella pneumoniae\") #> [1] \"Bacteria\" mo_type(\"Klebsiella pneumoniae\") #> [1] \"Bacteria\" mo_kingdom(\"Klebsiella pneumoniae\", language = \"zh\") # Chinese, no effect #> [1] \"Bacteria\" mo_type(\"Klebsiella pneumoniae\", language = \"zh\") # Chinese, translated #> [1] \"细菌\"  mo_fullname(\"S. pyogenes\", Lancefield = TRUE, language = \"de\") #> [1] \"Streptococcus Gruppe A\" mo_fullname(\"S. pyogenes\", Lancefield = TRUE, language = \"uk\") #> [1] \"Streptococcus Група A\"   # other --------------------------------------------------------------------  # gram stains and intrinsic resistance can be used as a filter in dplyr verbs if (require(\"dplyr\")) {   example_isolates %>%     filter(mo_is_gram_positive()) %>%     count(mo_genus(), sort = TRUE) } #> ℹ Using column 'mo' as input for mo_is_gram_positive() #> ℹ Using column 'mo' as input for mo_genus() #> # A tibble: 18 × 2 #>    `mo_genus()`        n #>    <chr>           <int> #>  1 Staphylococcus    840 #>  2 Streptococcus     275 #>  3 Enterococcus       83 #>  4 Corynebacterium    17 #>  5 Micrococcus         6 #>  6 Gemella             3 #>  7 Aerococcus          2 #>  8 Cutibacterium       1 #>  9 Dermabacter         1 #> 10 Fusibacter          1 #> 11 Globicatella        1 #> 12 Granulicatella      1 #> 13 Lactobacillus       1 #> 14 Leuconostoc         1 #> 15 Listeria            1 #> 16 Paenibacillus       1 #> 17 Rothia              1 #> 18 Schaalia            1 if (require(\"dplyr\")) {   example_isolates %>%     filter(mo_is_intrinsic_resistant(ab = \"vanco\")) %>%     count(mo_genus(), sort = TRUE) } #> ℹ Using column 'mo' as input for mo_is_intrinsic_resistant() #> ℹ Using column 'mo' as input for mo_genus() #> # A tibble: 19 × 2 #>    `mo_genus()`         n #>    <chr>            <int> #>  1 Escherichia        467 #>  2 Klebsiella          77 #>  3 Proteus             39 #>  4 Pseudomonas         30 #>  5 Serratia            25 #>  6 Enterobacter        23 #>  7 Citrobacter         11 #>  8 Haemophilus          9 #>  9 Acinetobacter        6 #> 10 Morganella           6 #> 11 Pantoea              4 #> 12 Salmonella           3 #> 13 Neisseria            2 #> 14 Stenotrophomonas     2 #> 15 Campylobacter        1 #> 16 Enterococcus         1 #> 17 Hafnia               1 #> 18 Leuconostoc          1 #> 19 Pseudescherichia     1  # get a list with the complete taxonomy (from kingdom to subspecies) mo_taxonomy(\"Klebsiella pneumoniae\") #> $kingdom #> [1] \"Bacteria\" #>  #> $phylum #> [1] \"Pseudomonadota\" #>  #> $class #> [1] \"Gammaproteobacteria\" #>  #> $order #> [1] \"Enterobacterales\" #>  #> $family #> [1] \"Enterobacteriaceae\" #>  #> $genus #> [1] \"Klebsiella\" #>  #> $species #> [1] \"pneumoniae\" #>  #> $subspecies #> [1] \"\" #>   # get a list with the taxonomy, the authors, Gram-stain, # SNOMED codes, and URL to the online database mo_info(\"Klebsiella pneumoniae\") #> $mo #> [1] \"B_KLBSL_PNMN\" #>  #> $rank #> [1] \"species\" #>  #> $kingdom #> [1] \"Bacteria\" #>  #> $phylum #> [1] \"Pseudomonadota\" #>  #> $class #> [1] \"Gammaproteobacteria\" #>  #> $order #> [1] \"Enterobacterales\" #>  #> $family #> [1] \"Enterobacteriaceae\" #>  #> $genus #> [1] \"Klebsiella\" #>  #> $species #> [1] \"pneumoniae\" #>  #> $subspecies #> [1] \"\" #>  #> $status #> [1] \"accepted\" #>  #> $synonyms #> NULL #>  #> $gramstain #> [1] \"Gram-negative\" #>  #> $oxygen_tolerance #> [1] \"facultative anaerobe\" #>  #> $url #> [1] \"https://lpsn.dsmz.de/species/klebsiella-pneumoniae\" #>  #> $ref #> [1] \"Trevisan, 1887\" #>  #> $snomed #> [1] \"1098101000112102\" \"446870005\"        \"1098201000112108\" \"409801009\"        #> [5] \"56415008\"         \"714315002\"        \"713926009\"        #>  #> $lpsn #> [1] \"777151\" #>  #> $mycobank #> [1] NA #>  #> $gbif #> [1] \"3221874\" #>  #> $group_members #> character(0) #>  # }"},{"path":"https://amr-for-r.org/reference/mo_source.html","id":null,"dir":"Reference","previous_headings":"","what":"User-Defined Reference Data Set for Microorganisms — mo_source","title":"User-Defined Reference Data Set for Microorganisms — mo_source","text":"functions can used predefine reference used .mo() consequently mo_* functions (mo_genus() mo_gramstain()). fastest way organisation (analysis) specific codes picked translated package, since bother setting .","code":""},{"path":"https://amr-for-r.org/reference/mo_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User-Defined Reference Data Set for Microorganisms — mo_source","text":"","code":"set_mo_source(path, destination = getOption(\"AMR_mo_source\",   \"~/mo_source.rds\"))  get_mo_source(destination = getOption(\"AMR_mo_source\", \"~/mo_source.rds\"))"},{"path":"https://amr-for-r.org/reference/mo_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User-Defined Reference Data Set for Microorganisms — mo_source","text":"path Location reference file, can text file (comma-, tab- pipe-separated) Excel file (see Details). Can also \"\", NULL FALSE delete reference file. destination Destination compressed data file - default user's home directory.","code":""},{"path":"https://amr-for-r.org/reference/mo_source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"User-Defined Reference Data Set for Microorganisms — mo_source","text":"reference file can text file separated commas (CSV) tabs pipes, Excel file (either 'xls' 'xlsx' format) R object file (extension '.rds'). use Excel file, need readxl package installed. set_mo_source() check file validity: must data.frame, must column named \"mo\" contains values microorganisms$mo microorganisms$fullname must reference column defined values. tests pass, set_mo_source() read file R ask export \"~/mo_source.rds\". CRAN policy disallows packages write file system, although 'exceptions may allowed interactive sessions package obtains confirmation user'. reason, function works interactive sessions user can specifically confirm allow file created. destination file can set destination argument defaults user's home directory. can also set package option AMR_mo_source, e.g. options(AMR_mo_source = \"/location/file.rds\"). created compressed data file \"mo_source.rds\" used default MO determination (function .mo() consequently mo_* functions like mo_genus() mo_gramstain()). location timestamp original file saved attribute compressed data file. function get_mo_source() return data set reading \"mo_source.rds\" readRDS(). original file changed (checking location timestamp original file), call set_mo_source() update data file automatically used interactive session. Reading Excel file (.xlsx) one row size 8-9 kB. compressed file created set_mo_source() size 0.1 kB can read get_mo_source() couple microseconds (millionths second).","code":""},{"path":"https://amr-for-r.org/reference/mo_source.html","id":"how-to-setup","dir":"Reference","previous_headings":"","what":"How to Setup","title":"User-Defined Reference Data Set for Microorganisms — mo_source","text":"Imagine data sheet Excel file. first column contains organisation specific codes, second column contains valid taxonomic names:   save \"/Users//Documents/ourcodes.xlsx\". Now set source:   now created file \"~/mo_source.rds\" contents Excel file. first column foreign values 'mo' column kept creating RDS file. now can use functions:   edit Excel file , say, adding row 4 like :   ...new usage MO function package update data file:   delete reference data file, just use \"\", NULL FALSE input set_mo_source():   original file (previous case Excel file) moved deleted, mo_source.rds file removed upon next use .mo() mo_* function.","code":"|         A          |            B          | --|--------------------|-----------------------| 1 | Organisation XYZ   | mo                    | 2 | lab_mo_ecoli       | Escherichia coli      | 3 | lab_mo_kpneumoniae | Klebsiella pneumoniae | 4 |                    |                       | set_mo_source(\"/Users/me/Documents/ourcodes.xlsx\") #> NOTE: Created mo_source file '/Users/me/mo_source.rds' (0.3 kB) from #>       '/Users/me/Documents/ourcodes.xlsx' (9 kB), columns #>       \"Organisation XYZ\" and \"mo\" as.mo(\"lab_mo_ecoli\") #> Class 'mo' #> [1] B_ESCHR_COLI  mo_genus(\"lab_mo_kpneumoniae\") #> [1] \"Klebsiella\"  # other input values still work too as.mo(c(\"Escherichia coli\", \"E. coli\", \"lab_mo_ecoli\")) #> NOTE: Translation to one microorganism was guessed with uncertainty. #>       Use mo_uncertainties() to review it. #> Class 'mo' #> [1] B_ESCHR_COLI B_ESCHR_COLI B_ESCHR_COLI |         A          |            B          | --|--------------------|-----------------------| 1 | Organisation XYZ   | mo                    | 2 | lab_mo_ecoli       | Escherichia coli      | 3 | lab_mo_kpneumoniae | Klebsiella pneumoniae | 4 | lab_Staph_aureus   | Staphylococcus aureus | 5 |                    |                       | as.mo(\"lab_mo_ecoli\") #> NOTE: Updated mo_source file '/Users/me/mo_source.rds' (0.3 kB) from #>       '/Users/me/Documents/ourcodes.xlsx' (9 kB), columns #>        \"Organisation XYZ\" and \"mo\" #> Class 'mo' #> [1] B_ESCHR_COLI  mo_genus(\"lab_Staph_aureus\") #> [1] \"Staphylococcus\" set_mo_source(NULL) #> Removed mo_source file '/Users/me/mo_source.rds'"},{"path":"https://amr-for-r.org/reference/pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis (for AMR) — pca","title":"Principal Component Analysis (for AMR) — pca","text":"Performs principal component analysis (PCA) based data set automatic determination afterwards plotting groups labels, automatic filtering suitable (.e. non-empty numeric) variables.","code":""},{"path":"https://amr-for-r.org/reference/pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (for AMR) — pca","text":"","code":"pca(x, ..., retx = TRUE, center = TRUE, scale. = TRUE, tol = NULL,   rank. = NULL)"},{"path":"https://amr-for-r.org/reference/pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (for AMR) — pca","text":"x data.frame containing numeric columns. ... Columns x selected PCA, can unquoted since supports quasiquotation. retx logical value indicating whether rotated variables     returned. center logical value indicating whether variables     shifted zero centered. Alternately, vector     length equal number columns x can supplied.     value passed scale. scale. logical value indicating whether variables     scaled unit variance analysis takes     place.  default FALSE consistency S,     general scaling advisable.  Alternatively, vector length     equal number columns x can supplied.      value passed scale. tol value indicating magnitude components     omitted. (Components omitted     standard deviations less equal tol times     standard deviation first component.)  default null     setting, components omitted (unless rank. specified     less min(dim(x)).).  settings tol     tol = 0 tol = sqrt(.Machine$double.eps),     omit essentially constant components. rank. optionally, number specifying maximal rank, .e.,     maximal number principal components used.  Can set     alternative addition tol, useful notably     desired rank considerably smaller dimensions matrix.","code":""},{"path":"https://amr-for-r.org/reference/pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Component Analysis (for AMR) — pca","text":"object classes pca prcomp","code":""},{"path":"https://amr-for-r.org/reference/pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis (for AMR) — pca","text":"pca() function takes data.frame input performs actual PCA R function prcomp(). result pca() function prcomp object, additional attribute non_numeric_cols vector column names columns contain numeric values. probably groups labels, used ggplot_pca().","code":""},{"path":"https://amr-for-r.org/reference/pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis (for AMR) — pca","text":"","code":"# `example_isolates` is a data set available in the AMR package. # See ?example_isolates.  # \\donttest{ if (require(\"dplyr\")) {   # calculate the resistance per group first   resistance_data <- example_isolates %>%     group_by(       order = mo_order(mo), # group on anything, like order       genus = mo_genus(mo)     ) %>% #   and genus as we do here;     filter(n() >= 30) %>% # filter on only 30 results per group     summarise_if(is.sir, resistance) # then get resistance of all drugs    # now conduct PCA for certain antimicrobial drugs   pca_result <- resistance_data %>%     pca(AMC, CXM, CTX, CAZ, GEN, TOB, TMP, SXT)    pca_result   summary(pca_result)   # old base R plotting method:   biplot(pca_result) } #> Warning: There were 73 warnings in `summarise()`. #> The first warning was: #> ℹ In argument: `PEN = (function (..., minimum = 30, as_percent = FALSE, #>   only_all_tested = FALSE) ...`. #> ℹ In group 5: `order = \"Lactobacillales\"` `genus = \"Enterococcus\"`. #> Caused by warning: #> ! Introducing NA: only 14 results available for PEN in group: order = #> \"Lactobacillales\", genus = \"Enterococcus\" (minimum = 30). #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 72 remaining warnings. #> ℹ Columns selected for PCA: \"AMC\", \"CAZ\", \"CTX\", \"CXM\", \"GEN\", \"SXT\", #>   \"TMP\", and \"TOB\". Total observations available: 7. #> Groups (n=4, named as 'order'): #> [1] \"Caryophanales\"    \"Enterobacterales\" \"Lactobacillales\"  \"Pseudomonadales\"  #>    # new ggplot2 plotting method using this package: if (require(\"dplyr\") && require(\"ggplot2\")) {     ggplot_pca(pca_result) }  if (require(\"dplyr\") && require(\"ggplot2\")) {     ggplot_pca(pca_result) +       scale_colour_viridis_d() +       labs(title = \"Title here\") }  # }"},{"path":"https://amr-for-r.org/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Helpers for AMR Data Analysis — plot","title":"Plotting Helpers for AMR Data Analysis — plot","text":"Functions plot classes sir, mic disk, support base R ggplot2. Especially scale_*_mic() functions relevant wrappers plot MIC values ggplot2. allows custom MIC ranges plot intermediate log2 levels missing MIC values.","code":""},{"path":"https://amr-for-r.org/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Helpers for AMR Data Analysis — plot","text":"","code":"scale_x_mic(keep_operators = \"edges\", mic_range = NULL, ...)  scale_y_mic(keep_operators = \"edges\", mic_range = NULL, ...)  scale_colour_mic(keep_operators = \"edges\", mic_range = NULL, ...)  scale_fill_mic(keep_operators = \"edges\", mic_range = NULL, ...)  scale_x_sir(colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R   = \"#ED553B\"), language = get_AMR_locale(),   eucast_I = getOption(\"AMR_guideline\", \"EUCAST\") == \"EUCAST\", ...)  scale_colour_sir(colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I =   \"#F6D55C\", R = \"#ED553B\"), language = get_AMR_locale(),   eucast_I = getOption(\"AMR_guideline\", \"EUCAST\") == \"EUCAST\", ...)  scale_fill_sir(colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\",   R = \"#ED553B\"), language = get_AMR_locale(),   eucast_I = getOption(\"AMR_guideline\", \"EUCAST\") == \"EUCAST\", ...)  # S3 method for class 'mic' plot(x, mo = NULL, ab = NULL,   guideline = getOption(\"AMR_guideline\", \"EUCAST\"),   main = deparse(substitute(x)), ylab = translate_AMR(\"Frequency\", language   = language),   xlab = translate_AMR(\"Minimum Inhibitory Concentration (mg/L)\", language =   language), colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R   = \"#ED553B\"), language = get_AMR_locale(), expand = TRUE,   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), ...)  # S3 method for class 'mic' autoplot(object, mo = NULL, ab = NULL,   guideline = getOption(\"AMR_guideline\", \"EUCAST\"),   title = deparse(substitute(object)), ylab = translate_AMR(\"Frequency\",   language = language),   xlab = translate_AMR(\"Minimum Inhibitory Concentration (mg/L)\", language =   language), colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R   = \"#ED553B\"), language = get_AMR_locale(), expand = TRUE,   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), ...)  # S3 method for class 'disk' plot(x, main = deparse(substitute(x)),   ylab = translate_AMR(\"Frequency\", language = language),   xlab = translate_AMR(\"Disk diffusion diameter (mm)\", language = language),   mo = NULL, ab = NULL, guideline = getOption(\"AMR_guideline\", \"EUCAST\"),   colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R =   \"#ED553B\"), language = get_AMR_locale(), expand = TRUE,   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), ...)  # S3 method for class 'disk' autoplot(object, mo = NULL, ab = NULL,   title = deparse(substitute(object)), ylab = translate_AMR(\"Frequency\",   language = language), xlab = translate_AMR(\"Disk diffusion diameter (mm)\",   language = language), guideline = getOption(\"AMR_guideline\", \"EUCAST\"),   colours_SIR = c(S = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R =   \"#ED553B\"), language = get_AMR_locale(), expand = TRUE,   include_PKPD = getOption(\"AMR_include_PKPD\", TRUE),   breakpoint_type = getOption(\"AMR_breakpoint_type\", \"human\"), ...)  # S3 method for class 'sir' plot(x, ylab = translate_AMR(\"Percentage\", language =   language), xlab = translate_AMR(\"Antimicrobial Interpretation\", language =   language), main = deparse(substitute(x)), language = get_AMR_locale(),   ...)  # S3 method for class 'sir' autoplot(object, title = deparse(substitute(object)),   xlab = translate_AMR(\"Antimicrobial Interpretation\", language = language),   ylab = translate_AMR(\"Frequency\", language = language), colours_SIR = c(S   = \"#3CAEA3\", SDD = \"#8FD6C4\", I = \"#F6D55C\", R = \"#ED553B\"),   language = get_AMR_locale(), ...)  facet_sir(facet = c(\"interpretation\", \"antibiotic\"), nrow = NULL)  scale_y_percent(breaks = function(x) seq(0, max(x, na.rm = TRUE), 0.1),   limits = c(0, NA))  scale_sir_colours(..., aesthetics, colours_SIR = c(S = \"#3CAEA3\", SDD =   \"#8FD6C4\", I = \"#F6D55C\", R = \"#ED553B\"))  theme_sir()  labels_sir_count(position = NULL, x = \"antibiotic\",   translate_ab = \"name\", minimum = 30, language = get_AMR_locale(),   combine_SI = TRUE, datalabels.size = 3, datalabels.colour = \"grey15\")"},{"path":"https://amr-for-r.org/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Helpers for AMR Data Analysis — plot","text":"keep_operators character specifying handle operators (> <=) input. Accepts one three values: \"\" (TRUE) keep operators, \"none\" (FALSE) remove operators, \"edges\" keep operators ends range. mic_range manual range rescale MIC values (using rescale_mic()), e.g., mic_range = c(0.001, 32). Use NA prevent rescaling one side, e.g., mic_range = c(NA, 32). Note: rescales values filter - use ggplot2 limits argument separately exclude values plot. ... Arguments passed methods. colours_SIR Colours use filling bars, must vector three values (order S, R). default colours colour-blind friendly. language Language used translate 'Susceptible', 'Increased exposure'/'Intermediate' 'Resistant' - default system language (see get_AMR_locale()) can overwritten setting package option AMR_locale, e.g. options(AMR_locale = \"de\"), see translate. Use language = NULL prevent translation. eucast_I logical indicate whether '' must interpreted \"Susceptible, increased exposure\". TRUE default AMR interpretation guideline set EUCAST (default). FALSE, interpreted \"Intermediate\". x, object Values created .mic(), .disk() .sir() (random_* variants, random_mic()). mo (vector ) text can coerced valid microorganism code .mo(). ab (vector ) text can coerced valid antimicrobial drug code .ab(). guideline Interpretation guideline use - default latest included EUCAST guideline, see Details. main, title Title plot. xlab, ylab Axis title. expand logical indicate whether range x axis expanded lowest highest value. MIC values, intermediate values factors 2 starting highest MIC value. disk diameters, whole diameter range filled. include_PKPD logical indicate PK/PD clinical breakpoints must applied last resort - default TRUE. Can also set package option AMR_include_PKPD. breakpoint_type type breakpoints use, either \"ECOFF\", \"animal\", \"human\". ECOFF stands Epidemiological Cut-values. default \"human\", can also set package option AMR_breakpoint_type. host set values veterinary species, automatically set \"animal\". facet Variable split plots , either \"interpretation\" (default) \"antibiotic\" grouping variable. nrow (using facet) number rows. breaks numeric vector positions. limits numeric vector length two providing limits scale, use NA refer existing minimum maximum. aesthetics Aesthetics apply colours - default \"fill\" can also (combination ) \"alpha\", \"colour\", \"fill\", \"linetype\", \"shape\" \"size\". position Position adjustment bars, either \"fill\", \"stack\" \"dodge\". translate_ab column name antimicrobials data set translate antibiotic abbreviations , using ab_property(). minimum minimum allowed number available (tested) isolates. isolate count lower minimum return NA warning. default number 30 isolates advised Clinical Laboratory Standards Institute (CLSI) best practice, see Source. combine_SI logical indicate whether values S, SDD, must merged one, output consists S+SDD+vs. R (susceptible vs. resistant) - default TRUE. datalabels.size Size datalabels. datalabels.colour Colour datalabels.","code":""},{"path":"https://amr-for-r.org/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Helpers for AMR Data Analysis — plot","text":"autoplot() functions return ggplot model extendible ggplot2 function.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/plot.html","id":"the-scale-mic-functions","dir":"Reference","previous_headings":"","what":"The scale_*_mic() Functions","title":"Plotting Helpers for AMR Data Analysis — plot","text":"functions scale_x_mic(), scale_y_mic(), scale_colour_mic(), scale_fill_mic() functions allow plot mic class (MIC values) continuous, logarithmic scale. also allow rescale MIC range 'inside' 'outside' range required, retain operators MIC values (>=) desired. Missing intermediate log2 levels plotted .","code":""},{"path":"https://amr-for-r.org/reference/plot.html","id":"the-scale-sir-functions","dir":"Reference","previous_headings":"","what":"The scale_*_sir() Functions","title":"Plotting Helpers for AMR Data Analysis — plot","text":"functions scale_x_sir(), scale_colour_sir(), scale_fill_sir() functions allow plot sir class right order (S < SDD < < R < NI). default, translate S//R values interpretative text (\"Susceptible\", \"Resistant\", etc.) 28 supported languages (use language = NULL keep S//R). Also, except scale_x_sir(), set colour-blind friendly colours colour fill aesthetics.","code":""},{"path":"https://amr-for-r.org/reference/plot.html","id":"additional-ggplot-functions","dir":"Reference","previous_headings":"","what":"Additional ggplot2 Functions","title":"Plotting Helpers for AMR Data Analysis — plot","text":"package contains functions extend ggplot2 package, help visualising AMR data results. functions internally used ggplot_sir() . facet_sir() creates 2d plots (default based S//R) using ggplot2::facet_wrap(). scale_y_percent() transforms y axis 0 100% range using ggplot2::scale_y_continuous(). scale_sir_colours() allows set colours aesthetic, even shape linetype. theme_sir() ggplot2 theme minimal distraction. labels_sir_count() print datalabels bars percentage number isolates, using ggplot2::geom_text(). interpretation \"\" named \"Increased exposure\" EUCAST guidelines since 2019, named \"Intermediate\" cases. interpreting MIC values well disk diffusion diameters, default guideline EUCAST 2025, unless package option AMR_guideline set. See .sir() information.","code":""},{"path":"https://amr-for-r.org/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Helpers for AMR Data Analysis — plot","text":"","code":"some_mic_values <- random_mic(size = 100) some_disk_values <- random_disk(size = 100, mo = \"Escherichia coli\", ab = \"cipro\") some_sir_values <- random_sir(50, prob_SIR = c(0.55, 0.05, 0.30))  # \\donttest{ # Plotting using ggplot2's autoplot() for MIC, disk, and SIR ----------- if (require(\"ggplot2\")) {   autoplot(some_mic_values) }  if (require(\"ggplot2\")) {   # when providing the microorganism and antibiotic, colours will show interpretations:   autoplot(some_mic_values, mo = \"Escherichia coli\", ab = \"cipro\") }  if (require(\"ggplot2\")) {   # support for 27 languages, various guidelines, and many options   autoplot(some_disk_values,     mo = \"Escherichia coli\", ab = \"cipro\",     guideline = \"CLSI 2024\", language = \"no\",     title = \"Disk diffusion from the North\"   ) }    # Plotting using scale_x_mic() ----------------------------------------- if (require(\"ggplot2\")) {   mic_plot <- ggplot(     data.frame(       mics = as.mic(c(0.25, \"<=4\", 4, 8, 32, \">=32\")),       counts = c(1, 1, 2, 2, 3, 3)     ),     aes(mics, counts)   ) +     geom_col()   mic_plot +     labs(title = \"without scale_x_mic()\") }  if (require(\"ggplot2\")) {   mic_plot +     scale_x_mic() +     labs(title = \"with scale_x_mic()\") }  if (require(\"ggplot2\")) {   mic_plot +     scale_x_mic(keep_operators = \"all\") +     labs(title = \"with scale_x_mic() keeping all operators\") }  if (require(\"ggplot2\")) {   mic_plot +     scale_x_mic(mic_range = c(1, 16)) +     labs(title = \"with scale_x_mic() using a manual 'within' range\") }  if (require(\"ggplot2\")) {   mic_plot +     scale_x_mic(mic_range = c(0.032, 256)) +     labs(title = \"with scale_x_mic() using a manual 'outside' range\") }    # Plotting using scale_y_mic() ----------------------------------------- some_groups <- sample(LETTERS[1:5], 20, replace = TRUE)  if (require(\"ggplot2\")) {   ggplot(     data.frame(       mic = some_mic_values,       group = some_groups     ),     aes(group, mic)   ) +     geom_boxplot() +     geom_violin(linetype = 2, colour = \"grey\", fill = NA) +     scale_y_mic() }  if (require(\"ggplot2\")) {   ggplot(     data.frame(       mic = some_mic_values,       group = some_groups     ),     aes(group, mic)   ) +     geom_boxplot() +     geom_violin(linetype = 2, colour = \"grey\", fill = NA) +     scale_y_mic(mic_range = c(NA, 0.25)) }    # Plotting using scale_x_sir() ----------------------------------------- if (require(\"ggplot2\")) {   ggplot(     data.frame(       x = c(\"I\", \"R\", \"S\"),       y = c(45, 323, 573)     ),     aes(x, y)   ) +     geom_col() +     scale_x_sir() }    # Plotting using scale_y_mic() and scale_colour_sir() ------------------ if (require(\"ggplot2\")) {   plain <- ggplot(     data.frame(       mic = some_mic_values,       group = some_groups,       sir = as.sir(some_mic_values,         mo = \"E. coli\",         ab = \"cipro\"       )     ),     aes(x = group, y = mic, colour = sir)   ) +     theme_minimal() +     geom_boxplot(fill = NA, colour = \"grey\") +     geom_jitter(width = 0.25)    plain }  if (require(\"ggplot2\")) {   # and now with our MIC and SIR scale functions:   plain +     scale_y_mic() +     scale_colour_sir() }  if (require(\"ggplot2\")) {   plain +     scale_y_mic(mic_range = c(0.005, 32), name = \"Our MICs!\") +     scale_colour_sir(       language = \"pt\",       name = \"Support in 27 languages\"     ) }  # }  # Plotting using base R's plot() ---------------------------------------  plot(some_mic_values)  # when providing the microorganism and antibiotic, colours will show interpretations: plot(some_mic_values, mo = \"S. aureus\", ab = \"ampicillin\")   plot(some_disk_values)  plot(some_disk_values, mo = \"Escherichia coli\", ab = \"cipro\")  plot(some_disk_values, mo = \"Escherichia coli\", ab = \"cipro\", language = \"nl\")   plot(some_sir_values)"},{"path":"https://amr-for-r.org/reference/proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Antimicrobial Resistance — proportion","title":"Calculate Antimicrobial Resistance — proportion","text":"functions can used calculate (co-)resistance susceptibility microbial isolates (.e. percentage S, SI, , IR R). functions support quasiquotation pipes, can used summarise() dplyr package also support grouped variables, see Examples. resistance() used calculate resistance, susceptibility() used calculate susceptibility.","code":""},{"path":"https://amr-for-r.org/reference/proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Antimicrobial Resistance — proportion","text":"","code":"resistance(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  susceptibility(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  sir_confidence_interval(..., ab_result = \"R\", minimum = 30,   as_percent = FALSE, only_all_tested = FALSE, confidence_level = 0.95,   side = \"both\", collapse = FALSE)  proportion_R(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  proportion_IR(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  proportion_I(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  proportion_SI(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  proportion_S(..., minimum = 30, as_percent = FALSE,   only_all_tested = FALSE)  proportion_df(data, translate_ab = \"name\", language = get_AMR_locale(),   minimum = 30, as_percent = FALSE, combine_SI = TRUE,   confidence_level = 0.95)  sir_df(data, translate_ab = \"name\", language = get_AMR_locale(),   minimum = 30, as_percent = FALSE, combine_SI = TRUE,   confidence_level = 0.95)"},{"path":"https://amr-for-r.org/reference/proportion.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate Antimicrobial Resistance — proportion","text":"M39 Analysis Presentation Cumulative Antimicrobial Susceptibility Test Data, 5th Edition, 2022, Clinical Laboratory Standards Institute (CLSI). https://clsi.org/standards/products/microbiology/documents/m39/.","code":""},{"path":"https://amr-for-r.org/reference/proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Antimicrobial Resistance — proportion","text":"... One vectors (columns) antibiotic interpretations. transformed internally .sir() needed. Use multiple columns calculate (lack ) co-resistance: probability one two drugs resistant susceptible result. See Examples. minimum minimum allowed number available (tested) isolates. isolate count lower minimum return NA warning. default number 30 isolates advised Clinical Laboratory Standards Institute (CLSI) best practice, see Source. as_percent logical indicate whether output must returned hundred fold % sign (character). value 0.123456 returned \"12.3%\". only_all_tested (combination therapies, .e. using one variable ...): logical indicate isolates must tested antimicrobials, see section Combination Therapy . ab_result Antibiotic results test , must one values \"S\", \"SDD\", \"\", \"R\". confidence_level confidence level returned confidence interval. calculation, number S SI isolates, R isolates compared total number available isolates R, S, using binom.test(), .e., Clopper-Pearson method. side side confidence interval return. default \"\" length 2 vector, can also (abbreviated ) \"min\"/\"left\"/\"lower\"/\"less\" \"max\"/\"right\"/\"higher\"/\"greater\". collapse logical indicate whether output values 'collapsed', .e. merged together one value, character value use collapsing. data data.frame containing columns class sir (see .sir()). translate_ab column name antimicrobials data set translate antibiotic abbreviations , using ab_property(). language Language returned text - default current system language (see get_AMR_locale()) can also set package option AMR_locale. Use language = NULL language = \"\" prevent translation. combine_SI logical indicate whether values S, SDD, must merged one, output consists S+SDD+vs. R (susceptible vs. resistant) - default TRUE.","code":""},{"path":"https://amr-for-r.org/reference/proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Antimicrobial Resistance — proportion","text":"double , as_percent = TRUE, character.","code":""},{"path":"https://amr-for-r.org/reference/proportion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Antimicrobial Resistance — proportion","text":"automated comprehensive analysis, consider using antibiogram() wisca(), streamline many aspects susceptibility reporting , importantly, also support WISCA. functions described offer hands-, manual approach greater customisation. Remember filter data let contain first isolates! needed exclude duplicates reduce selection bias. Use first_isolate() determine data set one four available algorithms. function resistance() equal function proportion_R(). function susceptibility() equal function proportion_SI(). Since AMR v3.0, proportion_SI() proportion_I() include dose-dependent susceptibility ('SDD'). Use sir_confidence_interval() calculate confidence interval, relies binom.test(), .e., Clopper-Pearson method. function returns vector length 2 default antimicrobial resistance. Change side argument \"left\"/\"min\" \"right\"/\"max\" return single value, change ab_result argument e.g. c(\"S\", \"\") test antimicrobial susceptibility, see Examples. functions meant count isolates, calculate proportion resistance/susceptibility. Use count_*() functions count isolates. function susceptibility() essentially equal count_susceptible()/count_all(). Low counts can influence outcome - proportion_*() functions may camouflage , since return proportion (albeit dependent minimum argument). function proportion_df() takes variable data sir class (created .sir()) calculates proportions S, , R. also supports grouped variables. function sir_df() works exactly like proportion_df(), adds number isolates.","code":""},{"path":"https://amr-for-r.org/reference/proportion.html","id":"combination-therapy","dir":"Reference","previous_headings":"","what":"Combination Therapy","title":"Calculate Antimicrobial Resistance — proportion","text":"using one variable ... (= combination therapy), use only_all_tested count isolates tested antimicrobials/variables test . See example two antimicrobials, Drug Drug B, susceptibility() works calculate %SI:   Please note , combination therapies, only_all_tested = TRUE applies :   , combination therapies, only_all_tested = FALSE applies :   Using only_all_tested impact using one antibiotic input.","code":"--------------------------------------------------------------------                     only_all_tested = FALSE  only_all_tested = TRUE                     -----------------------  -----------------------  Drug A    Drug B   considered   considered  considered   considered                     susceptible    tested    susceptible    tested --------  --------  -----------  ----------  -----------  ----------  S or I    S or I        X            X           X            X    R       S or I        X            X           X            X   <NA>     S or I        X            X           -            -  S or I      R           X            X           X            X    R         R           -            X           -            X   <NA>       R           -            -           -            -  S or I     <NA>         X            X           -            -    R        <NA>         -            -           -            -   <NA>      <NA>         -            -           -            - -------------------------------------------------------------------- count_S()    +   count_I()    +   count_R()    = count_all()   proportion_S() + proportion_I() + proportion_R() = 1 count_S()    +   count_I()    +   count_R()    >= count_all()   proportion_S() + proportion_I() + proportion_R() >= 1"},{"path":"https://amr-for-r.org/reference/proportion.html","id":"interpretation-of-sir","dir":"Reference","previous_headings":"","what":"Interpretation of SIR","title":"Calculate Antimicrobial Resistance — proportion","text":"2019, European Committee Antimicrobial Susceptibility Testing (EUCAST) decided change definitions susceptibility testing categories S, , R (https://www.eucast.org/newsiandr). AMR package follows insight; use susceptibility() (equal proportion_SI()) determine antimicrobial susceptibility count_susceptible() (equal count_SI()) count susceptible isolates.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Antimicrobial Resistance — proportion","text":"","code":"# example_isolates is a data set available in the AMR package. # run ?example_isolates for more info. example_isolates #> # A tibble: 2,000 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,990 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …   # base R ------------------------------------------------------------ # determines %R resistance(example_isolates$AMX) #> [1] 0.5955556 sir_confidence_interval(example_isolates$AMX) #> [1] 0.5688204 0.6218738 sir_confidence_interval(example_isolates$AMX,   confidence_level = 0.975 ) #> [1] 0.5650148 0.6255670 sir_confidence_interval(example_isolates$AMX,   confidence_level = 0.975,   collapse = \", \" ) #> [1] \"0.565, 0.626\"  # determines %S+I: susceptibility(example_isolates$AMX) #> [1] 0.4044444 sir_confidence_interval(example_isolates$AMX,   ab_result = c(\"S\", \"I\") ) #> [1] 0.3781262 0.4311796  # be more specific proportion_S(example_isolates$AMX) #> [1] 0.4022222 proportion_SI(example_isolates$AMX) #> [1] 0.4044444 proportion_I(example_isolates$AMX) #> [1] 0.002222222 proportion_IR(example_isolates$AMX) #> [1] 0.5977778 proportion_R(example_isolates$AMX) #> [1] 0.5955556  # dplyr ------------------------------------------------------------- # \\donttest{ if (require(\"dplyr\")) {   example_isolates %>%     group_by(ward) %>%     summarise(       r = resistance(CIP),       n = n_sir(CIP)     ) # n_sir works like n_distinct in dplyr, see ?n_sir } #> # A tibble: 3 × 3 #>   ward           r     n #>   <chr>      <dbl> <int> #> 1 Clinical   0.147   869 #> 2 ICU        0.190   447 #> 3 Outpatient 0.161    93 if (require(\"dplyr\")) {   example_isolates %>%     group_by(ward) %>%     summarise(       cipro_R = resistance(CIP),       ci_min = sir_confidence_interval(CIP, side = \"min\"),       ci_max = sir_confidence_interval(CIP, side = \"max\"),     ) } #> # A tibble: 3 × 4 #>   ward       cipro_R ci_min ci_max #>   <chr>        <dbl>  <dbl>  <dbl> #> 1 Clinical     0.147 0.124   0.173 #> 2 ICU          0.190 0.155   0.230 #> 3 Outpatient   0.161 0.0932  0.252 if (require(\"dplyr\")) {   # scoped dplyr verbs with antimicrobial selectors   # (you could also use across() of course)   example_isolates %>%     group_by(ward) %>%     summarise_at(       c(aminoglycosides(), carbapenems()),       resistance     ) } #> ℹ For aminoglycosides() using columns 'GEN' (gentamicin), 'TOB' #>   (tobramycin), 'AMK' (amikacin), and 'KAN' (kanamycin) #> ℹ For carbapenems() using columns 'IPM' (imipenem) and 'MEM' (meropenem) #> Warning: There was 1 warning in `summarise()`. #> ℹ In argument: `KAN = (function (..., minimum = 30, as_percent = FALSE, #>   only_all_tested = FALSE) ...`. #> ℹ In group 3: `ward = \"Outpatient\"`. #> Caused by warning: #> ! Introducing NA: only 23 results available for KAN in group: ward = #> \"Outpatient\" (minimum = 30). #> # A tibble: 3 × 7 #>   ward         GEN   TOB   AMK   KAN    IPM    MEM #>   <chr>      <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl> #> 1 Clinical   0.229 0.315 0.626     1 0.0498 0.0458 #> 2 ICU        0.290 0.400 0.662     1 0.0862 0.0894 #> 3 Outpatient 0.2   0.368 0.605    NA 0.0541 0.0541 if (require(\"dplyr\")) {   example_isolates %>%     group_by(ward) %>%     summarise(       R = resistance(CIP, as_percent = TRUE),       SI = susceptibility(CIP, as_percent = TRUE),       n1 = count_all(CIP), # the actual total; sum of all three       n2 = n_sir(CIP), # same - analogous to n_distinct       total = n()     ) # NOT the number of tested isolates!    # Calculate co-resistance between amoxicillin/clav acid and gentamicin,   # so we can see that combination therapy does a lot more than mono therapy:   example_isolates %>% susceptibility(AMC) # %SI = 76.3%   example_isolates %>% count_all(AMC) #   n = 1879    example_isolates %>% susceptibility(GEN) # %SI = 75.4%   example_isolates %>% count_all(GEN) #   n = 1855    example_isolates %>% susceptibility(AMC, GEN) # %SI = 94.1%   example_isolates %>% count_all(AMC, GEN) #   n = 1939     # See Details on how `only_all_tested` works. Example:   example_isolates %>%     summarise(       numerator = count_susceptible(AMC, GEN),       denominator = count_all(AMC, GEN),       proportion = susceptibility(AMC, GEN)     )    example_isolates %>%     summarise(       numerator = count_susceptible(AMC, GEN, only_all_tested = TRUE),       denominator = count_all(AMC, GEN, only_all_tested = TRUE),       proportion = susceptibility(AMC, GEN, only_all_tested = TRUE)     )     example_isolates %>%     group_by(ward) %>%     summarise(       cipro_p = susceptibility(CIP, as_percent = TRUE),       cipro_n = count_all(CIP),       genta_p = susceptibility(GEN, as_percent = TRUE),       genta_n = count_all(GEN),       combination_p = susceptibility(CIP, GEN, as_percent = TRUE),       combination_n = count_all(CIP, GEN)     )    # Get proportions S/I/R immediately of all sir columns   example_isolates %>%     select(AMX, CIP) %>%     proportion_df(translate = FALSE)    # It also supports grouping variables   # (use sir_df to also include the count)   example_isolates %>%     select(ward, AMX, CIP) %>%     group_by(ward) %>%     sir_df(translate = FALSE) } #> # A tibble: 12 × 7 #>    ward       antibiotic interpretation value ci_min ci_max isolates #>    <chr>      <chr>      <ord>          <dbl>  <dbl>  <dbl>    <int> #>  1 Clinical   AMX        SI             0.423 0.389   0.457      357 #>  2 Clinical   AMX        R              0.577 0.543   0.611      487 #>  3 Clinical   CIP        SI             0.853 0.827   0.876      741 #>  4 Clinical   CIP        R              0.147 0.124   0.173      128 #>  5 ICU        AMX        SI             0.369 0.323   0.417      158 #>  6 ICU        AMX        R              0.631 0.583   0.677      270 #>  7 ICU        CIP        SI             0.810 0.770   0.845      362 #>  8 ICU        CIP        R              0.190 0.155   0.230       85 #>  9 Outpatient AMX        SI             0.397 0.288   0.515       31 #> 10 Outpatient AMX        R              0.603 0.485   0.712       47 #> 11 Outpatient CIP        SI             0.839 0.748   0.907       78 #> 12 Outpatient CIP        R              0.161 0.0932  0.252       15 # }"},{"path":"https://amr-for-r.org/reference/random.html","id":null,"dir":"Reference","previous_headings":"","what":"Random MIC Values/Disk Zones/SIR Generation — random","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"functions can used generating random MIC values disk diffusion diameters, AMR data analysis practice. providing microorganism antimicrobial drug, generated results reflect reality much possible.","code":""},{"path":"https://amr-for-r.org/reference/random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"","code":"random_mic(size = NULL, mo = NULL, ab = NULL, skew = \"right\",   severity = 1, ...)  random_disk(size = NULL, mo = NULL, ab = NULL, skew = \"left\",   severity = 1, ...)  random_sir(size = NULL, prob_SIR = c(0.33, 0.33, 0.33), ...)"},{"path":"https://amr-for-r.org/reference/random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"size Desired size returned vector. used data.frame call dplyr verb, get current (group) size left blank. mo character can coerced valid microorganism code .mo(). Can length size. ab character can coerced valid antimicrobial drug code .ab(). skew Direction skew MIC disk values, either \"right\" \"left\". left-skewed distribution majority data right. severity Skew severity; higher values increase skewedness. Default 2; use 0 prevent skewedness. ... Ignored, place allow future extensions. prob_SIR vector length 3: probabilities \"S\" (1st value), \"\" (2nd value) \"R\" (3rd value).","code":""},{"path":"https://amr-for-r.org/reference/random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"class mic random_mic() (see .mic()) class disk random_disk() (see .disk())","code":""},{"path":"https://amr-for-r.org/reference/random.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"Internally, MIC disk zone values sampled based clinical breakpoints defined clinical_breakpoints data set. create specific generated values per bug drug, set mo /ab argument. MICs sampled log2 scale disks linearly, using weighted probabilities. weights based skew severity arguments: skew = \"right\" places emphasis lower MIC higher disk values. skew = \"left\" places emphasis higher MIC lower disk values. severity controls exponential bias applied.","code":""},{"path":"https://amr-for-r.org/reference/random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random MIC Values/Disk Zones/SIR Generation — random","text":"","code":"random_mic(25) #> Class 'mic' #>  [1] 1      0.064  2      0.016  128    0.001  0.004  0.008  64     0.064  #> [11] 0.002  0.001  0.016  0.004  0.0005 0.0005 0.125  0.032  0.032  8      #> [21] 2      8      0.008  0.0005 8      random_disk(25) #> Class 'disk' #>  [1] 46 38 45 47 24 28 45 43 19 23 44 19 31 22 40 39 39 36 35 14 34 45 21 19 39 random_sir(25) #> Class 'sir' #>  [1] I S R I R I S S S R R R I I R R I S R R S I S R I  # add more skewedness, make more realistic by setting a bug and/or drug: disks <- random_disk(100, severity = 2, mo = \"Escherichia coli\", ab = \"CIP\") plot(disks)  # `plot()` and `ggplot2::autoplot()` allow for coloured bars if `mo` and `ab` are set plot(disks, mo = \"Escherichia coli\", ab = \"CIP\", guideline = \"CLSI 2025\")   # \\donttest{ random_mic(25, \"Klebsiella pneumoniae\") # range 0.0625-64 #> Class 'mic' #>  [1] 2      0.032  32     0.5    0.001  0.008  0.002  4      0.0005 1      #> [11] 0.001  1      8      0.002  0.25   2      0.016  0.004  0.25   0.125  #> [21] 0.002  0.5    0.004  >=256  0.0005 random_mic(25, \"Klebsiella pneumoniae\", \"meropenem\") # range 0.0625-16 #> Class 'mic' #>  [1] 4   >=8 4   >=8 4   >=8 4   4   4   4   4   4   >=8 >=8 4   >=8 4   4   4   #> [20] 4   4   4   4   4   4   random_mic(25, \"Streptococcus pneumoniae\", \"meropenem\") # range 0.0625-4 #> Class 'mic' #>  [1] <=0.25 0.5    <=0.25 <=0.25 <=0.25 0.5    <=0.25 <=0.25 <=0.25 <=0.25 #> [11] <=0.25 <=0.25 0.5    <=0.25 <=0.25 <=0.25 0.5    <=0.25 0.5    <=0.25 #> [21] <=0.25 0.5    <=0.25 0.5    0.5     random_disk(25, \"Klebsiella pneumoniae\") # range 8-50 #> Class 'disk' #>  [1] 33 26 16 27 29 33 24 17 17 15 16 26 26 14 17 29 25 25 24 32 32 34 18 31 10 random_disk(25, \"Klebsiella pneumoniae\", \"ampicillin\") # range 11-17 #> Class 'disk' #>  [1] 19 20 11 14 12 12 17 16 12 10 15 22 19 21 19 17 18 19 21 17 21 15 17 12 19 random_disk(25, \"Streptococcus pneumoniae\", \"ampicillin\") # range 12-27 #> Class 'disk' #>  [1] 27 24 31 22 35 28 26 32 24 18 35 33 24 28 33 25 35 25 32 24 26 20 23 22 33 # }"},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Antimicrobial Resistance — resistance_predict","title":"Predict Antimicrobial Resistance — resistance_predict","text":"Create prediction model predict antimicrobial resistance next years. Standard errors (SE) returned columns se_min se_max. See Examples real live example. NOTE: functions deprecated removed future version. Use AMR package combined tidymodels framework instead, written basic short introduction website.","code":""},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Antimicrobial Resistance — resistance_predict","text":"","code":"resistance_predict(x, col_ab, col_date = NULL, year_min = NULL,   year_max = NULL, year_every = 1, minimum = 30, model = NULL,   I_as_S = TRUE, preserve_measurements = TRUE, info = interactive(), ...)  sir_predict(x, col_ab, col_date = NULL, year_min = NULL, year_max = NULL,   year_every = 1, minimum = 30, model = NULL, I_as_S = TRUE,   preserve_measurements = TRUE, info = interactive(), ...)  # S3 method for class 'resistance_predict' plot(x, main = paste(\"Resistance Prediction of\",   x_name), ...)  ggplot_sir_predict(x, main = paste(\"Resistance Prediction of\", x_name),   ribbon = TRUE, ...)  # S3 method for class 'resistance_predict' autoplot(object,   main = paste(\"Resistance Prediction of\", x_name), ribbon = TRUE, ...)"},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Antimicrobial Resistance — resistance_predict","text":"x data.frame containing isolates. Can left blank automatic determination, see Examples. col_ab Column name x containing antimicrobial interpretations (\"R\", \"\" \"S\"). col_date Column name date, used calculate years column consist years already - default first column date class. year_min Lowest year use prediction model, dafaults lowest year col_date. year_max Highest year use prediction model - default 10 years today. year_every Unit sequence lowest year found data year_max. minimum Minimal amount available isolates per year include. Years containing less observations estimated model. model statistical model choice. generalised linear regression model binomial distribution (.e. using glm(..., family = binomial), assuming period zero resistance followed period increasing resistance leading slowly resistance. See Details valid options. I_as_S logical indicate whether values \"\" treated \"S\" (otherwise treated \"R\"). default, TRUE, follows redefinition EUCAST interpretation (increased exposure) 2019, see section Interpretation S, R . preserve_measurements logical indicate whether predictions years actually available data overwritten original data. standard errors years NA. info logical indicate whether textual analysis printed name summary() statistical model. ... Arguments passed functions. main Title plot. ribbon logical indicate whether ribbon shown (default) error bars. object Model data plotted.","code":""},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Antimicrobial Resistance — resistance_predict","text":"data.frame extra class resistance_predict columns: year value, estimated preserve_measurements = FALSE, combination observed estimated otherwise se_min, lower bound standard error minimum 0 (standard error never go 0%) se_max upper bound standard error maximum 1 (standard error never go 100%) observations, total number available observations year, .e. \\(S + + R\\) observed, original observed resistant percentages estimated, estimated resistant percentages, calculated model Furthermore, model available attribute: attributes(x)$model, see Examples.","code":""},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Antimicrobial Resistance — resistance_predict","text":"Valid options statistical model (argument model) : \"binomial\" \"binom\" \"logit\": generalised linear regression model binomial distribution \"loglin\" \"poisson\": generalised log-linear regression model poisson distribution \"lin\" \"linear\": linear regression model","code":""},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"interpretation-of-sir","dir":"Reference","previous_headings":"","what":"Interpretation of SIR","title":"Predict Antimicrobial Resistance — resistance_predict","text":"2019, European Committee Antimicrobial Susceptibility Testing (EUCAST) decided change definitions susceptibility testing categories S, , R (https://www.eucast.org/newsiandr). AMR package follows insight; use susceptibility() (equal proportion_SI()) determine antimicrobial susceptibility count_susceptible() (equal count_SI()) count susceptible isolates.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/resistance_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Antimicrobial Resistance — resistance_predict","text":"","code":"x <- resistance_predict(example_isolates,   col_ab = \"AMX\",   year_min = 2010,   model = \"binomial\" ) #> Warning: The resistance_predict() function is deprecated and will be removed in a #> future version, see ?AMR-deprecated. Use the tidymodels framework #> instead, for which we have written a basic and short introduction on our #> website: https://amr-for-r.org/articles/AMR_with_tidymodels.html #> This warning will be shown once per session. plot(x)  # \\donttest{ if (require(\"ggplot2\")) {   ggplot_sir_predict(x) }   # using dplyr: if (require(\"dplyr\")) {   x <- example_isolates %>%     filter_first_isolate() %>%     filter(mo_genus(mo) == \"Staphylococcus\") %>%     resistance_predict(\"PEN\", model = \"binomial\")   print(plot(x))    # get the model from the object   mymodel <- attributes(x)$model   summary(mymodel) }  #> NULL #>  #> Call: #> glm(formula = df_matrix ~ year, family = binomial) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept) 35.76101   72.29172   0.495    0.621 #> year        -0.01720    0.03603  -0.477    0.633 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 5.3681  on 11  degrees of freedom #> Residual deviance: 5.1408  on 10  degrees of freedom #> AIC: 50.271 #>  #> Number of Fisher Scoring iterations: 4 #>   # create nice plots with ggplot2 yourself if (require(\"dplyr\") && require(\"ggplot2\")) {   data <- example_isolates %>%     filter(mo == as.mo(\"E. coli\")) %>%     resistance_predict(       col_ab = \"AMX\",       col_date = \"date\",       model = \"binomial\",       info = FALSE,       minimum = 15     )   head(data)   autoplot(data) }  # }"},{"path":"https://amr-for-r.org/reference/skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewness of the Sample — skewness","title":"Skewness of the Sample — skewness","text":"Skewness measure asymmetry probability distribution real-valued random variable mean. negative ('left-skewed'): left tail longer; mass distribution concentrated right histogram. positive ('right-skewed'): right tail longer; mass distribution concentrated left histogram. normal distribution skewness 0.","code":""},{"path":"https://amr-for-r.org/reference/skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewness of the Sample — skewness","text":"","code":"skewness(x, na.rm = FALSE)  # Default S3 method skewness(x, na.rm = FALSE)  # S3 method for class 'matrix' skewness(x, na.rm = FALSE)  # S3 method for class 'data.frame' skewness(x, na.rm = FALSE)"},{"path":"https://amr-for-r.org/reference/skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewness of the Sample — skewness","text":"x vector values, matrix data.frame. na.rm logical value indicating whether NA values stripped computation proceeds.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/skewness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewness of the Sample — skewness","text":"","code":"skewness(runif(1000)) #> [1] -0.03886098"},{"path":"https://amr-for-r.org/reference/top_n_microorganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Top n Microorganisms — top_n_microorganisms","title":"Filter Top n Microorganisms — top_n_microorganisms","text":"function filters data set include top n microorganisms based specified property, taxonomic family genus. example, can filter data set top 3 species, species top 5 genera, top 3 species top 5 genera.","code":""},{"path":"https://amr-for-r.org/reference/top_n_microorganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Top n Microorganisms — top_n_microorganisms","text":"","code":"top_n_microorganisms(x, n, property = \"species\", n_for_each = NULL,   col_mo = NULL, ...)"},{"path":"https://amr-for-r.org/reference/top_n_microorganisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Top n Microorganisms — top_n_microorganisms","text":"x data frame containing microbial data. n integer specifying maximum number unique values property include output. property character string indicating microorganism property use filtering. Must one column names microorganisms data set: \"mo\", \"fullname\", \"status\", \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\", \"subspecies\", \"rank\", \"ref\", \"oxygen_tolerance\", \"source\", \"lpsn\", \"lpsn_parent\", \"lpsn_renamed_to\", \"mycobank\", \"mycobank_parent\", \"mycobank_renamed_to\", \"gbif\", \"gbif_parent\", \"gbif_renamed_to\", \"prevalence\", \"snomed\". NULL, raw values col_mo used without transformation. using \"species\" (default) \"subpecies\", genus added make sure (sub)species still belongs right genus. n_for_each optional integer specifying maximum number rows retain value selected property. NULL, rows within top n groups included. col_mo character string indicating column x contains microorganism names codes. Defaults first column class mo. Values coerced using .mo(). ... Additional arguments passed mo_property() property NULL.","code":""},{"path":"https://amr-for-r.org/reference/top_n_microorganisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Top n Microorganisms — top_n_microorganisms","text":"function useful preprocessing data creating antibiograms analyses require focused subsets microbial data. example, can filter data set include isolates top 10 species.","code":""},{"path":[]},{"path":"https://amr-for-r.org/reference/top_n_microorganisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Top n Microorganisms — top_n_microorganisms","text":"","code":"# filter to the top 3 species: top_n_microorganisms(example_isolates,   n = 3 ) #> # A tibble: 1,015 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  4 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  5 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  6 2002-01-19 738003     71 M      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  7 2002-02-03 481442     76 M      ICU      B_STPHY_CONS   R     NA    S     NA  #>  8 2002-02-14 067927     45 F      ICU      B_STPHY_CONS   R     NA    R     NA  #>  9 2002-02-14 067927     45 F      ICU      B_STPHY_CONS   S     NA    S     NA  #> 10 2002-02-21 A56499     64 M      Clinical B_STPHY_CONS   S     NA    S     NA  #> # ℹ 1,005 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # filter to any species in the top 5 genera: top_n_microorganisms(example_isolates,   n = 5, property = \"genus\" ) #> # A tibble: 1,742 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-01-02 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  2 2002-01-03 A77334     65 F      Clinical B_ESCHR_COLI   R     NA    NA    NA  #>  3 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  4 2002-01-07 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  5 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  6 2002-01-13 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #>  7 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  8 2002-01-14 462729     78 M      Clinical B_STPHY_AURS   R     NA    S     R   #>  9 2002-01-16 067927     45 F      ICU      B_STPHY_EPDR   R     NA    R     NA  #> 10 2002-01-17 858515     79 F      ICU      B_STPHY_EPDR   R     NA    S     NA  #> # ℹ 1,732 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …  # filter to the top 3 species in each of the top 5 genera: top_n_microorganisms(example_isolates,   n = 5, property = \"genus\", n_for_each = 3 ) #> # A tibble: 1,497 × 46 #>    date       patient   age gender ward     mo           PEN   OXA   FLC   AMX   #>    <date>     <chr>   <dbl> <chr>  <chr>    <mo>         <sir> <sir> <sir> <sir> #>  1 2002-02-21 4FC193     69 M      Clinical B_ENTRC_FACM   NA    NA    NA    NA  #>  2 2002-04-08 130252     78 M      ICU      B_ENTRC_FCLS   NA    NA    NA    NA  #>  3 2002-06-23 798871     82 M      Clinical B_ENTRC_FCLS   NA    NA    NA    NA  #>  4 2002-06-23 798871     82 M      Clinical B_ENTRC_FCLS   NA    NA    NA    NA  #>  5 2003-04-20 6BC362     62 M      ICU      B_ENTRC        NA    NA    NA    NA  #>  6 2003-04-21 6BC362     62 M      ICU      B_ENTRC        NA    NA    NA    NA  #>  7 2003-08-13 F35553     52 M      ICU      B_ENTRC_FCLS   NA    NA    NA    NA  #>  8 2003-09-05 F35553     52 M      ICU      B_ENTRC        NA    NA    NA    NA  #>  9 2003-09-05 F35553     52 M      ICU      B_ENTRC_FCLS   NA    NA    NA    NA  #> 10 2003-09-28 1B0933     80 M      Clinical B_ENTRC        NA    NA    NA    NA  #> # ℹ 1,487 more rows #> # ℹ 36 more variables: AMC <sir>, AMP <sir>, TZP <sir>, CZO <sir>, FEP <sir>, #> #   CXM <sir>, FOX <sir>, CTX <sir>, CAZ <sir>, CRO <sir>, GEN <sir>, #> #   TOB <sir>, AMK <sir>, KAN <sir>, TMP <sir>, SXT <sir>, NIT <sir>, #> #   FOS <sir>, LNZ <sir>, CIP <sir>, MFX <sir>, VAN <sir>, TEC <sir>, #> #   TCY <sir>, TGC <sir>, DOX <sir>, ERY <sir>, CLI <sir>, AZM <sir>, #> #   IPM <sir>, MEM <sir>, MTR <sir>, CHL <sir>, COL <sir>, MUP <sir>, …"},{"path":"https://amr-for-r.org/reference/translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate Strings from the AMR Package — translate","title":"Translate Strings from the AMR Package — translate","text":"language-dependent output AMR functions, mo_name(), mo_gramstain(), mo_type() ab_name().","code":""},{"path":"https://amr-for-r.org/reference/translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate Strings from the AMR Package — translate","text":"","code":"get_AMR_locale()  set_AMR_locale(language)  reset_AMR_locale()  translate_AMR(x, language = get_AMR_locale())"},{"path":"https://amr-for-r.org/reference/translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate Strings from the AMR Package — translate","text":"language Language choose. Use one supported language names ISO 639-1 codes: English (en), Arabic (ar), Bengali (bn), Chinese (zh), Czech (cs), Danish (da), Dutch (nl), Finnish (fi), French (fr), German (de), Greek (el), Hindi (hi), Indonesian (id), Italian (), Japanese (ja), Korean (ko), Norwegian (), Polish (pl), Portuguese (pt), Romanian (ro), Russian (ru), Spanish (es), Swahili (sw), Swedish (sv), Turkish (tr), Ukrainian (uk), Urdu (ur), Vietnamese (vi). x Text translate.","code":""},{"path":"https://amr-for-r.org/reference/translate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate Strings from the AMR Package — translate","text":"currently 28 supported languages English (en), Arabic (ar), Bengali (bn), Chinese (zh), Czech (cs), Danish (da), Dutch (nl), Finnish (fi), French (fr), German (de), Greek (el), Hindi (hi), Indonesian (id), Italian (), Japanese (ja), Korean (ko), Norwegian (), Polish (pl), Portuguese (pt), Romanian (ro), Russian (ru), Spanish (es), Swahili (sw), Swedish (sv), Turkish (tr), Ukrainian (uk), Urdu (ur), Vietnamese (vi). languages translations available antimicrobial drugs colloquial microorganism names. permanently silence -per-session language note non-English operating system, can set package option AMR_locale .Rprofile file like :   save file. Please read adding updating language Wiki.","code":"# Open .Rprofile file utils::file.edit(\"~/.Rprofile\")  # Then add e.g. Italian support to that file using: options(AMR_locale = \"Italian\")"},{"path":"https://amr-for-r.org/reference/translate.html","id":"changing-the-default-language","dir":"Reference","previous_headings":"","what":"Changing the Default Language","title":"Translate Strings from the AMR Package — translate","text":"system language used default (returned Sys.getenv(\"LANG\") , LANG set, Sys.getlocale(\"LC_COLLATE\")), language supported. language used can overwritten two ways checked order: Setting package option AMR_locale, either using e.g. set_AMR_locale(\"German\") running e.g. options(AMR_locale = \"German\"). Note setting R option works session. Save command options(AMR_locale = \"(language)\") .Rprofile file apply every session. Run utils::file.edit(\"~/.Rprofile\") edit .Rprofile file. Setting system variable LANGUAGE LANG, e.g. adding LANGUAGE=\"de_DE.utf8\" .Renviron file home directory. Thus, package option AMR_locale set, system variables LANGUAGE LANG ignored.","code":""},{"path":"https://amr-for-r.org/reference/translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate Strings from the AMR Package — translate","text":"","code":"# Current settings (based on system language) ab_name(\"Ciprofloxacin\") #> [1] \"Ciprofloxacin\" mo_name(\"Coagulase-negative Staphylococcus (CoNS)\") #> [1] \"Coagulase-negative Staphylococcus (CoNS)\"  # setting another language set_AMR_locale(\"Dutch\") #> ℹ Using Dutch (Nederlands) for the AMR package for this session. ab_name(\"Ciprofloxacin\") #> [1] \"Ciprofloxacine\" mo_name(\"Coagulase-negative Staphylococcus (CoNS)\") #> [1] \"Coagulase-negatieve Staphylococcus (CNS)\"  # setting yet another language set_AMR_locale(\"German\") #> ℹ Using German (Deutsch) for the AMR package for this session. ab_name(\"Ciprofloxacin\") #> [1] \"Ciprofloxacin\" mo_name(\"Coagulase-negative Staphylococcus (CoNS)\") #> [1] \"Koagulase-negative Staphylococcus (KNS)\"  # set_AMR_locale() understands endonyms, English exonyms, and ISO 639-1: set_AMR_locale(\"Deutsch\") #> ℹ Using German (Deutsch) for the AMR package for this session. set_AMR_locale(\"German\") #> ℹ Using German (Deutsch) for the AMR package for this session. set_AMR_locale(\"de\") #> ℹ Using German (Deutsch) for the AMR package for this session. ab_name(\"amox/clav\") #> [1] \"Amoxicillin/Clavulansäure\"  # reset to system default reset_AMR_locale() #> ℹ Using the English language (English) for the AMR package for this #>   session. ab_name(\"amox/clav\") #> [1] \"Amoxicillin/clavulanic acid\""},{"path":"https://amr-for-r.org/news/index.html","id":"amr-3009010","dir":"Changelog","previous_headings":"","what":"AMR 3.0.0.9010","title":"AMR 3.0.0.9010","text":"primarily bugfix release, though added one nice feature .","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"new-3-0-0-9010","dir":"Changelog","previous_headings":"","what":"New","title":"AMR 3.0.0.9010","text":"step_mic_log2() transform <mic> columns log2, step_sir_numeric() convert <sir> columns numeric New tidyselect helpers: all_mic(), all_mic_predictors(), all_sir(), all_sir_predictors()","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"changed-3-0-0-9010","dir":"Changelog","previous_headings":"","what":"Changed","title":"AMR 3.0.0.9010","text":"Fixed bug antibiogram() antimicrobials set Fixed bug antibiogram() allow column names containing + character (#222) Fixed bug .ab() antimicrobial codes number preceded space Fixed bug eucast_rules() using specific custom rules Fixed bug .sir() allow tidyselect language (#220) Fixed bug .sir() pick right breakpoint uti = FALSE (#216) Fixed bug ggplot_sir() using combine_SI = FALSE (#213) Fixed plotting contain separate colour SDD (susceptible dose-dependent) (#223) Fixed specific Dutch translations antimicrobials Added note .sir() make explicit higher-level taxonomic breakpoints used (#218) Updated random_mic() random_disk() set skewedness distribution allow multiple microorganisms","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"amr-300","dir":"Changelog","previous_headings":"","what":"AMR 3.0.0","title":"AMR 3.0.0","text":"CRAN release: 2025-06-02 package now supports tools AMR data analysis clinical settings, also veterinary environmental microbiology. made possible collaboration University Prince Edward Island’s Atlantic Veterinary College, Canada. celebrate great improvement package, also updated package logo reflect change.","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"breaking-3-0-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"AMR 3.0.0","text":"Dataset antibiotics renamed antimicrobials data set contains just antibiotics. Using antibiotics still work, now returns warning. Removed functions references used deprecated rsi class, replaced sir equivalents two years ago. Functions resistance_predict() sir_predict() now deprecated removed future version. Use tidymodels framework instead, wrote basic introduction.","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"new-3-0-0","dir":"Changelog","previous_headings":"","what":"New","title":"AMR 3.0.0","text":"Function .sir() now extensive support veterinary breakpoints CLSI. Use breakpoint_type = \"animal\" set host argument variable contains animal species names. clinical_breakpoints data set contains breakpoints, can downloaded download page. (new) antimicrobials data set contains veterinary antimicrobials, pradofloxacin enrofloxacin. WHOCC codes veterinary use added well. ab_atc() now supports ATC codes veterinary antimicrobials (start “Q”) ab_url() now supports retrieving WHOCC url ATCvet pages antibiogram() function now supports creating true Weighted-Incidence Syndromic Combination Antibiograms (WISCA), powerful Bayesian method estimating regimen coverage probabilities using pathogen incidence antimicrobial susceptibility data. WISCA offers improved precision syndrome-specific treatment, even datasets sparse data. dedicated wisca() function also available easy usage. Added full support 8 new languages: Arabic, Bengali, Hindi, Indonesian, Korean, Swahili, Urdu, Vietnamese. AMR package now available 28 languages. MycoBank now integrated primary taxonomic source fungi. microorganisms data set enriched new columns (mycobank, mycobank_parent, mycobank_renamed_to) provide detailed information fungal species. remarkable addition 20,000 new fungal records New function mo_mycobank() retrieve MycoBank record number, analogous existing functions mo_lpsn() mo_gbif(). .mo() function mo_*() functions now include only_fungi argument, allowing users restrict results solely fungal species. ensures fungi prioritised bacteria microorganism identification. can also set globally new AMR_only_fungi option. Also updated kingdoms, welcoming total 2,149 new records 2023 927 2024. Breakpoint 2024 2025 CLSI EUCAST now supported, adding 10,000 new clinical breakpoints clinical_breakpoints data set usage .sir(). EUCAST 2025 now new default guideline MIC disk diffusion interpretations. Added Expected Resistant Phenotypes EUCAST (v1.2). default rules eucast_rules() now: c(\"breakpoints\", \"expected_phenotypes\"). Updated intrinsic_resistant data set, now based EUCAST Expected Resistant Phenotypes v1.2 .sir() now brings additional factor levels: “NI” non-interpretable “SDD” susceptible dose-dependent. Currently, clinical_breakpoints data set contains 24 breakpoints can return value “SDD” instead “”. EUCAST interpretive rules (using eucast_rules()) now available EUCAST 12 (2022), 13 (2023), 14 (2024), 15 (2025). EUCAST dosage tables (dosage data set) now available EUCAST 13 (2023), 14 (2024), 15 (2025). New function group scale_*_mic(), namely: scale_x_mic(), scale_y_mic(), scale_colour_mic() scale_fill_mic(). allow easy plotting MIC values. allow manual range definition plotting missing intermediate log2 levels. New function group scale_*_sir(), namely: scale_x_sir(), scale_colour_sir() scale_fill_sir(). allow plot sir class, translates system language default. also set colourblind-safe colours plots. New function rescale_mic(), allows users rescale MIC values manually set range. powerhouse behind scale_*_mic() functions, can used independently , instance, compare equality MIC distributions rescaling range first. using R heavy lifting, ‘AMR’ Python Package developed run AMR R package natively Python. Python package always version number R package, built automatically every code change. antimicrobial selectors (aminoglycosides() betalactams()) now supported tidymodels packages recipe parsnip. See info tutorial using AMR functions predictive modelling. New function top_n_microorganisms() filter data set top n taxonomic property, e.g., filter top 3 species, filter species top 5 genera, filter top 3 species top 5 genera New function mo_group_members() retrieve member microorganisms microorganism group. example, mo_group_members(\"Strep group C\") returns vector microorganisms belong group. New functions mic_p50() mic_p90() retrieve 50th 90th percentile MIC values.","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"changed-3-0-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"AMR 3.0.0","text":"Support parallel computing greatly improve speed using parallel package (part base R). Use .sir(your_data, parallel = TRUE) run SIR interpretation using multiple cores. now possible use column names arguments guideline, ab, mo, uti: .sir(..., ab = \"column1\", mo = \"column2\", uti = \"column3\"). greatly improves flexibility users. Users can now set criteria (using regular expressions) considered S, , R, SDD, NI. get quantitative values, .double() sir object return 1 S, 2 SDD/, 3 R (NI become NA). functions using sir classes (e.g., summary()) updated reflect change contain NI SDD. Following CLSI interpretation rules, values outside log2-dilution range rounded upwards nearest log2-level interpretation. using CLSI guideline. Combined MIC values (e.g., CLSI) now supported argument conserve_capped_values .sir() replaced capped_mic_handling, allows greater flexibility handling capped MIC values (<, <=, >, >=). four available options (\"standard\", \"strict\", \"relaxed\", \"inverse\") provide full control whether values interpreted conservatively ignored. Using conserve_capped_values now deprecated returns warning. Added argument info silence console messages Argument antibiotics renamed antimicrobials. Using antibiotics still work, now returns warning. Added argument formatting_type set 22 options formatting ‘cells’. defaults 18 non-WISCA 14 WISCA, changing output antibiograms cells info. reason, add_total_n now deprecated FALSE default since denominators added cells dependent formatting_type setting ab_transform argument now defaults \"name\", displaying antibiotic column names instead codes ‘Antibiotic selectors’ now called ‘antimicrobial selectors’ since scope broader just antibiotics. documentation updated, ab_class() ab_selector() replaced amr_class() amr_selector(). old functions now deprecated removed future version. Added selectors isoxazolylpenicillins(), monobactams(), nitrofurans(), phenicols(), rifamycins(), sulfonamides() using antimicrobial selectors exclude non-treatable drugs (gentamicin-high using aminoglycosides()), function now always returns warning can included using only_treatable = FALSE Added new argument return_all selectors, defaults TRUE include match. FALSE, old behaviour, first hit unique antimicrobial returned. selectors can now run separate command retrieve vector possible antimicrobials selector can select selectors lincosamides() macrolides() overlap anymore - antibiotic now classified either Fixed selector fluoroquinolones(), now really selects second-generation quinolones (first-generation quinolones contain fluorine group) Added agents used screening, ID ending -S: benzylpenicillin screening test (PEN-S), beta-lactamase screening test (BLA-S), cefotaxime screening test (CTX-S), clindamycin inducible screening test (CLI-S), nalidixic acid screening test (NAL-S), norfloxacin screening test (-S), oxacillin screening test (OXA-S), pefloxacin screening test (PEF-S), tetracycline screening test (TCY-S). ID cefoxitin screening renamed FOX1 FOX-S, old code remains work. reason, antimicrobial selectors cephalosporins(), cephalosporins_3rd(), lincosamides(), isoxazolylpenicillins(), quinolones(), fluoroquinolones(), tetracyclines() now contain argument only_treatable = TRUE (similar antimicrobial selectors contain non-treatable drugs) Added amorolfine (AMO, D01AE16), antimycotic, now also part antifungals() selector Added cefepime/enmetazobactam (FPE), 4th gen cephalosporin Added tigemonam (TNM), monobactam Added bleomycin (BLM), glycopeptide Added efflux (EFF), allow mapping AMRFinderPlus Updated ATC codes, trade names, DDDs Added valid levels: 4096, 6 powers 0.0625, 5 powers 192 (192, 384, 576, 768, 960) Fixed bug .mic() failed translation scientifically formatted numbers Added new argument keep_operators .mic(). can \"\" (default), \"none\", \"edges\". argument also available new rescale_mic() scale_*_mic() functions. Comparisons MIC values now strict. example, >32 higher (never equal ) 32. Thus, .mic(\">32\") == .mic(32) now returns FALSE, .mic(\">32\") > .mic(32) now returns TRUE. Sorting MIC values (using sort()) fixed manner; <0.001 now gets sorted 0.001, >0.001 gets sorted 0.001. Intermediate log2 levels used MIC plotting now common values instead following strict dilution range .mic() now returns vector TRUE/FALSE input data.frame, just like .sir() eucast_rules() now argument overwrite (default: FALSE) indicate whether non-NA values overwritten Disks 0 5 mm now allowed, newly allowed range disk diffusion (.disk()) now 0 50 mm Updated italicise_taxonomy() support HTML output custom_eucast_rules() now supports multiple antimicrobials antimicrobial groups affected single rule mo_info() now contains extra element rank group_members (contents new mo_group_members() function) Updated ATC codes WHOCC Updated antimicrobial DDDs WHOCC Fix using manual value mo_transform antibiogram() Fixed bug antibiogram() returns empty data set Argument only_sir_columns now defaults TRUE column data set contains class ‘sir’ (functions eucast_rules(), key_antimicrobials(), mdro(), etc.) Added Sensititre codes animals, antimicrobials microorganisms Fix mapping ‘high level’ antimicrobials .ab() (amphotericin B-high, gentamicin-high, kanamycin-high, streptomycin-high, tobramycin-high) Improved overall algorithm .ab() better performance accuracy, including new function as_reset_session() remove earlier coercions. weight given genus species combinations cases subspecies miswritten, result correct genus species Genera World Health Organization’s () Priority Pathogen List now highest prevalence Fixed bug sir_confidence_interval() isolates available Updated prevalence calculation include genera World Health Organization’s () Priority Pathogen List Improved algorithm first_isolate() using phenotype-based method, prioritise records highest availability SIR values scale_y_percent() can now cope ranges outside 0-100% range Verbose Mode (verbose = TRUE) now includes guideline name Implemented new Dutch national MDRO guideline (SRI-richtlijn BRMO, Nov 2024) Added arguments esbl, carbapenemase, mecA, mecC, vanA, vanB denote column names logical values indicating presence genes (production proteins) Added upport antimicrobial selectors use custom rule (custom_mdro_guideline()) Added console colours support sir class Positron","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"other-3-0-0","dir":"Changelog","previous_headings":"","what":"Other","title":"AMR 3.0.0","text":"New website domain: https://amr--r.org! old domain remain work. Added Dr. Larisse Bolton Aislinn Cook contributors fantastic implementation WISCA mathematically solid way Added Matthew Saab, Dr. Jordan Stull, Prof. Javier Sanchez contributors tremendous input veterinary breakpoints interpretations Added Prof. Kathryn Holt, Dr. Jane Hawkey, Dr. Natacha Couto contributors many suggestions, ideas bugfixes Greatly improved vctrs integration, Tidyverse package working background many Tidyverse functions. users, means functions dplyr’s bind_rows(), rowwise() c_across() now supported e.g. columns class mic. Despite , AMR package still zero-dependent package, including dplyr vctrs. Greatly updated expanded documentation Stopped support SAS (.xpt) files, since file structure extremely inefficient requires disk space GitHub allows single commit.","code":""},{"path":"https://amr-for-r.org/news/index.html","id":"older-versions-3-0-0","dir":"Changelog","previous_headings":"","what":"Older Versions","title":"AMR 3.0.0","text":"changelog contains changes AMR v3.0 (June 2025) later. prior v2 versions, please see v2 archive. prior v1 versions, please see v1 archive.","code":""}]
