# ==================================================================== #
# TITLE:                                                               #
# AMR: An R Package for Working with Antimicrobial Resistance Data     #
#                                                                      #
# SOURCE CODE:                                                         #
# https://github.com/msberends/AMR                                     #
#                                                                      #
# PLEASE CITE THIS SOFTWARE AS:                                        #
# Berends MS, Luz CF, Friedrich AW, et al. (2022).                     #
# AMR: An R Package for Working with Antimicrobial Resistance Data.    #
# Journal of Statistical Software, 104(3), 1-31.                       #
# https://doi.org/10.18637/jss.v104.i03                                #
#                                                                      #
# Developed at the University of Groningen and the University Medical  #
# Center Groningen in The Netherlands, in collaboration with many      #
# colleagues from around the world, see our website.                   # 
#                                                                      #
# This R package is free software; you can freely use and distribute   #
# it for both personal and commercial purposes under the terms of the  #
# GNU General Public License version 2.0 (GNU GPL-2), as published by  #
# the Free Software Foundation.                                        #
# We created this package for both routine data analysis and academic  #
# research and it was publicly released in the hope that it will be    #
# useful, but it comes WITHOUT ANY WARRANTY OR LIABILITY.              #
#                                                                      #
# Visit our website for the full manual and a complete tutorial about  #
# how to conduct AMR data analysis: https://amr-for-r.org              #
# ==================================================================== #

on:
  push:
    # only on main
    branches: "main"

name: Publish Python Package to PyPI

jobs:
  update-pypi:
    runs-on: ubuntu-latest
    
    env:
      GH_REPO_SCOPE: ${{ secrets.GH_REPO_SCOPE }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
        
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
        
      - name: Build the Python package
        run: |
          cd data-raw/
          bash _generate_python_wrapper.sh
      
      - name: Upload to PyPI
        continue-on-error: true
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd PythonPackage/AMR
          python -m twine upload dist/*
          
      - name: Upload to PyPI Testserver
        continue-on-error: true
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TEST_TOKEN }}
        run: |
          cd PythonPackage/AMR
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

      # TODO - Support Miniconda and Anaconda too
      # - name: Set up Miniconda
      #   continue-on-error: true
      #   uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     auto-update-conda: true
      #     miniconda-version: "latest"
      #     channels: conda-forge,defaults
      #     activate-environment: build-env
      #     python-version: "3.9"
      # 
      # - name: Install conda-build and anaconda-client
      #   continue-on-error: true
      #   run: |
      #     conda install -y conda-build anaconda-client
      # 
      # - name: Build conda package
      #   continue-on-error: true
      #   run: |
      #     cd PythonPackage/AMR
      #     conda skeleton pypi .  # Or use custom recipe
      #     conda-build ./ --output-folder conda-bld
      # 
      # - name: Upload to Anaconda
      #   continue-on-error: true
      #   env:
      #     ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      #   run: |
      #     anaconda login --token $ANACONDA_API_TOKEN
      #     anaconda upload conda-bld/**/amr-*.tar.bz2 --user msberends --label main
      #     rm -rf conda-bld

      - name: Git push to python-wrapper branch
        run: |
          find . -mindepth 1 ! -path './PythonPackage*' -exec rm -rf {} +

          mv PythonPackage/AMR/* .
          rm -rf PythonPackage

          git init
          git remote add origin https://$GH_REPO_SCOPE@github.com/msberends/AMR
          git checkout --orphan python-wrapper
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git rm -rf . || true
          git add .
          git commit -m "Python wrapper update"
          git push https://$GH_REPO_SCOPE@github.com/msberends/AMR.git python-wrapper --force
